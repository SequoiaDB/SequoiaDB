#ifndef MONLATCH_HPP_
#define MONLATCH_HPP_

#include "ossLatch.hpp"
#include "ossRWMutex.hpp"
#include "ossAtomic.hpp"

namespace engine
{
class _monClassLatch ;

enum MON_LATCH_IDENTIFIER
{
   MON_LATCH_DMSCB_STATEMTX = 1,
   MON_LATCH_DMSSB_PERSIST_LATCH,
   MON_LATCH_DMSSB_COMMIT_LATCH,
   MON_LATCH_DMSSDC_LATCHCONTEXT,
   MON_LATCH_DPSTRANSCB_MAPMUTEX,
   MON_LATCH_DPSTRANSCB_CBMAPMUTEX,
   MON_LATCH_DPSTRANSCB_LSNMAPMUTEX,
   MON_LATCH_DPSTRANSCB_HISMUTEX,
   MON_LATCH_RTNCB_MUTEX,
   MON_LATCH_MBLOCK,
   MON_LATCH_CATGTSMSGHANDLER_JOBLATCH,
   MON_LATCH_CATMAINCONTROLLER_CONTEXTLATCH,
   MON_LATCH_CATSEQUENCE_LATCH,
   MON_LATCH_CLSSHARDINGKEYSITE_MUTEX,
   MON_LATCH_CLSDCMGR_PEERCATLATCH,
   MON_LATCH_CLSDATASRCBASESESSION_LSNLATCH,
   MON_LATCH_CLSBUCKET_BUCKETLATCH,
   MON_LATCH_CLSFREEZINGWINDOW_LATCH,
   MON_LATCH_CLSSHARDMGR_CATLATCH,
   MON_LATCH_COORDCB_CONTEXTLATCH,
   MON_LATCH_DMSSEGMENTSPACE_MUTEX,
   MON_LATCH_DMSPAGEMAPPINGDISPATCHER_LATCH,
   MON_LATCH_DMSSTORAGELOB_DELAYOPENLATCH,
   MON_LATCH_DPSARCHIVEINFOMGR_MUTEX,
   MON_LATCH_DPSARCHIVEMGR_MUTEX,
   MON_LATCH_DPSREPLICALOGMGR_MTX,
   MON_LATCH_DPSREPLICALOGMGR_WRITEMUTEX,
   MON_LATCH_DPSTRANSCB_MAXFILESIZEMUTEX,
   MON_LATCH_DPSTRANSLRBHEADERHASH_MAXFILESIZEMUTEX,
   MON_LATCH_NETEVENTHANDLER_MTX,
   MON_LATCH_OMMANAGER_CONTEXTLATCH,
   MON_LATCH_OMSTRATEGYMGR_CONTEXTLATCH,
   MON_LATCH_OMAGENTMGR_SCOPELATCH,
   MON_LATCH_OPTCACHEDPLANACTIVITY_LATCH,
   MON_LATCH_OPTACCESSPLANMANAGER_REINITLATCH,
   MON_LATCH_PMDSESSIONMETA_LATCH,
   MON_LATCH_PMDASYCSESSIONMGR_METALATCH,
   MON_LATCH_PMDASYCSESSIONMGR_DEQDELETINGMUTEX,
   MON_LATCH_PMDASYCSESSIONMGR_FORCELATCH,
   MON_LATCH_IPMDDMNCHILDPROC_MUTEX,
   MON_LATCH_PMDLIGHTJOBMGR_UNITLATCH,
   MON_LATCH_PMDBUFFPOOL_UNITLATCH,
   MON_LATCH_PMDCFGRECORD_MUTEX,
   MON_LATCH_RESTSESSIONINFO_INLATCH,
   MON_LATCH_PMDSYNCMGR_UNITLATCH,
   MON_LATCH_RTNEXTDATAHANDLER_LATCH,
   MON_LATCH_RTNLOBACCESSINFO_LOCK,
   MON_LATCH_SCHEDTASKCONTANIERMGR_LATCH,
   MON_LATCH_SCHEDTASKMGR_LATCH,
   MON_LATCH_SPDFMPMGR_MTX,
   MON_LATCH_UTILCACHEUNIT_PAGECLEANER,
   MON_LATCH_UTILMEMBLOCKPOOL_LATCH,
   MON_LATCH_UTILSEGMENTPOOL_LATCH,
   MON_LATCH_CATDCLOGMGR_LATCH,
   MON_LATCH_CLSMGR_CLSLATCH,
   MON_LATCH_CLSSHARDMGR_SHARDLATCH,
   MON_LATCH_CLSTASKMGR_TASKLATCH,
   MON_LATCH_CLSTASKMGR_REGLATCH,
   MON_LATCH_COORDOMSTRATEGYAGENT_LATCH,
   MON_LATCH_COORDRESOURCE_NODEMUTEX,
   MON_LATCH_COORDRESOURCE_CATAMUTEX,
   MON_LATCH_SDB_DMSCB_MUTEX,
   MON_LATCH_DMSSTORAGEBASE_SEGMENTLATCH,
   MON_LATCH_DMSSTORAGEDATACOMMON_METADATALATCH,
   MON_LATCH_DMSSYSSUMGR_MUTEX,
   MON_LATCH_OLDVERSIONCB_OLDVERSIONCBLATCH,
   MON_LATCH_NETEHSEGMENT_MTX,
   MON_LATCH_NETFRAME_SUITEMTX,
   MON_LATCH_NETFRAME_MTX,
   MON_LATCH_NETROUTE_MTX,
   MON_LATCH_OMMANAGER_OMLATCH,
   MON_LATCH_OMHOSTVERSION_LOCK,
   MON_LATCH_OMAASYNCTASK_PLANLATCH,
   MON_LATCH_OMAGENTOPTIONS_LATCH,
   MON_LATCH_OMAGENTMGR_IMMEDIATELYTIMERLATCH,
   MON_LATCH_OMAGENTMGR_MGRLATCH,
   MON_LATCH_OMAGENTNODEMGR_MAPLATCH,
   MON_LATCH_OMAGENTNODEMGR_GUARDLATCH,
   MON_LATCH_OMAADDHOSTTASK_TASKLATCH,
   MON_LATCH_OMAREMOVEHOSTTASK_TASKLATCH,
   MON_LATCH_OMAINSTDBBUSTASK_TASKLATCH,
   MON_LATCH_OMAREMOVEDBBUSTASK_TASKLATCH,
   MON_LATCH_OMAZNBUSTASKBASE_TASKLATCH,
   MON_LATCH_OMASSQLOLAPBUSBASE_TASKLATCH,
   MON_LATCH_OMASSQLEXECTASK_TASKLATCH,
   MON_LATCH_OMATASK_LATCH,
   MON_LATCH_OMATASKMGR_TASKLATCH,
   MON_LATCH_OSSASIO_MUTEX,
   MON_LATCH_OSS_FILE_MUTEX,
   MON_LATCH_SDB_KRCB_HANDLERLATCH,
   MON_LATCH_PMDCONTROLLER_CTRLLATCH,
   MON_LATCH_PMDEDUCB_MUTEX,
   MON_LATCH_PMDEDUMGR_LATCH,
   MON_LATCH_PMDREMOTESESSIONMGR_EDUSLATCH,
   MON_LATCH_RTNJOBMGR_LATCH,
   MON_LATCH_RTNJOBMGR_LATCHREMOVE,
   MON_LATCH_RTNEXTDATAPROCESSORMGR_MUTEX,
   MON_LATCH_CLSCATALOGAGENT_RWMUTEX,
   MON_LATCH_CLSGROUPITEM_RWMUTEX,
   MON_LATCH_CLSNODEMGRAGENT_RWMUTEX,
   MON_LATCH_CLSDCBASEINFO_RWMUTEX,
   MON_LATCH_CLSGROUPINFO_RWMUTEX,
   MON_LATCH_CLSBUCKET_COUNTERLOCK,
   MON_LATCH_CLSREPLICATESET_VECLATCH,
   MON_LATCH_DMSCOMPRESSORENTRY_LOCK,
   MON_LATCH_DMSSMEMGR_MUTEX,
   MON_LATCH_DPSLOGPAGE_MTX,
   MON_LATCH_DPSTRANSLOCKMANAGER_RWMUTEX,
   MON_LATCH_NETEVENTSUIT_RWMUTEX,
   MON_LATCH_NETFRAME_SUITEEXITMUTEX,
   MON_LATCH_OPTCACHEDPLANMONITOR_CLEARLOCK,
   MON_LATCH_OSSMMAPFILE_RWMUTEX,
   MON_LATCH_PMDEDUMGR_EDUEXITMUTEX,
   MON_LATCH_RTNCONTEXTBASE_DATALOCK,
   MON_LATCH_RTNCONTEXTBASE_PREFETCHLOCK,
   MON_LATCH_RTNREMOTEMESSENGER_LOCK,
   MON_LATCH_UTILCACHEBUCKET_RWMUTEX,
   MON_LATCH_UTILHASHTABLE_BUCKETNUMLOCK,

   MON_LATCH_ID_MAX  // max id

} ;

const CHAR* monLatchIDtoName ( MON_LATCH_IDENTIFIER latchID) ;

class monSpinXLatch : public ossXLatch
{
public:
   monSpinXLatch( MON_LATCH_IDENTIFIER latchID ) ;

   ~monSpinXLatch() ;

   void get() ;

   void release() ;

   BOOLEAN try_get() ;

   INT32 getNumOwner() ;
public:
   ossSpinXLatch latch ;
   MON_LATCH_IDENTIFIER latchID ;
   UINT32 lastSOwnerTID ;
   UINT32 xOwnerTID ;
   INT32 numXOwner ;
} ;

class monSpinSLatch : public ossSLatch
{
private:
   monSpinSLatch& operator=(const monSpinSLatch& rhs )
   {
      latchID = rhs.latchID ;
      return *this ;
   }
   friend class _dmsStorageDataCommon;

public:
   monSpinSLatch( MON_LATCH_IDENTIFIER latchID ) ;

   monSpinSLatch() ;

   ~monSpinSLatch() ;

   void get() ;

   void release() ;

   void get_shared() ;

   void release_shared () ;

   BOOLEAN try_get() ;

   BOOLEAN try_get_shared() ;

   INT32 getNumOwner() ;
public:
   ossSpinSLatch latch ;
   MON_LATCH_IDENTIFIER latchID ;
   UINT32 lastSOwnerTID ;
   UINT32 xOwnerTID ;
   ossAtomic32 numSOwner ;
   INT32 numXOwner ;
} ;

class monRWMutex : public ossRWMutexBase
{
public:
   monRWMutex( MON_LATCH_IDENTIFIER latchID, UINT32 type = RW_EXCLUSIVEWRITE ) ;

   ~monRWMutex() ;

   INT32 lock_r ( INT32 millisec = -1 ) ;

   INT32 lock_w ( INT32 millisec = -1 ) ;

   INT32 release_r () ;

   INT32 release_w () ;

   BOOLEAN try_lock_r() ;

   BOOLEAN try_lock_w() ;

   INT32 getNumOwner() ;
public:
   ossRWMutex mutex ;
   MON_LATCH_IDENTIFIER latchID ;
   UINT32 lastSOwnerTID ;
   UINT32 xOwnerTID ;
   ossAtomic32 numSOwner ;
   INT32 numXOwner ;
} ;

}
#endif
