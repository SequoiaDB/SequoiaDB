To build readtest - the tests for the Intel(R) Decimal Floating-Point Math 
Library V2.2 (Version 2, Update 2) on processors that are implementations of the 
IA-32 Architecture, Intel(R) 64, or IA-64 Architecture:  

  In Linux* with icc (Intel(R) C++ Compiler 9.1 or newer) or gcc:

    make clean OS_TYPE=LINUX
    make OS_TYPE=LINUX CC=icc CALL_BY_REF=0 GLOBAL_RND=0 GLOBAL_FLAGS=0 UNCHANGED_BINARY_FLAGS=0
      - CC can be icc, gcc
      - CALL_BY_REF, GLOBAL_RND, GLOBAL_FLAGS, UNCHANGED_BINARY_FLAGS can be any of 0000, 0001, ... , 1111

  In Windows** with icl (Intel(R) C++ Compiler 9.1 or newer) or cl (Microsoft
  Visual C++ Compiler**):  

    nmake clean OS_TYPE=WIN
    nmake -fmakefile.mak CC=icl CALL_BY_REF=0 GLOBAL_RND=0 GLOBAL_FLAGS=0 UNCHANGED_BINARY_FLAGS=0
      -  CC can be cl, icl; EXCEPTION for Itanium when CC=cl: OS_TYPE=WIN_IA64
      -  CALL_BY_REF, GLOBAL_RND, GLOBAL_FLAGS, UNCHANGED_BINARY_FLAGS can be any of 0000, 0001, ... , 1111
      -  [g]make which stands for a GNU make-compatible make program (e.g. make from
         cygwin) can also be used

    Note: The scripts and makefiles provided here may need adjustments, 
        depending on the environment in which they are used; for example if 
        moving files from Windows to Linux, running dos2unix on the Linux 
        script files may be necessary.

To run readtest:
    ./readtest < readtest.in (Linux)
    readtest < readtest.in (Windows)     

Note: 
=====
  For some other operating systems and architecture combinations see the
  following command files, as well as any command files invoked from these ones:
        RUNLINUX
        RUNWINDOWS_nmake.bat
        RUNWINDOWSINTEL64.bat (for Itanium Architecture)
        RUNOSX
        RUNOSXINTEL64 (for Itanium Architecture)
        RUNSOLARIS
        RUNHPUX32 (for HP-UX* on IA-64 Architecture, 32-bit data mode) 
        RUNHPUX64 (for HP-UX* on IA-64 Architecture, 64-bit data mode)
  These command files build and run the tests from this directory,
  possibly using more than one compiler. Changes may be necessary in certain
  environments. However, prior to building these tests the similar RUN*
  command has to be executed in ../LIBRARY/ in order to build all the 
  necessary versions of the Intel(R) Decimal Floating-Point Math Library.
  The tests [when built correctly] pass if the word FAIL does not appear in
  the output. Note that failures may possibly occur due to incorrect code 
  generated by a compiler.


Note:
=====
If the makefile provided here is not used, the parameter passing method and  
local/global rounding mode and status flags may be selected by editing  
test_bid_conf.h:

Parameter passing is determined by an environment variable in test_bid_conf.h:
  - by value:
        #define DECIMAL_CALL_BY_REFERENCE 0
  - by reference:
        #define DECIMAL_CALL_BY_REFERENCE 1
 
Global variables are determined by two environment variables in test_bid_conf.h:
  - rnd_mode passed as parameter
        #define DECIMAL_GLOBAL_ROUNDING 0
  - rnd_mode global
        #define DECIMAL_GLOBAL_ROUNDING 1
  - status flags *pfpsf passed as parameter
        #define DECIMAL_GLOBAL_EXCEPTION_FLAGS 0
  - status flags *pfpsf global
        #define DECIMAL_GLOBAL_EXCEPTION_FLAGS 1

For more information see ../README

* Other names and brands may be claimed as the property of others.

** Microsoft, Windows, and the Windows logo are trademarks, or registered 
trademarks of Microsoft Corporation in the United States and/or other countries

