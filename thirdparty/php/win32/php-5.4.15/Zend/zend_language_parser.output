Terminals which are not used

   T_CHARACTER
   T_BAD_CHARACTER
   "comment (T_COMMENT)"
   "doc comment (T_DOC_COMMENT)"
   "open tag (T_OPEN_TAG)"
   "open tag with echo (T_OPEN_TAG_WITH_ECHO)"
   "close tag (T_CLOSE_TAG)"
   "whitespace (T_WHITESPACE)"


State 216 conflicts: 1 shift/reduce
State 776 conflicts: 2 shift/reduce


Grammar

    0 $accept: start "end of file"

    1 start: top_statement_list

    2 @1: /* empty */

    3 top_statement_list: top_statement_list @1 top_statement
    4                   | /* empty */

    5 namespace_name: "identifier (T_STRING)"
    6               | namespace_name "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"

    7 top_statement: statement
    8              | function_declaration_statement
    9              | class_declaration_statement
   10              | "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';'
   11              | "namespace (T_NAMESPACE)" namespace_name ';'

   12 @2: /* empty */

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' @2 top_statement_list '}'

   14 @3: /* empty */

   15 top_statement: "namespace (T_NAMESPACE)" '{' @3 top_statement_list '}'
   16              | "use (T_USE)" use_declarations ';'
   17              | constant_declaration ';'

   18 use_declarations: use_declarations ',' use_declaration
   19                 | use_declaration

   20 use_declaration: namespace_name
   21                | namespace_name "as (T_AS)" "identifier (T_STRING)"
   22                | "\\ (T_NS_SEPARATOR)" namespace_name
   23                | "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)"

   24 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' static_scalar
   25                     | "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar

   26 @4: /* empty */

   27 inner_statement_list: inner_statement_list @4 inner_statement
   28                     | /* empty */

   29 inner_statement: statement
   30                | function_declaration_statement
   31                | class_declaration_statement
   32                | "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';'

   33 statement: unticked_statement
   34          | "identifier (T_STRING)" ':'

   35 unticked_statement: '{' inner_statement_list '}'

   36 @5: /* empty */

   37 @6: /* empty */

   38 unticked_statement: "if (T_IF)" '(' expr ')' @5 statement @6 elseif_list else_single

   39 @7: /* empty */

   40 @8: /* empty */

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

   42 @9: /* empty */

   43 @10: /* empty */

   44 unticked_statement: "while (T_WHILE)" '(' @9 expr ')' @10 while_statement

   45 @11: /* empty */

   46 @12: /* empty */

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" '(' @12 expr ')' ';'

   48 @13: /* empty */

   49 @14: /* empty */

   50 @15: /* empty */

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' @14 for_expr ')' @15 for_statement

   52 @16: /* empty */

   53 unticked_statement: "switch (T_SWITCH)" '(' expr ')' @16 switch_case_list
   54                   | "break (T_BREAK)" ';'
   55                   | "break (T_BREAK)" expr ';'
   56                   | "continue (T_CONTINUE)" ';'
   57                   | "continue (T_CONTINUE)" expr ';'
   58                   | "return (T_RETURN)" ';'
   59                   | "return (T_RETURN)" expr_without_variable ';'
   60                   | "return (T_RETURN)" variable ';'
   61                   | "global (T_GLOBAL)" global_var_list ';'
   62                   | "static (T_STATIC)" static_var_list ';'
   63                   | "echo (T_ECHO)" echo_expr_list ';'
   64                   | T_INLINE_HTML
   65                   | expr ';'
   66                   | "unset (T_UNSET)" '(' unset_variables ')' ';'

   67 @17: /* empty */

   68 @18: /* empty */

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' @18 foreach_statement

   70 @19: /* empty */

   71 @20: /* empty */

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg ')' @20 foreach_statement

   73 @21: /* empty */

   74 unticked_statement: "declare (T_DECLARE)" @21 '(' declare_list ')' declare_statement
   75                   | ';'

   76 @22: /* empty */

   77 @23: /* empty */

   78 @24: /* empty */

   79 @25: /* empty */

   80 @26: /* empty */

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches
   82                   | "throw (T_THROW)" expr ';'
   83                   | "goto (T_GOTO)" "identifier (T_STRING)" ';'

   84 additional_catches: non_empty_additional_catches
   85                   | /* empty */

   86 non_empty_additional_catches: additional_catch
   87                             | non_empty_additional_catches additional_catch

   88 @27: /* empty */

   89 @28: /* empty */

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list '}'

   91 unset_variables: unset_variable
   92                | unset_variables ',' unset_variable

   93 unset_variable: variable

   94 function_declaration_statement: unticked_function_declaration_statement

   95 class_declaration_statement: unticked_class_declaration_statement

   96 is_reference: /* empty */
   97             | '&'

   98 @29: /* empty */

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' parameter_list ')' '{' inner_statement_list '}'

  100 @30: /* empty */

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from @30 implements_list '{' class_statement_list '}'

  102 @31: /* empty */

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" @31 interface_extends_list '{' class_statement_list '}'

  104 class_entry_type: "class (T_CLASS)"
  105                 | "abstract (T_ABSTRACT)" "class (T_CLASS)"
  106                 | "trait (T_TRAIT)"
  107                 | "final (T_FINAL)" "class (T_CLASS)"

  108 extends_from: /* empty */
  109             | "extends (T_EXTENDS)" fully_qualified_class_name

  110 interface_entry: "interface (T_INTERFACE)"

  111 interface_extends_list: /* empty */
  112                       | "extends (T_EXTENDS)" interface_list

  113 implements_list: /* empty */
  114                | "implements (T_IMPLEMENTS)" interface_list

  115 interface_list: fully_qualified_class_name
  116               | interface_list ',' fully_qualified_class_name

  117 foreach_optional_arg: /* empty */
  118                     | "=> (T_DOUBLE_ARROW)" foreach_variable

  119 foreach_variable: variable
  120                 | '&' variable

  121 for_statement: statement
  122              | ':' inner_statement_list "endfor (T_ENDFOR)" ';'

  123 foreach_statement: statement
  124                  | ':' inner_statement_list "endforeach (T_ENDFOREACH)" ';'

  125 declare_statement: statement
  126                  | ':' inner_statement_list "enddeclare (T_ENDDECLARE)" ';'

  127 declare_list: "identifier (T_STRING)" '=' static_scalar
  128             | declare_list ',' "identifier (T_STRING)" '=' static_scalar

  129 switch_case_list: '{' case_list '}'
  130                 | '{' ';' case_list '}'
  131                 | ':' case_list "endswitch (T_ENDSWITCH)" ';'
  132                 | ':' ';' case_list "endswitch (T_ENDSWITCH)" ';'

  133 case_list: /* empty */

  134 @32: /* empty */

  135 case_list: case_list "case (T_CASE)" expr case_separator @32 inner_statement_list

  136 @33: /* empty */

  137 case_list: case_list "default (T_DEFAULT)" case_separator @33 inner_statement_list

  138 case_separator: ':'
  139               | ';'

  140 while_statement: statement
  141                | ':' inner_statement_list "endwhile (T_ENDWHILE)" ';'

  142 elseif_list: /* empty */

  143 @34: /* empty */

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' expr ')' @34 statement

  145 new_elseif_list: /* empty */

  146 @35: /* empty */

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr ')' ':' @35 inner_statement_list

  148 else_single: /* empty */
  149            | "else (T_ELSE)" statement

  150 new_else_single: /* empty */
  151                | "else (T_ELSE)" ':' inner_statement_list

  152 parameter_list: non_empty_parameter_list
  153               | /* empty */

  154 non_empty_parameter_list: optional_class_type "variable (T_VARIABLE)"
  155                         | optional_class_type '&' "variable (T_VARIABLE)"
  156                         | optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar
  157                         | optional_class_type "variable (T_VARIABLE)" '=' static_scalar
  158                         | non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)"
  159                         | non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)"
  160                         | non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar
  161                         | non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)" '=' static_scalar

  162 optional_class_type: /* empty */
  163                    | "array (T_ARRAY)"
  164                    | "callable (T_CALLABLE)"
  165                    | fully_qualified_class_name

  166 function_call_parameter_list: non_empty_function_call_parameter_list
  167                             | /* empty */

  168 non_empty_function_call_parameter_list: expr_without_variable
  169                                       | variable
  170                                       | '&' w_variable
  171                                       | non_empty_function_call_parameter_list ',' expr_without_variable
  172                                       | non_empty_function_call_parameter_list ',' variable
  173                                       | non_empty_function_call_parameter_list ',' '&' w_variable

  174 global_var_list: global_var_list ',' global_var
  175                | global_var

  176 global_var: "variable (T_VARIABLE)"
  177           | '$' r_variable
  178           | '$' '{' expr '}'

  179 static_var_list: static_var_list ',' "variable (T_VARIABLE)"
  180                | static_var_list ',' "variable (T_VARIABLE)" '=' static_scalar
  181                | "variable (T_VARIABLE)"
  182                | "variable (T_VARIABLE)" '=' static_scalar

  183 class_statement_list: class_statement_list class_statement
  184                     | /* empty */

  185 @36: /* empty */

  186 class_statement: variable_modifiers @36 class_variable_declaration ';'
  187                | class_constant_declaration ';'
  188                | trait_use_statement

  189 @37: /* empty */

  190 class_statement: method_modifiers function is_reference "identifier (T_STRING)" @37 '(' parameter_list ')' method_body

  191 trait_use_statement: "use (T_USE)" trait_list trait_adaptations

  192 trait_list: fully_qualified_class_name
  193           | trait_list ',' fully_qualified_class_name

  194 trait_adaptations: ';'
  195                  | '{' trait_adaptation_list '}'

  196 trait_adaptation_list: /* empty */
  197                      | non_empty_trait_adaptation_list

  198 non_empty_trait_adaptation_list: trait_adaptation_statement
  199                                | non_empty_trait_adaptation_list trait_adaptation_statement

  200 trait_adaptation_statement: trait_precedence ';'
  201                           | trait_alias ';'

  202 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" trait_reference_list

  203 trait_reference_list: fully_qualified_class_name
  204                     | trait_reference_list ',' fully_qualified_class_name

  205 trait_method_reference: "identifier (T_STRING)"
  206                       | trait_method_reference_fully_qualified

  207 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

  208 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers "identifier (T_STRING)"
  209            | trait_method_reference "as (T_AS)" member_modifier

  210 trait_modifiers: /* empty */
  211                | member_modifier

  212 method_body: ';'
  213            | '{' inner_statement_list '}'

  214 variable_modifiers: non_empty_member_modifiers
  215                   | "var (T_VAR)"

  216 method_modifiers: /* empty */
  217                 | non_empty_member_modifiers

  218 non_empty_member_modifiers: member_modifier
  219                           | non_empty_member_modifiers member_modifier

  220 member_modifier: "public (T_PUBLIC)"
  221                | "protected (T_PROTECTED)"
  222                | "private (T_PRIVATE)"
  223                | "static (T_STATIC)"
  224                | "abstract (T_ABSTRACT)"
  225                | "final (T_FINAL)"

  226 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)"
  227                           | class_variable_declaration ',' "variable (T_VARIABLE)" '=' static_scalar
  228                           | "variable (T_VARIABLE)"
  229                           | "variable (T_VARIABLE)" '=' static_scalar

  230 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' static_scalar
  231                           | "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar

  232 echo_expr_list: echo_expr_list ',' expr
  233               | expr

  234 for_expr: /* empty */
  235         | non_empty_for_expr

  236 @38: /* empty */

  237 non_empty_for_expr: non_empty_for_expr ',' @38 expr
  238                   | expr

  239 chaining_method_or_property: chaining_method_or_property variable_property
  240                            | variable_property

  241 chaining_dereference: chaining_dereference '[' dim_offset ']'
  242                     | '[' dim_offset ']'

  243 @39: /* empty */

  244 chaining_instance_call: chaining_dereference @39 chaining_method_or_property
  245                       | chaining_dereference
  246                       | chaining_method_or_property

  247 instance_call: /* empty */

  248 @40: /* empty */

  249 instance_call: @40 chaining_instance_call

  250 @41: /* empty */

  251 new_expr: "new (T_NEW)" class_name_reference @41 ctor_arguments

  252 @42: /* empty */

  253 expr_without_variable: "list (T_LIST)" '(' @42 assignment_list ')' '=' expr
  254                      | variable '=' expr
  255                      | variable '=' '&' variable

  256 @43: /* empty */

  257 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference @43 ctor_arguments
  258                      | "clone (T_CLONE)" expr
  259                      | variable "+= (T_PLUS_EQUAL)" expr
  260                      | variable "-= (T_MINUS_EQUAL)" expr
  261                      | variable "*= (T_MUL_EQUAL)" expr
  262                      | variable "/= (T_DIV_EQUAL)" expr
  263                      | variable ".= (T_CONCAT_EQUAL)" expr
  264                      | variable "%= (T_MOD_EQUAL)" expr
  265                      | variable "&= (T_AND_EQUAL)" expr
  266                      | variable "|= (T_OR_EQUAL)" expr
  267                      | variable "^= (T_XOR_EQUAL)" expr
  268                      | variable "<<= (T_SL_EQUAL)" expr
  269                      | variable ">>= (T_SR_EQUAL)" expr
  270                      | rw_variable "++ (T_INC)"
  271                      | "++ (T_INC)" rw_variable
  272                      | rw_variable "-- (T_DEC)"
  273                      | "-- (T_DEC)" rw_variable

  274 @44: /* empty */

  275 expr_without_variable: expr "|| (T_BOOLEAN_OR)" @44 expr

  276 @45: /* empty */

  277 expr_without_variable: expr "&& (T_BOOLEAN_AND)" @45 expr

  278 @46: /* empty */

  279 expr_without_variable: expr "or (T_LOGICAL_OR)" @46 expr

  280 @47: /* empty */

  281 expr_without_variable: expr "and (T_LOGICAL_AND)" @47 expr
  282                      | expr "xor (T_LOGICAL_XOR)" expr
  283                      | expr '|' expr
  284                      | expr '&' expr
  285                      | expr '^' expr
  286                      | expr '.' expr
  287                      | expr '+' expr
  288                      | expr '-' expr
  289                      | expr '*' expr
  290                      | expr '/' expr
  291                      | expr '%' expr
  292                      | expr "<< (T_SL)" expr
  293                      | expr ">> (T_SR)" expr
  294                      | '+' expr
  295                      | '-' expr
  296                      | '!' expr
  297                      | '~' expr
  298                      | expr "=== (T_IS_IDENTICAL)" expr
  299                      | expr "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr "== (T_IS_EQUAL)" expr
  301                      | expr "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr '<' expr
  303                      | expr "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr '>' expr
  305                      | expr ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr "instanceof (T_INSTANCEOF)" class_name_reference
  307                      | '(' expr ')'
  308                      | new_expr

  309 @48: /* empty */

  310 expr_without_variable: '(' new_expr ')' @48 instance_call

  311 @49: /* empty */

  312 @50: /* empty */

  313 expr_without_variable: expr '?' @49 expr ':' @50 expr

  314 @51: /* empty */

  315 expr_without_variable: expr '?' ':' @51 expr
  316                      | internal_functions_in_yacc
  317                      | "(int) (T_INT_CAST)" expr
  318                      | "(double) (T_DOUBLE_CAST)" expr
  319                      | "(string) (T_STRING_CAST)" expr
  320                      | "(array) (T_ARRAY_CAST)" expr
  321                      | "(object) (T_OBJECT_CAST)" expr
  322                      | "(bool) (T_BOOL_CAST)" expr
  323                      | "(unset) (T_UNSET_CAST)" expr
  324                      | "exit (T_EXIT)" exit_expr

  325 @52: /* empty */

  326 expr_without_variable: '@' @52 expr
  327                      | scalar
  328                      | "array (T_ARRAY)" '(' array_pair_list ')'
  329                      | '[' array_pair_list ']'
  330                      | '`' backticks_expr '`'
  331                      | "print (T_PRINT)" expr

  332 @53: /* empty */

  333 expr_without_variable: function is_reference '(' @53 parameter_list ')' lexical_vars '{' inner_statement_list '}'

  334 @54: /* empty */

  335 expr_without_variable: "static (T_STATIC)" function is_reference '(' @54 parameter_list ')' lexical_vars '{' inner_statement_list '}'

  336 function: "function (T_FUNCTION)"

  337 lexical_vars: /* empty */
  338             | "use (T_USE)" '(' lexical_var_list ')'

  339 lexical_var_list: lexical_var_list ',' "variable (T_VARIABLE)"
  340                 | lexical_var_list ',' '&' "variable (T_VARIABLE)"
  341                 | "variable (T_VARIABLE)"
  342                 | '&' "variable (T_VARIABLE)"

  343 @55: /* empty */

  344 function_call: namespace_name '(' @55 function_call_parameter_list ')'

  345 @56: /* empty */

  346 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name '(' @56 function_call_parameter_list ')'

  347 @57: /* empty */

  348 function_call: "\\ (T_NS_SEPARATOR)" namespace_name '(' @57 function_call_parameter_list ')'

  349 @58: /* empty */

  350 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @58 function_call_parameter_list ')'

  351 @59: /* empty */

  352 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @59 function_call_parameter_list ')'

  353 @60: /* empty */

  354 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @60 function_call_parameter_list ')'

  355 @61: /* empty */

  356 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @61 function_call_parameter_list ')'

  357 @62: /* empty */

  358 function_call: variable_without_objects '(' @62 function_call_parameter_list ')'

  359 class_name: "static (T_STATIC)"
  360           | namespace_name
  361           | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  362           | "\\ (T_NS_SEPARATOR)" namespace_name

  363 fully_qualified_class_name: namespace_name
  364                           | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  365                           | "\\ (T_NS_SEPARATOR)" namespace_name

  366 class_name_reference: class_name
  367                     | dynamic_class_name_reference

  368 @63: /* empty */

  369 @64: /* empty */

  370 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" @63 object_property @64 dynamic_class_name_variable_properties
  371                             | base_variable

  372 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties dynamic_class_name_variable_property
  373                                       | /* empty */

  374 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" object_property

  375 exit_expr: /* empty */
  376          | '(' ')'
  377          | '(' expr ')'

  378 backticks_expr: /* empty */
  379               | "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
  380               | encaps_list

  381 ctor_arguments: /* empty */
  382               | '(' function_call_parameter_list ')'

  383 common_scalar: "integer number (T_LNUMBER)"
  384              | "floating-point number (T_DNUMBER)"
  385              | "quoted-string (T_CONSTANT_ENCAPSED_STRING)"
  386              | "__LINE__ (T_LINE)"
  387              | "__FILE__ (T_FILE)"
  388              | "__DIR__ (T_DIR)"
  389              | "__TRAIT__ (T_TRAIT_C)"
  390              | "__METHOD__ (T_METHOD_C)"
  391              | "__FUNCTION__ (T_FUNC_C)"
  392              | "__NAMESPACE__ (T_NS_C)"
  393              | "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  394              | "heredoc start (T_START_HEREDOC)" "heredoc end (T_END_HEREDOC)"

  395 static_scalar: common_scalar
  396              | namespace_name
  397              | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  398              | "\\ (T_NS_SEPARATOR)" namespace_name
  399              | '+' static_scalar
  400              | '-' static_scalar
  401              | "array (T_ARRAY)" '(' static_array_pair_list ')'
  402              | '[' static_array_pair_list ']'
  403              | static_class_constant
  404              | "__CLASS__ (T_CLASS_C)"

  405 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

  406 scalar: "variable name (T_STRING_VARNAME)"
  407       | class_constant
  408       | namespace_name
  409       | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  410       | "\\ (T_NS_SEPARATOR)" namespace_name
  411       | common_scalar
  412       | '"' encaps_list '"'
  413       | "heredoc start (T_START_HEREDOC)" encaps_list "heredoc end (T_END_HEREDOC)"
  414       | "__CLASS__ (T_CLASS_C)"

  415 static_array_pair_list: /* empty */
  416                       | non_empty_static_array_pair_list possible_comma

  417 possible_comma: /* empty */
  418               | ','

  419 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar "=> (T_DOUBLE_ARROW)" static_scalar
  420                                 | non_empty_static_array_pair_list ',' static_scalar
  421                                 | static_scalar "=> (T_DOUBLE_ARROW)" static_scalar
  422                                 | static_scalar

  423 expr: r_variable
  424     | expr_without_variable

  425 r_variable: variable

  426 w_variable: variable

  427 rw_variable: variable

  428 @65: /* empty */

  429 @66: /* empty */

  430 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" @65 object_property @66 method_or_not variable_properties
  431         | base_variable_with_function_calls

  432 variable_properties: variable_properties variable_property
  433                    | /* empty */

  434 @67: /* empty */

  435 variable_property: "-> (T_OBJECT_OPERATOR)" object_property @67 method_or_not

  436 array_method_dereference: array_method_dereference '[' dim_offset ']'
  437                         | method '[' dim_offset ']'

  438 @68: /* empty */

  439 method: '(' @68 function_call_parameter_list ')'

  440 method_or_not: method
  441              | array_method_dereference
  442              | /* empty */

  443 variable_without_objects: reference_variable
  444                         | simple_indirect_reference reference_variable

  445 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  446              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

  447 variable_class_name: reference_variable

  448 array_function_dereference: array_function_dereference '[' dim_offset ']'

  449 @69: /* empty */

  450 array_function_dereference: function_call @69 '[' dim_offset ']'

  451 base_variable_with_function_calls: base_variable
  452                                  | array_function_dereference
  453                                  | function_call

  454 base_variable: reference_variable
  455              | simple_indirect_reference reference_variable
  456              | static_member

  457 reference_variable: reference_variable '[' dim_offset ']'
  458                   | reference_variable '{' expr '}'
  459                   | compound_variable

  460 compound_variable: "variable (T_VARIABLE)"
  461                  | '$' '{' expr '}'

  462 dim_offset: /* empty */
  463           | expr

  464 object_property: object_dim_list

  465 @70: /* empty */

  466 object_property: variable_without_objects @70

  467 object_dim_list: object_dim_list '[' dim_offset ']'
  468                | object_dim_list '{' expr '}'
  469                | variable_name

  470 variable_name: "identifier (T_STRING)"
  471              | '{' expr '}'

  472 simple_indirect_reference: '$'
  473                          | simple_indirect_reference '$'

  474 assignment_list: assignment_list ',' assignment_list_element
  475                | assignment_list_element

  476 assignment_list_element: variable

  477 @71: /* empty */

  478 assignment_list_element: "list (T_LIST)" '(' @71 assignment_list ')'
  479                        | /* empty */

  480 array_pair_list: /* empty */
  481                | non_empty_array_pair_list possible_comma

  482 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" expr
  483                          | non_empty_array_pair_list ',' expr
  484                          | expr "=> (T_DOUBLE_ARROW)" expr
  485                          | expr
  486                          | non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  487                          | non_empty_array_pair_list ',' '&' w_variable
  488                          | expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  489                          | '&' w_variable

  490 encaps_list: encaps_list encaps_var
  491            | encaps_list "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
  492            | encaps_var
  493            | "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" encaps_var

  494 encaps_var: "variable (T_VARIABLE)"

  495 @72: /* empty */

  496 encaps_var: "variable (T_VARIABLE)" '[' @72 encaps_var_offset ']'
  497           | "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)"
  498           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr '}'
  499           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' '}'
  500           | "{$ (T_CURLY_OPEN)" variable '}'

  501 encaps_var_offset: "identifier (T_STRING)"
  502                  | "number (T_NUM_STRING)"
  503                  | "variable (T_VARIABLE)"

  504 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables ')'
  505                           | "empty (T_EMPTY)" '(' variable ')'
  506                           | "include (T_INCLUDE)" expr
  507                           | "include_once (T_INCLUDE_ONCE)" expr
  508                           | "eval (T_EVAL)" '(' expr ')'
  509                           | "require (T_REQUIRE)" expr
  510                           | "require_once (T_REQUIRE_ONCE)" expr

  511 isset_variables: variable

  512 @73: /* empty */

  513 isset_variables: isset_variables ',' @73 variable

  514 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"
  515               | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"


Terminals, with rules where they appear

"end of file" (0) 0
'!' (33) 296
'"' (34) 412
'$' (36) 177 178 461 472 473
'%' (37) 291
'&' (38) 97 120 155 156 159 160 170 173 255 257 284 340 342 486 487
    488 489
'(' (40) 10 32 38 41 44 47 51 53 66 69 72 74 81 90 99 144 147 190 253
    307 310 328 333 335 338 344 346 348 350 352 354 356 358 376 377
    382 401 439 478 504 505 508
')' (41) 10 32 38 41 44 47 51 53 66 69 72 74 81 90 99 144 147 190 253
    307 310 328 333 335 338 344 346 348 350 352 354 356 358 376 377
    382 401 439 478 504 505 508
'*' (42) 289
'+' (43) 287 294 399
',' (44) 18 24 92 116 128 158 159 160 161 171 172 173 174 179 180 193
    204 226 227 230 232 237 339 340 418 419 420 474 482 483 486 487
    513
'-' (45) 288 295 400
'.' (46) 286
'/' (47) 290
':' (58) 34 41 122 124 126 131 132 138 141 147 151 313 315
';' (59) 10 11 16 17 32 41 47 51 54 55 56 57 58 59 60 61 62 63 65 66
    75 82 83 122 124 126 130 131 132 139 141 186 187 194 200 201 212
'<' (60) 302
'=' (61) 24 25 127 128 156 157 160 161 180 182 227 229 230 231 253
    254 255 257
'>' (62) 304
'?' (63) 313 315
'@' (64) 326
'[' (91) 241 242 329 402 436 437 448 450 457 467 496 499
']' (93) 241 242 329 402 436 437 448 450 457 467 496 499
'^' (94) 285
'`' (96) 330
'{' (123) 13 15 35 81 90 99 101 103 129 130 178 195 213 333 335 458
    461 468 471
'|' (124) 283
'}' (125) 13 15 35 81 90 99 101 103 129 130 178 195 213 333 335 458
    461 468 471 498 499 500
'~' (126) 297
error (256)
"require_once (T_REQUIRE_ONCE)" (258) 510
"require (T_REQUIRE)" (259) 509
"eval (T_EVAL)" (260) 508
"include_once (T_INCLUDE_ONCE)" (261) 507
"include (T_INCLUDE)" (262) 506
"or (T_LOGICAL_OR)" (263) 279
"xor (T_LOGICAL_XOR)" (264) 282
"and (T_LOGICAL_AND)" (265) 281
"print (T_PRINT)" (266) 331
">>= (T_SR_EQUAL)" (267) 269
"<<= (T_SL_EQUAL)" (268) 268
"^= (T_XOR_EQUAL)" (269) 267
"|= (T_OR_EQUAL)" (270) 266
"&= (T_AND_EQUAL)" (271) 265
"%= (T_MOD_EQUAL)" (272) 264
".= (T_CONCAT_EQUAL)" (273) 263
"/= (T_DIV_EQUAL)" (274) 262
"*= (T_MUL_EQUAL)" (275) 261
"-= (T_MINUS_EQUAL)" (276) 260
"+= (T_PLUS_EQUAL)" (277) 259
"|| (T_BOOLEAN_OR)" (278) 275
"&& (T_BOOLEAN_AND)" (279) 277
"!== (T_IS_NOT_IDENTICAL)" (280) 299
"=== (T_IS_IDENTICAL)" (281) 298
"!= (T_IS_NOT_EQUAL)" (282) 301
"== (T_IS_EQUAL)" (283) 300
">= (T_IS_GREATER_OR_EQUAL)" (284) 305
"<= (T_IS_SMALLER_OR_EQUAL)" (285) 303
">> (T_SR)" (286) 293
"<< (T_SL)" (287) 292
"instanceof (T_INSTANCEOF)" (288) 306
"(unset) (T_UNSET_CAST)" (289) 323
"(bool) (T_BOOL_CAST)" (290) 322
"(object) (T_OBJECT_CAST)" (291) 321
"(array) (T_ARRAY_CAST)" (292) 320
"(string) (T_STRING_CAST)" (293) 319
"(double) (T_DOUBLE_CAST)" (294) 318
"(int) (T_INT_CAST)" (295) 317
"-- (T_DEC)" (296) 272 273
"++ (T_INC)" (297) 270 271
"clone (T_CLONE)" (298) 258
"new (T_NEW)" (299) 251 257
"exit (T_EXIT)" (300) 324
"if (T_IF)" (301) 38 41
"elseif (T_ELSEIF)" (302) 144 147
"else (T_ELSE)" (303) 149 151
"endif (T_ENDIF)" (304) 41
"integer number (T_LNUMBER)" (305) 383
"floating-point number (T_DNUMBER)" (306) 384
"identifier (T_STRING)" (307) 5 6 21 23 24 25 34 83 99 101 103 127
    128 190 205 207 208 230 231 405 470 497 501 514 515
"variable name (T_STRING_VARNAME)" (308) 406 499
"variable (T_VARIABLE)" (309) 81 90 154 155 156 157 158 159 160 161
    176 179 180 181 182 226 227 228 229 339 340 341 342 460 494 496
    497 503
"number (T_NUM_STRING)" (310) 502
T_INLINE_HTML (311) 64
T_CHARACTER (312)
T_BAD_CHARACTER (313)
"quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
    (314) 379 393 491 493
"quoted-string (T_CONSTANT_ENCAPSED_STRING)" (315) 385
"echo (T_ECHO)" (316) 63
"do (T_DO)" (317) 47
"while (T_WHILE)" (318) 44 47
"endwhile (T_ENDWHILE)" (319) 141
"for (T_FOR)" (320) 51
"endfor (T_ENDFOR)" (321) 122
"foreach (T_FOREACH)" (322) 69 72
"endforeach (T_ENDFOREACH)" (323) 124
"declare (T_DECLARE)" (324) 74
"enddeclare (T_ENDDECLARE)" (325) 126
"as (T_AS)" (326) 21 23 69 72 208 209
"switch (T_SWITCH)" (327) 53
"endswitch (T_ENDSWITCH)" (328) 131 132
"case (T_CASE)" (329) 135
"default (T_DEFAULT)" (330) 137
"break (T_BREAK)" (331) 54 55
"continue (T_CONTINUE)" (332) 56 57
"goto (T_GOTO)" (333) 83
"function (T_FUNCTION)" (334) 336
"const (T_CONST)" (335) 25 231
"return (T_RETURN)" (336) 58 59 60
"try (T_TRY)" (337) 81
"catch (T_CATCH)" (338) 81 90
"throw (T_THROW)" (339) 82
"use (T_USE)" (340) 16 191 338
"insteadof (T_INSTEADOF)" (341) 202
"global (T_GLOBAL)" (342) 61
"public (T_PUBLIC)" (343) 220
"protected (T_PROTECTED)" (344) 221
"private (T_PRIVATE)" (345) 222
"final (T_FINAL)" (346) 107 225
"abstract (T_ABSTRACT)" (347) 105 224
"static (T_STATIC)" (348) 62 223 335 359
"var (T_VAR)" (349) 215
"unset (T_UNSET)" (350) 66
"isset (T_ISSET)" (351) 504
"empty (T_EMPTY)" (352) 505
"__halt_compiler (T_HALT_COMPILER)" (353) 10 32
"class (T_CLASS)" (354) 104 105 107
"trait (T_TRAIT)" (355) 106
"interface (T_INTERFACE)" (356) 110
"extends (T_EXTENDS)" (357) 109 112
"implements (T_IMPLEMENTS)" (358) 114
"-> (T_OBJECT_OPERATOR)" (359) 370 374 430 435 497
"=> (T_DOUBLE_ARROW)" (360) 118 419 421 482 484 486 488
"list (T_LIST)" (361) 253 478
"array (T_ARRAY)" (362) 163 328 401
"callable (T_CALLABLE)" (363) 164
"__CLASS__ (T_CLASS_C)" (364) 404 414
"__TRAIT__ (T_TRAIT_C)" (365) 389
"__METHOD__ (T_METHOD_C)" (366) 390
"__FUNCTION__ (T_FUNC_C)" (367) 391
"__LINE__ (T_LINE)" (368) 386
"__FILE__ (T_FILE)" (369) 387
"comment (T_COMMENT)" (370)
"doc comment (T_DOC_COMMENT)" (371)
"open tag (T_OPEN_TAG)" (372)
"open tag with echo (T_OPEN_TAG_WITH_ECHO)" (373)
"close tag (T_CLOSE_TAG)" (374)
"whitespace (T_WHITESPACE)" (375)
"heredoc start (T_START_HEREDOC)" (376) 393 394 413
"heredoc end (T_END_HEREDOC)" (377) 393 394 413
"${ (T_DOLLAR_OPEN_CURLY_BRACES)" (378) 498 499
"{$ (T_CURLY_OPEN)" (379) 500
":: (T_PAAMAYIM_NEKUDOTAYIM)" (380) 207 350 352 354 356 405 445 446
    514 515
"namespace (T_NAMESPACE)" (381) 11 13 15 346 361 364 397 409
"__NAMESPACE__ (T_NS_C)" (382) 392
"__DIR__ (T_DIR)" (383) 388
"\\ (T_NS_SEPARATOR)" (384) 6 22 23 346 348 361 362 364 365 397 398
    409 410


Nonterminals, with rules where they appear

$accept (158)
    on left: 0
start (159)
    on left: 1, on right: 0
top_statement_list (160)
    on left: 3 4, on right: 1 3 13 15
@1 (161)
    on left: 2, on right: 3
namespace_name (162)
    on left: 5 6, on right: 6 11 13 20 21 22 23 344 346 348 360 361
    362 363 364 365 396 397 398 408 409 410
top_statement (163)
    on left: 7 8 9 10 11 13 15 16 17, on right: 3
@2 (164)
    on left: 12, on right: 13
@3 (165)
    on left: 14, on right: 15
use_declarations (166)
    on left: 18 19, on right: 16 18
use_declaration (167)
    on left: 20 21 22 23, on right: 18 19
constant_declaration (168)
    on left: 24 25, on right: 17 24
inner_statement_list (169)
    on left: 27 28, on right: 27 35 41 81 90 99 122 124 126 135 137
    141 147 151 213 333 335
@4 (170)
    on left: 26, on right: 27
inner_statement (171)
    on left: 29 30 31 32, on right: 27
statement (172)
    on left: 33 34, on right: 7 29 38 47 121 123 125 140 144 149
unticked_statement (173)
    on left: 35 38 41 44 47 51 53 54 55 56 57 58 59 60 61 62 63 64
    65 66 69 72 74 75 81 82 83, on right: 33
@5 (174)
    on left: 36, on right: 38
@6 (175)
    on left: 37, on right: 38
@7 (176)
    on left: 39, on right: 41
@8 (177)
    on left: 40, on right: 41
@9 (178)
    on left: 42, on right: 44
@10 (179)
    on left: 43, on right: 44
@11 (180)
    on left: 45, on right: 47
@12 (181)
    on left: 46, on right: 47
@13 (182)
    on left: 48, on right: 51
@14 (183)
    on left: 49, on right: 51
@15 (184)
    on left: 50, on right: 51
@16 (185)
    on left: 52, on right: 53
@17 (186)
    on left: 67, on right: 69
@18 (187)
    on left: 68, on right: 69
@19 (188)
    on left: 70, on right: 72
@20 (189)
    on left: 71, on right: 72
@21 (190)
    on left: 73, on right: 74
@22 (191)
    on left: 76, on right: 81
@23 (192)
    on left: 77, on right: 81
@24 (193)
    on left: 78, on right: 81
@25 (194)
    on left: 79, on right: 81
@26 (195)
    on left: 80, on right: 81
additional_catches (196)
    on left: 84 85, on right: 81
non_empty_additional_catches (197)
    on left: 86 87, on right: 84 87
additional_catch (198)
    on left: 90, on right: 86 87
@27 (199)
    on left: 88, on right: 90
@28 (200)
    on left: 89, on right: 90
unset_variables (201)
    on left: 91 92, on right: 66 92
unset_variable (202)
    on left: 93, on right: 91 92
function_declaration_statement (203)
    on left: 94, on right: 8 30
class_declaration_statement (204)
    on left: 95, on right: 9 31
is_reference (205)
    on left: 96 97, on right: 99 190 333 335
unticked_function_declaration_statement (206)
    on left: 99, on right: 94
@29 (207)
    on left: 98, on right: 99
unticked_class_declaration_statement (208)
    on left: 101 103, on right: 95
@30 (209)
    on left: 100, on right: 101
@31 (210)
    on left: 102, on right: 103
class_entry_type (211)
    on left: 104 105 106 107, on right: 101
extends_from (212)
    on left: 108 109, on right: 101
interface_entry (213)
    on left: 110, on right: 103
interface_extends_list (214)
    on left: 111 112, on right: 103
implements_list (215)
    on left: 113 114, on right: 101
interface_list (216)
    on left: 115 116, on right: 112 114 116
foreach_optional_arg (217)
    on left: 117 118, on right: 69 72
foreach_variable (218)
    on left: 119 120, on right: 69 118
for_statement (219)
    on left: 121 122, on right: 51
foreach_statement (220)
    on left: 123 124, on right: 69 72
declare_statement (221)
    on left: 125 126, on right: 74
declare_list (222)
    on left: 127 128, on right: 74 128
switch_case_list (223)
    on left: 129 130 131 132, on right: 53
case_list (224)
    on left: 133 135 137, on right: 129 130 131 132 135 137
@32 (225)
    on left: 134, on right: 135
@33 (226)
    on left: 136, on right: 137
case_separator (227)
    on left: 138 139, on right: 135 137
while_statement (228)
    on left: 140 141, on right: 44
elseif_list (229)
    on left: 142 144, on right: 38 144
@34 (230)
    on left: 143, on right: 144
new_elseif_list (231)
    on left: 145 147, on right: 41 147
@35 (232)
    on left: 146, on right: 147
else_single (233)
    on left: 148 149, on right: 38
new_else_single (234)
    on left: 150 151, on right: 41
parameter_list (235)
    on left: 152 153, on right: 99 190 333 335
non_empty_parameter_list (236)
    on left: 154 155 156 157 158 159 160 161, on right: 152 158 159
    160 161
optional_class_type (237)
    on left: 162 163 164 165, on right: 154 155 156 157 158 159 160
    161
function_call_parameter_list (238)
    on left: 166 167, on right: 344 346 348 350 352 354 356 358 382
    439
non_empty_function_call_parameter_list (239)
    on left: 168 169 170 171 172 173, on right: 166 171 172 173
global_var_list (240)
    on left: 174 175, on right: 61 174
global_var (241)
    on left: 176 177 178, on right: 174 175
static_var_list (242)
    on left: 179 180 181 182, on right: 62 179 180
class_statement_list (243)
    on left: 183 184, on right: 101 103 183
class_statement (244)
    on left: 186 187 188 190, on right: 183
@36 (245)
    on left: 185, on right: 186
@37 (246)
    on left: 189, on right: 190
trait_use_statement (247)
    on left: 191, on right: 188
trait_list (248)
    on left: 192 193, on right: 191 193
trait_adaptations (249)
    on left: 194 195, on right: 191
trait_adaptation_list (250)
    on left: 196 197, on right: 195
non_empty_trait_adaptation_list (251)
    on left: 198 199, on right: 197 199
trait_adaptation_statement (252)
    on left: 200 201, on right: 198 199
trait_precedence (253)
    on left: 202, on right: 200
trait_reference_list (254)
    on left: 203 204, on right: 202 204
trait_method_reference (255)
    on left: 205 206, on right: 208 209
trait_method_reference_fully_qualified (256)
    on left: 207, on right: 202 206
trait_alias (257)
    on left: 208 209, on right: 201
trait_modifiers (258)
    on left: 210 211, on right: 208
method_body (259)
    on left: 212 213, on right: 190
variable_modifiers (260)
    on left: 214 215, on right: 186
method_modifiers (261)
    on left: 216 217, on right: 190
non_empty_member_modifiers (262)
    on left: 218 219, on right: 214 217 219
member_modifier (263)
    on left: 220 221 222 223 224 225, on right: 209 211 218 219
class_variable_declaration (264)
    on left: 226 227 228 229, on right: 186 226 227
class_constant_declaration (265)
    on left: 230 231, on right: 187 230
echo_expr_list (266)
    on left: 232 233, on right: 63 232
for_expr (267)
    on left: 234 235, on right: 51
non_empty_for_expr (268)
    on left: 237 238, on right: 235 237
@38 (269)
    on left: 236, on right: 237
chaining_method_or_property (270)
    on left: 239 240, on right: 239 244 246
chaining_dereference (271)
    on left: 241 242, on right: 241 244 245
chaining_instance_call (272)
    on left: 244 245 246, on right: 249
@39 (273)
    on left: 243, on right: 244
instance_call (274)
    on left: 247 249, on right: 310
@40 (275)
    on left: 248, on right: 249
new_expr (276)
    on left: 251, on right: 308 310
@41 (277)
    on left: 250, on right: 251
expr_without_variable (278)
    on left: 253 254 255 257 258 259 260 261 262 263 264 265 266 267
    268 269 270 271 272 273 275 277 279 281 282 283 284 285 286 287
    288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303
    304 305 306 307 308 310 313 315 316 317 318 319 320 321 322 323
    324 326 327 328 329 330 331 333 335, on right: 59 72 168 171 424
@42 (279)
    on left: 252, on right: 253
@43 (280)
    on left: 256, on right: 257
@44 (281)
    on left: 274, on right: 275
@45 (282)
    on left: 276, on right: 277
@46 (283)
    on left: 278, on right: 279
@47 (284)
    on left: 280, on right: 281
@48 (285)
    on left: 309, on right: 310
@49 (286)
    on left: 311, on right: 313
@50 (287)
    on left: 312, on right: 313
@51 (288)
    on left: 314, on right: 315
@52 (289)
    on left: 325, on right: 326
@53 (290)
    on left: 332, on right: 333
@54 (291)
    on left: 334, on right: 335
function (292)
    on left: 336, on right: 99 190 333 335
lexical_vars (293)
    on left: 337 338, on right: 333 335
lexical_var_list (294)
    on left: 339 340 341 342, on right: 338 339 340
function_call (295)
    on left: 344 346 348 350 352 354 356 358, on right: 450 453
@55 (296)
    on left: 343, on right: 344
@56 (297)
    on left: 345, on right: 346
@57 (298)
    on left: 347, on right: 348
@58 (299)
    on left: 349, on right: 350
@59 (300)
    on left: 351, on right: 352
@60 (301)
    on left: 353, on right: 354
@61 (302)
    on left: 355, on right: 356
@62 (303)
    on left: 357, on right: 358
class_name (304)
    on left: 359 360 361 362, on right: 350 352 366 405 445 514
fully_qualified_class_name (305)
    on left: 363 364 365, on right: 81 90 109 115 116 165 192 193 203
    204 207
class_name_reference (306)
    on left: 366 367, on right: 251 257 306
dynamic_class_name_reference (307)
    on left: 370 371, on right: 367
@63 (308)
    on left: 368, on right: 370
@64 (309)
    on left: 369, on right: 370
dynamic_class_name_variable_properties (310)
    on left: 372 373, on right: 370 372
dynamic_class_name_variable_property (311)
    on left: 374, on right: 372
exit_expr (312)
    on left: 375 376 377, on right: 324
backticks_expr (313)
    on left: 378 379 380, on right: 330
ctor_arguments (314)
    on left: 381 382, on right: 251 257
common_scalar (315)
    on left: 383 384 385 386 387 388 389 390 391 392 393 394,
    on right: 395 411
static_scalar (316)
    on left: 395 396 397 398 399 400 401 402 403 404,
    on right: 24 25 127 128 156 157 160 161 180 182 227 229 230 231
    399 400 419 420 421 422
static_class_constant (317)
    on left: 405, on right: 403
scalar (318)
    on left: 406 407 408 409 410 411 412 413 414, on right: 327
static_array_pair_list (319)
    on left: 415 416, on right: 401 402
possible_comma (320)
    on left: 417 418, on right: 416 481
non_empty_static_array_pair_list (321)
    on left: 419 420 421 422, on right: 416 419 420
expr (322)
    on left: 423 424, on right: 38 41 44 47 53 55 57 65 82 135 144
    147 178 232 233 237 238 253 254 258 259 260 261 262 263 264 265
    266 267 268 269 275 277 279 281 282 283 284 285 286 287 288 289
    290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305
    306 307 313 315 317 318 319 320 321 322 323 326 331 377 458 461
    463 468 471 482 483 484 485 486 488 498 499 506 507 508 509 510
r_variable (323)
    on left: 425, on right: 177 423
w_variable (324)
    on left: 426, on right: 170 173 486 487 488 489
rw_variable (325)
    on left: 427, on right: 270 271 272 273
variable (326)
    on left: 430 431, on right: 60 69 72 93 119 120 169 172 254 255
    257 259 260 261 262 263 264 265 266 267 268 269 425 426 427 476
    500 505 511 513
@65 (327)
    on left: 428, on right: 430
@66 (328)
    on left: 429, on right: 430
variable_properties (329)
    on left: 432 433, on right: 430 432
variable_property (330)
    on left: 435, on right: 239 240 432
@67 (331)
    on left: 434, on right: 435
array_method_dereference (332)
    on left: 436 437, on right: 436 441
method (333)
    on left: 439, on right: 437 440
@68 (334)
    on left: 438, on right: 439
method_or_not (335)
    on left: 440 441 442, on right: 430 435
variable_without_objects (336)
    on left: 443 444, on right: 352 356 358 445 446 466
static_member (337)
    on left: 445 446, on right: 456
variable_class_name (338)
    on left: 447, on right: 354 356 446 515
array_function_dereference (339)
    on left: 448 450, on right: 448 452
@69 (340)
    on left: 449, on right: 450
base_variable_with_function_calls (341)
    on left: 451 452 453, on right: 430 431
base_variable (342)
    on left: 454 455 456, on right: 370 371 451
reference_variable (343)
    on left: 457 458 459, on right: 443 444 447 454 455 457 458
compound_variable (344)
    on left: 460 461, on right: 459
dim_offset (345)
    on left: 462 463, on right: 241 242 436 437 448 450 457 467
object_property (346)
    on left: 464 466, on right: 370 374 430 435
@70 (347)
    on left: 465, on right: 466
object_dim_list (348)
    on left: 467 468 469, on right: 464 467 468
variable_name (349)
    on left: 470 471, on right: 350 354 469
simple_indirect_reference (350)
    on left: 472 473, on right: 444 455 473
assignment_list (351)
    on left: 474 475, on right: 253 474 478
assignment_list_element (352)
    on left: 476 478 479, on right: 474 475
@71 (353)
    on left: 477, on right: 478
array_pair_list (354)
    on left: 480 481, on right: 328 329
non_empty_array_pair_list (355)
    on left: 482 483 484 485 486 487 488 489, on right: 481 482 483
    486 487
encaps_list (356)
    on left: 490 491 492 493, on right: 380 412 413 490 491
encaps_var (357)
    on left: 494 496 497 498 499 500, on right: 490 492 493
@72 (358)
    on left: 495, on right: 496
encaps_var_offset (359)
    on left: 501 502 503, on right: 496
internal_functions_in_yacc (360)
    on left: 504 505 506 507 508 509 510, on right: 316
isset_variables (361)
    on left: 511 513, on right: 504 513
@73 (362)
    on left: 512, on right: 513
class_constant (363)
    on left: 514 515, on right: 407


state 0

    0 $accept: . start "end of file"

    $default  reduce using rule 4 (top_statement_list)

    start               go to state 1
    top_statement_list  go to state 2


state 1

    0 $accept: start . "end of file"

    "end of file"  shift, and go to state 3


state 2

    1 start: top_statement_list .
    3 top_statement_list: top_statement_list . @1 top_statement

    "end of file"  reduce using rule 1 (start)
    $default       reduce using rule 2 (@1)

    @1  go to state 4


state 3

    0 $accept: start "end of file" .

    $default  accept


state 4

    3 top_statement_list: top_statement_list @1 . top_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "const (T_CONST)"                             shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "use (T_USE)"                                 shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 53
    "final (T_FINAL)"                             shift, and go to state 54
    "abstract (T_ABSTRACT)"                       shift, and go to state 55
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 60
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 73
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                           go to state 83
    top_statement                            go to state 84
    constant_declaration                     go to state 85
    statement                                go to state 86
    unticked_statement                       go to state 87
    function_declaration_statement           go to state 88
    class_declaration_statement              go to state 89
    unticked_function_declaration_statement  go to state 90
    unticked_class_declaration_statement     go to state 91
    class_entry_type                         go to state 92
    interface_entry                          go to state 93
    new_expr                                 go to state 94
    expr_without_variable                    go to state 95
    function                                 go to state 96
    function_call                            go to state 97
    class_name                               go to state 98
    common_scalar                            go to state 99
    scalar                                   go to state 100
    expr                                     go to state 101
    r_variable                               go to state 102
    rw_variable                              go to state 103
    variable                                 go to state 104
    variable_without_objects                 go to state 105
    static_member                            go to state 106
    variable_class_name                      go to state 107
    array_function_dereference               go to state 108
    base_variable_with_function_calls        go to state 109
    base_variable                            go to state 110
    reference_variable                       go to state 111
    compound_variable                        go to state 112
    simple_indirect_reference                go to state 113
    internal_functions_in_yacc               go to state 114
    class_constant                           go to state 115


state 5

  510 internal_functions_in_yacc: "require_once (T_REQUIRE_ONCE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 120
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 6

  509 internal_functions_in_yacc: "require (T_REQUIRE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 121
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 7

  508 internal_functions_in_yacc: "eval (T_EVAL)" . '(' expr ')'

    '('  shift, and go to state 122


state 8

  507 internal_functions_in_yacc: "include_once (T_INCLUDE_ONCE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 123
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 9

  506 internal_functions_in_yacc: "include (T_INCLUDE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 124
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 10

  331 expr_without_variable: "print (T_PRINT)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 125
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 11

  294 expr_without_variable: '+' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 126
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 12

  295 expr_without_variable: '-' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 127
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 13

  296 expr_without_variable: '!' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 128
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 14

  297 expr_without_variable: '~' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 129
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 15

  326 expr_without_variable: '@' . @52 expr

    $default  reduce using rule 325 (@52)

    @52  go to state 130


state 16

  323 expr_without_variable: "(unset) (T_UNSET_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 131
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 17

  322 expr_without_variable: "(bool) (T_BOOL_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 132
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 18

  321 expr_without_variable: "(object) (T_OBJECT_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 133
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 19

  320 expr_without_variable: "(array) (T_ARRAY_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 134
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 20

  319 expr_without_variable: "(string) (T_STRING_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 135
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 21

  318 expr_without_variable: "(double) (T_DOUBLE_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 136
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 22

  317 expr_without_variable: "(int) (T_INT_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 137
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 23

  273 expr_without_variable: "-- (T_DEC)" . rw_variable

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    namespace_name                     go to state 141
    function_call                      go to state 97
    class_name                         go to state 142
    rw_variable                        go to state 143
    variable                           go to state 144
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113


state 24

  271 expr_without_variable: "++ (T_INC)" . rw_variable

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    namespace_name                     go to state 141
    function_call                      go to state 97
    class_name                         go to state 142
    rw_variable                        go to state 146
    variable                           go to state 144
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113


state 25

  329 expr_without_variable: '[' . array_pair_list ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 147
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 480 (array_pair_list)

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 148
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    array_pair_list                    go to state 149
    non_empty_array_pair_list          go to state 150
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 26

  258 expr_without_variable: "clone (T_CLONE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 151
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 27

  251 new_expr: "new (T_NEW)" . class_name_reference @41 ctor_arguments

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 152
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 153
    '$'                        shift, and go to state 80

    namespace_name                go to state 154
    class_name                    go to state 155
    class_name_reference          go to state 156
    dynamic_class_name_reference  go to state 157
    static_member                 go to state 106
    variable_class_name           go to state 158
    base_variable                 go to state 159
    reference_variable            go to state 160
    compound_variable             go to state 112
    simple_indirect_reference     go to state 161


state 28

  324 expr_without_variable: "exit (T_EXIT)" . exit_expr

    '('  shift, and go to state 162

    $default  reduce using rule 375 (exit_expr)

    exit_expr  go to state 163


state 29

   38 unticked_statement: "if (T_IF)" . '(' expr ')' @5 statement @6 elseif_list else_single
   41                   | "if (T_IF)" . '(' expr ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    '('  shift, and go to state 164


state 30

  383 common_scalar: "integer number (T_LNUMBER)" .

    $default  reduce using rule 383 (common_scalar)


state 31

  384 common_scalar: "floating-point number (T_DNUMBER)" .

    $default  reduce using rule 384 (common_scalar)


state 32

    5 namespace_name: "identifier (T_STRING)" .
   34 statement: "identifier (T_STRING)" . ':'

    ':'  shift, and go to state 165

    $default  reduce using rule 5 (namespace_name)


state 33

  406 scalar: "variable name (T_STRING_VARNAME)" .

    $default  reduce using rule 406 (scalar)


state 34

  460 compound_variable: "variable (T_VARIABLE)" .

    $default  reduce using rule 460 (compound_variable)


state 35

   64 unticked_statement: T_INLINE_HTML .

    $default  reduce using rule 64 (unticked_statement)


state 36

  385 common_scalar: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" .

    $default  reduce using rule 385 (common_scalar)


state 37

   63 unticked_statement: "echo (T_ECHO)" . echo_expr_list ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    echo_expr_list                     go to state 166
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 167
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 38

   47 unticked_statement: "do (T_DO)" . @11 statement "while (T_WHILE)" '(' @12 expr ')' ';'

    $default  reduce using rule 45 (@11)

    @11  go to state 168


state 39

   44 unticked_statement: "while (T_WHILE)" . '(' @9 expr ')' @10 while_statement

    '('  shift, and go to state 169


state 40

   51 unticked_statement: "for (T_FOR)" . '(' for_expr ';' @13 for_expr ';' @14 for_expr ')' @15 for_statement

    '('  shift, and go to state 170


state 41

   69 unticked_statement: "foreach (T_FOREACH)" . '(' variable "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' @18 foreach_statement
   72                   | "foreach (T_FOREACH)" . '(' expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg ')' @20 foreach_statement

    '('  shift, and go to state 171


state 42

   74 unticked_statement: "declare (T_DECLARE)" . @21 '(' declare_list ')' declare_statement

    $default  reduce using rule 73 (@21)

    @21  go to state 172


state 43

   53 unticked_statement: "switch (T_SWITCH)" . '(' expr ')' @16 switch_case_list

    '('  shift, and go to state 173


state 44

   54 unticked_statement: "break (T_BREAK)" . ';'
   55                   | "break (T_BREAK)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 174
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 175
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 45

   56 unticked_statement: "continue (T_CONTINUE)" . ';'
   57                   | "continue (T_CONTINUE)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 176
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 177
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 46

   83 unticked_statement: "goto (T_GOTO)" . "identifier (T_STRING)" ';'

    "identifier (T_STRING)"  shift, and go to state 178


state 47

  336 function: "function (T_FUNCTION)" .

    $default  reduce using rule 336 (function)


state 48

   25 constant_declaration: "const (T_CONST)" . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 179


state 49

   58 unticked_statement: "return (T_RETURN)" . ';'
   59                   | "return (T_RETURN)" . expr_without_variable ';'
   60                   | "return (T_RETURN)" . variable ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 180
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 181
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 182
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 183
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 50

   81 unticked_statement: "try (T_TRY)" . @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    $default  reduce using rule 76 (@22)

    @22  go to state 184


state 51

   82 unticked_statement: "throw (T_THROW)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 185
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 52

   16 top_statement: "use (T_USE)" . use_declarations ';'

    "identifier (T_STRING)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 186

    namespace_name    go to state 187
    use_declarations  go to state 188
    use_declaration   go to state 189


state 53

   61 unticked_statement: "global (T_GLOBAL)" . global_var_list ';'

    "variable (T_VARIABLE)"  shift, and go to state 190
    '$'                      shift, and go to state 191

    global_var_list  go to state 192
    global_var       go to state 193


state 54

  107 class_entry_type: "final (T_FINAL)" . "class (T_CLASS)"

    "class (T_CLASS)"  shift, and go to state 194


state 55

  105 class_entry_type: "abstract (T_ABSTRACT)" . "class (T_CLASS)"

    "class (T_CLASS)"  shift, and go to state 195


state 56

   62 unticked_statement: "static (T_STATIC)" . static_var_list ';'
  335 expr_without_variable: "static (T_STATIC)" . function is_reference '(' @54 parameter_list ')' lexical_vars '{' inner_statement_list '}'
  359 class_name: "static (T_STATIC)" .

    "variable (T_VARIABLE)"  shift, and go to state 196
    "function (T_FUNCTION)"  shift, and go to state 47

    $default  reduce using rule 359 (class_name)

    static_var_list  go to state 197
    function         go to state 198


state 57

   66 unticked_statement: "unset (T_UNSET)" . '(' unset_variables ')' ';'

    '('  shift, and go to state 199


state 58

  504 internal_functions_in_yacc: "isset (T_ISSET)" . '(' isset_variables ')'

    '('  shift, and go to state 200


state 59

  505 internal_functions_in_yacc: "empty (T_EMPTY)" . '(' variable ')'

    '('  shift, and go to state 201


state 60

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" . '(' ')' ';'

    '('  shift, and go to state 202


state 61

  104 class_entry_type: "class (T_CLASS)" .

    $default  reduce using rule 104 (class_entry_type)


state 62

  106 class_entry_type: "trait (T_TRAIT)" .

    $default  reduce using rule 106 (class_entry_type)


state 63

  110 interface_entry: "interface (T_INTERFACE)" .

    $default  reduce using rule 110 (interface_entry)


state 64

  253 expr_without_variable: "list (T_LIST)" . '(' @42 assignment_list ')' '=' expr

    '('  shift, and go to state 203


state 65

  328 expr_without_variable: "array (T_ARRAY)" . '(' array_pair_list ')'

    '('  shift, and go to state 204


state 66

  414 scalar: "__CLASS__ (T_CLASS_C)" .

    $default  reduce using rule 414 (scalar)


state 67

  389 common_scalar: "__TRAIT__ (T_TRAIT_C)" .

    $default  reduce using rule 389 (common_scalar)


state 68

  390 common_scalar: "__METHOD__ (T_METHOD_C)" .

    $default  reduce using rule 390 (common_scalar)


state 69

  391 common_scalar: "__FUNCTION__ (T_FUNC_C)" .

    $default  reduce using rule 391 (common_scalar)


state 70

  386 common_scalar: "__LINE__ (T_LINE)" .

    $default  reduce using rule 386 (common_scalar)


state 71

  387 common_scalar: "__FILE__ (T_FILE)" .

    $default  reduce using rule 387 (common_scalar)


state 72

  393 common_scalar: "heredoc start (T_START_HEREDOC)" . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  394              | "heredoc start (T_START_HEREDOC)" . "heredoc end (T_END_HEREDOC)"
  413 scalar: "heredoc start (T_START_HEREDOC)" . encaps_list "heredoc end (T_END_HEREDOC)"

    "variable (T_VARIABLE)"                                     shift, and go to state 205
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 206
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 207
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 208
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 209

    encaps_list  go to state 210
    encaps_var   go to state 211


state 73

   11 top_statement: "namespace (T_NAMESPACE)" . namespace_name ';'
   13              | "namespace (T_NAMESPACE)" . namespace_name '{' @2 top_statement_list '}'
   15              | "namespace (T_NAMESPACE)" . '{' @3 top_statement_list '}'
  346 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name '(' @56 function_call_parameter_list ')'
  361 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  409 scalar: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "identifier (T_STRING)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 212
    '{'                      shift, and go to state 213

    namespace_name  go to state 214


state 74

  392 common_scalar: "__NAMESPACE__ (T_NS_C)" .

    $default  reduce using rule 392 (common_scalar)


state 75

  388 common_scalar: "__DIR__ (T_DIR)" .

    $default  reduce using rule 388 (common_scalar)


state 76

  348 function_call: "\\ (T_NS_SEPARATOR)" . namespace_name '(' @57 function_call_parameter_list ')'
  362 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name
  410 scalar: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 116

    namespace_name  go to state 215


state 77

  307 expr_without_variable: '(' . expr ')'
  310                      | '(' . new_expr ')' @48 instance_call

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 216
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 217
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 78

   75 unticked_statement: ';' .

    $default  reduce using rule 75 (unticked_statement)


state 79

   35 unticked_statement: '{' . inner_statement_list '}'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 218


state 80

  461 compound_variable: '$' . '{' expr '}'
  472 simple_indirect_reference: '$' .

    '{'  shift, and go to state 219

    $default  reduce using rule 472 (simple_indirect_reference)


state 81

  330 expr_without_variable: '`' . backticks_expr '`'

    "variable (T_VARIABLE)"                                     shift, and go to state 205
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 220
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 208
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 209

    $default  reduce using rule 378 (backticks_expr)

    backticks_expr  go to state 221
    encaps_list     go to state 222
    encaps_var      go to state 211


state 82

  412 scalar: '"' . encaps_list '"'

    "variable (T_VARIABLE)"                                     shift, and go to state 205
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 223
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 208
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 209

    encaps_list  go to state 224
    encaps_var   go to state 211


state 83

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  344 function_call: namespace_name . '(' @55 function_call_parameter_list ')'
  360 class_name: namespace_name .
  408 scalar: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225
    '('                    shift, and go to state 226

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 360 (class_name)
    $default                       reduce using rule 408 (scalar)


state 84

    3 top_statement_list: top_statement_list @1 top_statement .

    $default  reduce using rule 3 (top_statement_list)


state 85

   17 top_statement: constant_declaration . ';'
   24 constant_declaration: constant_declaration . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 227
    ';'  shift, and go to state 228


state 86

    7 top_statement: statement .

    $default  reduce using rule 7 (top_statement)


state 87

   33 statement: unticked_statement .

    $default  reduce using rule 33 (statement)


state 88

    8 top_statement: function_declaration_statement .

    $default  reduce using rule 8 (top_statement)


state 89

    9 top_statement: class_declaration_statement .

    $default  reduce using rule 9 (top_statement)


state 90

   94 function_declaration_statement: unticked_function_declaration_statement .

    $default  reduce using rule 94 (function_declaration_statement)


state 91

   95 class_declaration_statement: unticked_class_declaration_statement .

    $default  reduce using rule 95 (class_declaration_statement)


state 92

  101 unticked_class_declaration_statement: class_entry_type . "identifier (T_STRING)" extends_from @30 implements_list '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 229


state 93

  103 unticked_class_declaration_statement: interface_entry . "identifier (T_STRING)" @31 interface_extends_list '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 230


state 94

  308 expr_without_variable: new_expr .

    $default  reduce using rule 308 (expr_without_variable)


state 95

  424 expr: expr_without_variable .

    $default  reduce using rule 424 (expr)


state 96

   99 unticked_function_declaration_statement: function . is_reference "identifier (T_STRING)" @29 '(' parameter_list ')' '{' inner_statement_list '}'
  333 expr_without_variable: function . is_reference '(' @53 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 231

    $default  reduce using rule 96 (is_reference)

    is_reference  go to state 232


state 97

  450 array_function_dereference: function_call . @69 '[' dim_offset ']'
  453 base_variable_with_function_calls: function_call .

    '['       reduce using rule 449 (@69)
    $default  reduce using rule 453 (base_variable_with_function_calls)

    @69  go to state 233


state 98

  350 function_call: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @58 function_call_parameter_list ')'
  352              | class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @59 function_call_parameter_list ')'
  445 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  514 class_constant: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 234


state 99

  411 scalar: common_scalar .

    $default  reduce using rule 411 (scalar)


state 100

  327 expr_without_variable: scalar .

    $default  reduce using rule 327 (expr_without_variable)


state 101

   65 unticked_statement: expr . ';'
  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    ';'                           shift, and go to state 261


state 102

  423 expr: r_variable .

    $default  reduce using rule 423 (expr)


state 103

  270 expr_without_variable: rw_variable . "++ (T_INC)"
  272                      | rw_variable . "-- (T_DEC)"

    "-- (T_DEC)"  shift, and go to state 262
    "++ (T_INC)"  shift, and go to state 263


state 104

  254 expr_without_variable: variable . '=' expr
  255                      | variable . '=' '&' variable
  257                      | variable . '=' '&' "new (T_NEW)" class_name_reference @43 ctor_arguments
  259                      | variable . "+= (T_PLUS_EQUAL)" expr
  260                      | variable . "-= (T_MINUS_EQUAL)" expr
  261                      | variable . "*= (T_MUL_EQUAL)" expr
  262                      | variable . "/= (T_DIV_EQUAL)" expr
  263                      | variable . ".= (T_CONCAT_EQUAL)" expr
  264                      | variable . "%= (T_MOD_EQUAL)" expr
  265                      | variable . "&= (T_AND_EQUAL)" expr
  266                      | variable . "|= (T_OR_EQUAL)" expr
  267                      | variable . "^= (T_XOR_EQUAL)" expr
  268                      | variable . "<<= (T_SL_EQUAL)" expr
  269                      | variable . ">>= (T_SR_EQUAL)" expr
  425 r_variable: variable .
  427 rw_variable: variable .

    '='                    shift, and go to state 264
    ">>= (T_SR_EQUAL)"     shift, and go to state 265
    "<<= (T_SL_EQUAL)"     shift, and go to state 266
    "^= (T_XOR_EQUAL)"     shift, and go to state 267
    "|= (T_OR_EQUAL)"      shift, and go to state 268
    "&= (T_AND_EQUAL)"     shift, and go to state 269
    "%= (T_MOD_EQUAL)"     shift, and go to state 270
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 271
    "/= (T_DIV_EQUAL)"     shift, and go to state 272
    "*= (T_MUL_EQUAL)"     shift, and go to state 273
    "-= (T_MINUS_EQUAL)"   shift, and go to state 274
    "+= (T_PLUS_EQUAL)"    shift, and go to state 275

    "-- (T_DEC)"  reduce using rule 427 (rw_variable)
    "++ (T_INC)"  reduce using rule 427 (rw_variable)
    $default      reduce using rule 425 (r_variable)


state 105

  358 function_call: variable_without_objects . '(' @62 function_call_parameter_list ')'

    '('  shift, and go to state 276


state 106

  456 base_variable: static_member .

    $default  reduce using rule 456 (base_variable)


state 107

  354 function_call: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @60 function_call_parameter_list ')'
  356              | variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @61 function_call_parameter_list ')'
  446 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  515 class_constant: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 277


state 108

  448 array_function_dereference: array_function_dereference . '[' dim_offset ']'
  452 base_variable_with_function_calls: array_function_dereference .

    '['  shift, and go to state 278

    $default  reduce using rule 452 (base_variable_with_function_calls)


state 109

  430 variable: base_variable_with_function_calls . "-> (T_OBJECT_OPERATOR)" @65 object_property @66 method_or_not variable_properties
  431         | base_variable_with_function_calls .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 279

    $default  reduce using rule 431 (variable)


state 110

  451 base_variable_with_function_calls: base_variable .

    $default  reduce using rule 451 (base_variable_with_function_calls)


state 111

  443 variable_without_objects: reference_variable .
  447 variable_class_name: reference_variable .
  454 base_variable: reference_variable .
  457 reference_variable: reference_variable . '[' dim_offset ']'
  458                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 280
    '{'  shift, and go to state 281

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 447 (variable_class_name)
    '('                            reduce using rule 443 (variable_without_objects)
    $default                       reduce using rule 454 (base_variable)


state 112

  459 reference_variable: compound_variable .

    $default  reduce using rule 459 (reference_variable)


state 113

  444 variable_without_objects: simple_indirect_reference . reference_variable
  455 base_variable: simple_indirect_reference . reference_variable
  473 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 34
    '$'                      shift, and go to state 282

    reference_variable  go to state 283
    compound_variable   go to state 112


state 114

  316 expr_without_variable: internal_functions_in_yacc .

    $default  reduce using rule 316 (expr_without_variable)


state 115

  407 scalar: class_constant .

    $default  reduce using rule 407 (scalar)


state 116

    5 namespace_name: "identifier (T_STRING)" .

    $default  reduce using rule 5 (namespace_name)


state 117

  335 expr_without_variable: "static (T_STATIC)" . function is_reference '(' @54 parameter_list ')' lexical_vars '{' inner_statement_list '}'
  359 class_name: "static (T_STATIC)" .

    "function (T_FUNCTION)"  shift, and go to state 47

    $default  reduce using rule 359 (class_name)

    function  go to state 198


state 118

  346 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name '(' @56 function_call_parameter_list ')'
  361 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  409 scalar: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 212


state 119

  333 expr_without_variable: function . is_reference '(' @53 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 231

    $default  reduce using rule 96 (is_reference)

    is_reference  go to state 284


state 120

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  510 internal_functions_in_yacc: "require_once (T_REQUIRE_ONCE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 510 (internal_functions_in_yacc)


state 121

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  509 internal_functions_in_yacc: "require (T_REQUIRE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 509 (internal_functions_in_yacc)


state 122

  508 internal_functions_in_yacc: "eval (T_EVAL)" '(' . expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 285
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 123

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  507 internal_functions_in_yacc: "include_once (T_INCLUDE_ONCE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 507 (internal_functions_in_yacc)


state 124

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  506 internal_functions_in_yacc: "include (T_INCLUDE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 506 (internal_functions_in_yacc)


state 125

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  331                      | "print (T_PRINT)" expr .

    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 331 (expr_without_variable)


state 126

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  294                      | '+' expr .
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    $default  reduce using rule 294 (expr_without_variable)


state 127

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  295                      | '-' expr .
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    $default  reduce using rule 295 (expr_without_variable)


state 128

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  296                      | '!' expr .
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 260

    $default  reduce using rule 296 (expr_without_variable)


state 129

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  297                      | '~' expr .
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    $default  reduce using rule 297 (expr_without_variable)


state 130

  326 expr_without_variable: '@' @52 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 286
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 131

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  323                      | "(unset) (T_UNSET_CAST)" expr .

    $default  reduce using rule 323 (expr_without_variable)


state 132

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  322                      | "(bool) (T_BOOL_CAST)" expr .

    $default  reduce using rule 322 (expr_without_variable)


state 133

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  321                      | "(object) (T_OBJECT_CAST)" expr .

    $default  reduce using rule 321 (expr_without_variable)


state 134

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  320                      | "(array) (T_ARRAY_CAST)" expr .

    $default  reduce using rule 320 (expr_without_variable)


state 135

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  319                      | "(string) (T_STRING_CAST)" expr .

    $default  reduce using rule 319 (expr_without_variable)


state 136

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  318                      | "(double) (T_DOUBLE_CAST)" expr .

    $default  reduce using rule 318 (expr_without_variable)


state 137

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  317                      | "(int) (T_INT_CAST)" expr .

    $default  reduce using rule 317 (expr_without_variable)


state 138

  359 class_name: "static (T_STATIC)" .

    $default  reduce using rule 359 (class_name)


state 139

  346 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name '(' @56 function_call_parameter_list ')'
  361 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 287


state 140

  348 function_call: "\\ (T_NS_SEPARATOR)" . namespace_name '(' @57 function_call_parameter_list ')'
  362 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 116

    namespace_name  go to state 288


state 141

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  344 function_call: namespace_name . '(' @55 function_call_parameter_list ')'
  360 class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225
    '('                    shift, and go to state 226

    $default  reduce using rule 360 (class_name)


state 142

  350 function_call: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @58 function_call_parameter_list ')'
  352              | class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @59 function_call_parameter_list ')'
  445 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 289


state 143

  273 expr_without_variable: "-- (T_DEC)" rw_variable .

    $default  reduce using rule 273 (expr_without_variable)


state 144

  427 rw_variable: variable .

    $default  reduce using rule 427 (rw_variable)


state 145

  354 function_call: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @60 function_call_parameter_list ')'
  356              | variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @61 function_call_parameter_list ')'
  446 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 290


state 146

  271 expr_without_variable: "++ (T_INC)" rw_variable .

    $default  reduce using rule 271 (expr_without_variable)


state 147

  489 non_empty_array_pair_list: '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    namespace_name                     go to state 141
    function_call                      go to state 97
    class_name                         go to state 142
    w_variable                         go to state 291
    variable                           go to state 292
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113


state 148

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  484 non_empty_array_pair_list: expr . "=> (T_DOUBLE_ARROW)" expr
  485                          | expr .
  488                          | expr . "=> (T_DOUBLE_ARROW)" '&' w_variable

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 293

    $default  reduce using rule 485 (non_empty_array_pair_list)


state 149

  329 expr_without_variable: '[' array_pair_list . ']'

    ']'  shift, and go to state 294


state 150

  481 array_pair_list: non_empty_array_pair_list . possible_comma
  482 non_empty_array_pair_list: non_empty_array_pair_list . ',' expr "=> (T_DOUBLE_ARROW)" expr
  483                          | non_empty_array_pair_list . ',' expr
  486                          | non_empty_array_pair_list . ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  487                          | non_empty_array_pair_list . ',' '&' w_variable

    ','  shift, and go to state 295

    $default  reduce using rule 417 (possible_comma)

    possible_comma  go to state 296


state 151

  258 expr_without_variable: "clone (T_CLONE)" expr .
  275                      | expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    $default  reduce using rule 258 (expr_without_variable)


state 152

  361 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 297


state 153

  362 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 116

    namespace_name  go to state 298


state 154

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  360 class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225

    $default  reduce using rule 360 (class_name)


state 155

  366 class_name_reference: class_name .
  445 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 299

    $default  reduce using rule 366 (class_name_reference)


state 156

  251 new_expr: "new (T_NEW)" class_name_reference . @41 ctor_arguments

    $default  reduce using rule 250 (@41)

    @41  go to state 300


state 157

  367 class_name_reference: dynamic_class_name_reference .

    $default  reduce using rule 367 (class_name_reference)


state 158

  446 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 301


state 159

  370 dynamic_class_name_reference: base_variable . "-> (T_OBJECT_OPERATOR)" @63 object_property @64 dynamic_class_name_variable_properties
  371                             | base_variable .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 302

    $default  reduce using rule 371 (dynamic_class_name_reference)


state 160

  447 variable_class_name: reference_variable .
  454 base_variable: reference_variable .
  457 reference_variable: reference_variable . '[' dim_offset ']'
  458                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 280
    '{'  shift, and go to state 281

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 447 (variable_class_name)
    $default                       reduce using rule 454 (base_variable)


state 161

  455 base_variable: simple_indirect_reference . reference_variable
  473 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 34
    '$'                      shift, and go to state 282

    reference_variable  go to state 303
    compound_variable   go to state 112


state 162

  376 exit_expr: '(' . ')'
  377          | '(' . expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ')'                                           shift, and go to state 304
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 305
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 163

  324 expr_without_variable: "exit (T_EXIT)" exit_expr .

    $default  reduce using rule 324 (expr_without_variable)


state 164

   38 unticked_statement: "if (T_IF)" '(' . expr ')' @5 statement @6 elseif_list else_single
   41                   | "if (T_IF)" '(' . expr ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 306
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 165

   34 statement: "identifier (T_STRING)" ':' .

    $default  reduce using rule 34 (statement)


state 166

   63 unticked_statement: "echo (T_ECHO)" echo_expr_list . ';'
  232 echo_expr_list: echo_expr_list . ',' expr

    ','  shift, and go to state 307
    ';'  shift, and go to state 308


state 167

  233 echo_expr_list: expr .
  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 233 (echo_expr_list)


state 168

   47 unticked_statement: "do (T_DO)" @11 . statement "while (T_WHILE)" '(' @12 expr ')' ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 309
    unticked_statement                 go to state 87
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 101
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 169

   44 unticked_statement: "while (T_WHILE)" '(' . @9 expr ')' @10 while_statement

    $default  reduce using rule 42 (@9)

    @9  go to state 310


state 170

   51 unticked_statement: "for (T_FOR)" '(' . for_expr ';' @13 for_expr ';' @14 for_expr ')' @15 for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 234 (for_expr)

    namespace_name                     go to state 83
    for_expr                           go to state 311
    non_empty_for_expr                 go to state 312
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 313
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 171

   69 unticked_statement: "foreach (T_FOREACH)" '(' . variable "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' @18 foreach_statement
   72                   | "foreach (T_FOREACH)" '(' . expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg ')' @20 foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 314
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 182
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 315
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 172

   74 unticked_statement: "declare (T_DECLARE)" @21 . '(' declare_list ')' declare_statement

    '('  shift, and go to state 316


state 173

   53 unticked_statement: "switch (T_SWITCH)" '(' . expr ')' @16 switch_case_list

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 317
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 174

   54 unticked_statement: "break (T_BREAK)" ';' .

    $default  reduce using rule 54 (unticked_statement)


state 175

   55 unticked_statement: "break (T_BREAK)" expr . ';'
  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    ';'                           shift, and go to state 318


state 176

   56 unticked_statement: "continue (T_CONTINUE)" ';' .

    $default  reduce using rule 56 (unticked_statement)


state 177

   57 unticked_statement: "continue (T_CONTINUE)" expr . ';'
  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    ';'                           shift, and go to state 319


state 178

   83 unticked_statement: "goto (T_GOTO)" "identifier (T_STRING)" . ';'

    ';'  shift, and go to state 320


state 179

   25 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 321


state 180

   58 unticked_statement: "return (T_RETURN)" ';' .

    $default  reduce using rule 58 (unticked_statement)


state 181

   59 unticked_statement: "return (T_RETURN)" expr_without_variable . ';'
  424 expr: expr_without_variable .

    ';'  shift, and go to state 322

    $default  reduce using rule 424 (expr)


state 182

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260


state 183

   60 unticked_statement: "return (T_RETURN)" variable . ';'
  254 expr_without_variable: variable . '=' expr
  255                      | variable . '=' '&' variable
  257                      | variable . '=' '&' "new (T_NEW)" class_name_reference @43 ctor_arguments
  259                      | variable . "+= (T_PLUS_EQUAL)" expr
  260                      | variable . "-= (T_MINUS_EQUAL)" expr
  261                      | variable . "*= (T_MUL_EQUAL)" expr
  262                      | variable . "/= (T_DIV_EQUAL)" expr
  263                      | variable . ".= (T_CONCAT_EQUAL)" expr
  264                      | variable . "%= (T_MOD_EQUAL)" expr
  265                      | variable . "&= (T_AND_EQUAL)" expr
  266                      | variable . "|= (T_OR_EQUAL)" expr
  267                      | variable . "^= (T_XOR_EQUAL)" expr
  268                      | variable . "<<= (T_SL_EQUAL)" expr
  269                      | variable . ">>= (T_SR_EQUAL)" expr
  425 r_variable: variable .
  427 rw_variable: variable .

    '='                    shift, and go to state 264
    ">>= (T_SR_EQUAL)"     shift, and go to state 265
    "<<= (T_SL_EQUAL)"     shift, and go to state 266
    "^= (T_XOR_EQUAL)"     shift, and go to state 267
    "|= (T_OR_EQUAL)"      shift, and go to state 268
    "&= (T_AND_EQUAL)"     shift, and go to state 269
    "%= (T_MOD_EQUAL)"     shift, and go to state 270
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 271
    "/= (T_DIV_EQUAL)"     shift, and go to state 272
    "*= (T_MUL_EQUAL)"     shift, and go to state 273
    "-= (T_MINUS_EQUAL)"   shift, and go to state 274
    "+= (T_PLUS_EQUAL)"    shift, and go to state 275
    ';'                    shift, and go to state 323

    "-- (T_DEC)"  reduce using rule 427 (rw_variable)
    "++ (T_INC)"  reduce using rule 427 (rw_variable)
    $default      reduce using rule 425 (r_variable)


state 184

   81 unticked_statement: "try (T_TRY)" @22 . '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    '{'  shift, and go to state 324


state 185

   82 unticked_statement: "throw (T_THROW)" expr . ';'
  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    ';'                           shift, and go to state 325


state 186

   22 use_declaration: "\\ (T_NS_SEPARATOR)" . namespace_name
   23                | "\\ (T_NS_SEPARATOR)" . namespace_name "as (T_AS)" "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 116

    namespace_name  go to state 326


state 187

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   20 use_declaration: namespace_name .
   21                | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 327
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225

    $default  reduce using rule 20 (use_declaration)


state 188

   16 top_statement: "use (T_USE)" use_declarations . ';'
   18 use_declarations: use_declarations . ',' use_declaration

    ','  shift, and go to state 328
    ';'  shift, and go to state 329


state 189

   19 use_declarations: use_declaration .

    $default  reduce using rule 19 (use_declarations)


state 190

  176 global_var: "variable (T_VARIABLE)" .

    $default  reduce using rule 176 (global_var)


state 191

  177 global_var: '$' . r_variable
  178           | '$' . '{' expr '}'

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '{'                        shift, and go to state 330
    '$'                        shift, and go to state 80

    namespace_name                     go to state 141
    function_call                      go to state 97
    class_name                         go to state 142
    r_variable                         go to state 331
    variable                           go to state 332
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113


state 192

   61 unticked_statement: "global (T_GLOBAL)" global_var_list . ';'
  174 global_var_list: global_var_list . ',' global_var

    ','  shift, and go to state 333
    ';'  shift, and go to state 334


state 193

  175 global_var_list: global_var .

    $default  reduce using rule 175 (global_var_list)


state 194

  107 class_entry_type: "final (T_FINAL)" "class (T_CLASS)" .

    $default  reduce using rule 107 (class_entry_type)


state 195

  105 class_entry_type: "abstract (T_ABSTRACT)" "class (T_CLASS)" .

    $default  reduce using rule 105 (class_entry_type)


state 196

  181 static_var_list: "variable (T_VARIABLE)" .
  182                | "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 335

    $default  reduce using rule 181 (static_var_list)


state 197

   62 unticked_statement: "static (T_STATIC)" static_var_list . ';'
  179 static_var_list: static_var_list . ',' "variable (T_VARIABLE)"
  180                | static_var_list . ',' "variable (T_VARIABLE)" '=' static_scalar

    ','  shift, and go to state 336
    ';'  shift, and go to state 337


state 198

  335 expr_without_variable: "static (T_STATIC)" function . is_reference '(' @54 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 231

    $default  reduce using rule 96 (is_reference)

    is_reference  go to state 338


state 199

   66 unticked_statement: "unset (T_UNSET)" '(' . unset_variables ')' ';'

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    namespace_name                     go to state 141
    unset_variables                    go to state 339
    unset_variable                     go to state 340
    function_call                      go to state 97
    class_name                         go to state 142
    variable                           go to state 341
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113


state 200

  504 internal_functions_in_yacc: "isset (T_ISSET)" '(' . isset_variables ')'

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    namespace_name                     go to state 141
    function_call                      go to state 97
    class_name                         go to state 142
    variable                           go to state 342
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    isset_variables                    go to state 343


state 201

  505 internal_functions_in_yacc: "empty (T_EMPTY)" '(' . variable ')'

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    namespace_name                     go to state 141
    function_call                      go to state 97
    class_name                         go to state 142
    variable                           go to state 344
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113


state 202

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' . ')' ';'

    ')'  shift, and go to state 345


state 203

  253 expr_without_variable: "list (T_LIST)" '(' . @42 assignment_list ')' '=' expr

    $default  reduce using rule 252 (@42)

    @42  go to state 346


state 204

  328 expr_without_variable: "array (T_ARRAY)" '(' . array_pair_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 147
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 480 (array_pair_list)

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 148
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    array_pair_list                    go to state 347
    non_empty_array_pair_list          go to state 150
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 205

  494 encaps_var: "variable (T_VARIABLE)" .
  496           | "variable (T_VARIABLE)" . '[' @72 encaps_var_offset ']'
  497           | "variable (T_VARIABLE)" . "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)"

    '['                       shift, and go to state 348
    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 349

    $default  reduce using rule 494 (encaps_var)


state 206

  393 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . "heredoc end (T_END_HEREDOC)"
  493 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 205
    "heredoc end (T_END_HEREDOC)"      shift, and go to state 350
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 208
    "{$ (T_CURLY_OPEN)"                shift, and go to state 209

    encaps_var  go to state 351


state 207

  394 common_scalar: "heredoc start (T_START_HEREDOC)" "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 394 (common_scalar)


state 208

  498 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" . expr '}'
  499           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" . "variable name (T_STRING_VARNAME)" '[' expr ']' '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 352
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 353
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 209

  500 encaps_var: "{$ (T_CURLY_OPEN)" . variable '}'

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    namespace_name                     go to state 141
    function_call                      go to state 97
    class_name                         go to state 142
    variable                           go to state 354
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113


state 210

  413 scalar: "heredoc start (T_START_HEREDOC)" encaps_list . "heredoc end (T_END_HEREDOC)"
  490 encaps_list: encaps_list . encaps_var
  491            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 205
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 355
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 356
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 208
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 209

    encaps_var  go to state 357


state 211

  492 encaps_list: encaps_var .

    $default  reduce using rule 492 (encaps_list)


state 212

  346 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name '(' @56 function_call_parameter_list ')'
  361 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name
  409 scalar: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 116

    namespace_name  go to state 358


state 213

   15 top_statement: "namespace (T_NAMESPACE)" '{' . @3 top_statement_list '}'

    $default  reduce using rule 14 (@3)

    @3  go to state 359


state 214

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   11 top_statement: "namespace (T_NAMESPACE)" namespace_name . ';'
   13              | "namespace (T_NAMESPACE)" namespace_name . '{' @2 top_statement_list '}'

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225
    ';'                    shift, and go to state 360
    '{'                    shift, and go to state 361


state 215

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  348 function_call: "\\ (T_NS_SEPARATOR)" namespace_name . '(' @57 function_call_parameter_list ')'
  362 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .
  410 scalar: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225
    '('                    shift, and go to state 362

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 362 (class_name)
    $default                       reduce using rule 410 (scalar)


state 216

  308 expr_without_variable: new_expr .
  310                      | '(' new_expr . ')' @48 instance_call

    ')'  shift, and go to state 363

    ')'       [reduce using rule 308 (expr_without_variable)]
    $default  reduce using rule 308 (expr_without_variable)


state 217

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  307                      | '(' expr . ')'
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    ')'                           shift, and go to state 364


state 218

   27 inner_statement_list: inner_statement_list . @4 inner_statement
   35 unticked_statement: '{' inner_statement_list . '}'

    '}'  shift, and go to state 365

    $default  reduce using rule 26 (@4)

    @4  go to state 366


state 219

  461 compound_variable: '$' '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 367
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 220

  379 backticks_expr: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" .
  493 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 205
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 208
    "{$ (T_CURLY_OPEN)"                shift, and go to state 209

    $default  reduce using rule 379 (backticks_expr)

    encaps_var  go to state 351


state 221

  330 expr_without_variable: '`' backticks_expr . '`'

    '`'  shift, and go to state 368


state 222

  380 backticks_expr: encaps_list .
  490 encaps_list: encaps_list . encaps_var
  491            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 205
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 355
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 208
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 209

    $default  reduce using rule 380 (backticks_expr)

    encaps_var  go to state 357


state 223

  493 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 205
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 208
    "{$ (T_CURLY_OPEN)"                shift, and go to state 209

    encaps_var  go to state 351


state 224

  412 scalar: '"' encaps_list . '"'
  490 encaps_list: encaps_list . encaps_var
  491            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 205
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 355
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 208
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 209
    '"'                                                         shift, and go to state 369

    encaps_var  go to state 357


state 225

    6 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 370


state 226

  344 function_call: namespace_name '(' . @55 function_call_parameter_list ')'

    $default  reduce using rule 343 (@55)

    @55  go to state 371


state 227

   24 constant_declaration: constant_declaration ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 372


state 228

   17 top_statement: constant_declaration ';' .

    $default  reduce using rule 17 (top_statement)


state 229

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" . extends_from @30 implements_list '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 373

    $default  reduce using rule 108 (extends_from)

    extends_from  go to state 374


state 230

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" . @31 interface_extends_list '{' class_statement_list '}'

    $default  reduce using rule 102 (@31)

    @31  go to state 375


state 231

   97 is_reference: '&' .

    $default  reduce using rule 97 (is_reference)


state 232

   99 unticked_function_declaration_statement: function is_reference . "identifier (T_STRING)" @29 '(' parameter_list ')' '{' inner_statement_list '}'
  333 expr_without_variable: function is_reference . '(' @53 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 376
    '('                      shift, and go to state 377


state 233

  450 array_function_dereference: function_call @69 . '[' dim_offset ']'

    '['  shift, and go to state 378


state 234

  350 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name '(' @58 function_call_parameter_list ')'
  352              | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects '(' @59 function_call_parameter_list ')'
  445 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects
  514 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 379
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 380
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 381
    reference_variable         go to state 382
    compound_variable          go to state 112
    variable_name              go to state 383
    simple_indirect_reference  go to state 384


state 235

  279 expr_without_variable: expr "or (T_LOGICAL_OR)" . @46 expr

    $default  reduce using rule 278 (@46)

    @46  go to state 385


state 236

  282 expr_without_variable: expr "xor (T_LOGICAL_XOR)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 386
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 237

  281 expr_without_variable: expr "and (T_LOGICAL_AND)" . @47 expr

    $default  reduce using rule 280 (@47)

    @47  go to state 387


state 238

  313 expr_without_variable: expr '?' . @49 expr ':' @50 expr
  315                      | expr '?' . ':' @51 expr

    ':'  shift, and go to state 388

    $default  reduce using rule 311 (@49)

    @49  go to state 389


state 239

  275 expr_without_variable: expr "|| (T_BOOLEAN_OR)" . @44 expr

    $default  reduce using rule 274 (@44)

    @44  go to state 390


state 240

  277 expr_without_variable: expr "&& (T_BOOLEAN_AND)" . @45 expr

    $default  reduce using rule 276 (@45)

    @45  go to state 391


state 241

  283 expr_without_variable: expr '|' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 392
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 242

  285 expr_without_variable: expr '^' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 393
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 243

  284 expr_without_variable: expr '&' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 394
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 244

  299 expr_without_variable: expr "!== (T_IS_NOT_IDENTICAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 395
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 245

  298 expr_without_variable: expr "=== (T_IS_IDENTICAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 396
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 246

  301 expr_without_variable: expr "!= (T_IS_NOT_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 397
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 247

  300 expr_without_variable: expr "== (T_IS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 398
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 248

  302 expr_without_variable: expr '<' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 399
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 249

  304 expr_without_variable: expr '>' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 400
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 250

  305 expr_without_variable: expr ">= (T_IS_GREATER_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 401
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 251

  303 expr_without_variable: expr "<= (T_IS_SMALLER_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 402
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 252

  293 expr_without_variable: expr ">> (T_SR)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 403
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 253

  292 expr_without_variable: expr "<< (T_SL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 404
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 254

  287 expr_without_variable: expr '+' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 405
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 255

  288 expr_without_variable: expr '-' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 406
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 256

  286 expr_without_variable: expr '.' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 407
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 257

  289 expr_without_variable: expr '*' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 408
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 258

  290 expr_without_variable: expr '/' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 409
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 259

  291 expr_without_variable: expr '%' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 410
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 260

  306 expr_without_variable: expr "instanceof (T_INSTANCEOF)" . class_name_reference

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 152
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 153
    '$'                        shift, and go to state 80

    namespace_name                go to state 154
    class_name                    go to state 155
    class_name_reference          go to state 411
    dynamic_class_name_reference  go to state 157
    static_member                 go to state 106
    variable_class_name           go to state 158
    base_variable                 go to state 159
    reference_variable            go to state 160
    compound_variable             go to state 112
    simple_indirect_reference     go to state 161


state 261

   65 unticked_statement: expr ';' .

    $default  reduce using rule 65 (unticked_statement)


state 262

  272 expr_without_variable: rw_variable "-- (T_DEC)" .

    $default  reduce using rule 272 (expr_without_variable)


state 263

  270 expr_without_variable: rw_variable "++ (T_INC)" .

    $default  reduce using rule 270 (expr_without_variable)


state 264

  254 expr_without_variable: variable '=' . expr
  255                      | variable '=' . '&' variable
  257                      | variable '=' . '&' "new (T_NEW)" class_name_reference @43 ctor_arguments

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 412
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 413
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 265

  269 expr_without_variable: variable ">>= (T_SR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 414
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 266

  268 expr_without_variable: variable "<<= (T_SL_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 415
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 267

  267 expr_without_variable: variable "^= (T_XOR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 416
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 268

  266 expr_without_variable: variable "|= (T_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 417
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 269

  265 expr_without_variable: variable "&= (T_AND_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 418
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 270

  264 expr_without_variable: variable "%= (T_MOD_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 419
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 271

  263 expr_without_variable: variable ".= (T_CONCAT_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 420
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 272

  262 expr_without_variable: variable "/= (T_DIV_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 421
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 273

  261 expr_without_variable: variable "*= (T_MUL_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 422
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 274

  260 expr_without_variable: variable "-= (T_MINUS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 423
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 275

  259 expr_without_variable: variable "+= (T_PLUS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 424
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 276

  358 function_call: variable_without_objects '(' . @62 function_call_parameter_list ')'

    $default  reduce using rule 357 (@62)

    @62  go to state 425


state 277

  354 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name '(' @60 function_call_parameter_list ')'
  356              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects '(' @61 function_call_parameter_list ')'
  446 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects
  515 class_constant: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 426
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 380
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 427
    reference_variable         go to state 382
    compound_variable          go to state 112
    variable_name              go to state 428
    simple_indirect_reference  go to state 384


state 278

  448 array_function_dereference: array_function_dereference '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 462 (dim_offset)

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 429
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    dim_offset                         go to state 430
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 279

  430 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" . @65 object_property @66 method_or_not variable_properties

    $default  reduce using rule 428 (@65)

    @65  go to state 431


state 280

  457 reference_variable: reference_variable '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 462 (dim_offset)

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 429
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    dim_offset                         go to state 432
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 281

  458 reference_variable: reference_variable '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 433
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 282

  461 compound_variable: '$' . '{' expr '}'
  473 simple_indirect_reference: simple_indirect_reference '$' .

    '{'  shift, and go to state 219

    $default  reduce using rule 473 (simple_indirect_reference)


state 283

  444 variable_without_objects: simple_indirect_reference reference_variable .
  455 base_variable: simple_indirect_reference reference_variable .
  457 reference_variable: reference_variable . '[' dim_offset ']'
  458                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 280
    '{'  shift, and go to state 281

    '('       reduce using rule 444 (variable_without_objects)
    $default  reduce using rule 455 (base_variable)


state 284

  333 expr_without_variable: function is_reference . '(' @53 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '('  shift, and go to state 377


state 285

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  508 internal_functions_in_yacc: "eval (T_EVAL)" '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    ')'                           shift, and go to state 434


state 286

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  326                      | '@' @52 expr .

    $default  reduce using rule 326 (expr_without_variable)


state 287

  346 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name '(' @56 function_call_parameter_list ')'
  361 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 116

    namespace_name  go to state 435


state 288

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  348 function_call: "\\ (T_NS_SEPARATOR)" namespace_name . '(' @57 function_call_parameter_list ')'
  362 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225
    '('                    shift, and go to state 362

    $default  reduce using rule 362 (class_name)


state 289

  350 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name '(' @58 function_call_parameter_list ')'
  352              | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects '(' @59 function_call_parameter_list ')'
  445 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "identifier (T_STRING)"  shift, and go to state 436
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 380
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 381
    reference_variable         go to state 382
    compound_variable          go to state 112
    variable_name              go to state 383
    simple_indirect_reference  go to state 384


state 290

  354 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name '(' @60 function_call_parameter_list ')'
  356              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects '(' @61 function_call_parameter_list ')'
  446 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "identifier (T_STRING)"  shift, and go to state 436
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 380
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 427
    reference_variable         go to state 382
    compound_variable          go to state 112
    variable_name              go to state 428
    simple_indirect_reference  go to state 384


state 291

  489 non_empty_array_pair_list: '&' w_variable .

    $default  reduce using rule 489 (non_empty_array_pair_list)


state 292

  426 w_variable: variable .

    $default  reduce using rule 426 (w_variable)


state 293

  484 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" . expr
  488                          | expr "=> (T_DOUBLE_ARROW)" . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 437
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 438
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 294

  329 expr_without_variable: '[' array_pair_list ']' .

    $default  reduce using rule 329 (expr_without_variable)


state 295

  418 possible_comma: ',' .
  482 non_empty_array_pair_list: non_empty_array_pair_list ',' . expr "=> (T_DOUBLE_ARROW)" expr
  483                          | non_empty_array_pair_list ',' . expr
  486                          | non_empty_array_pair_list ',' . expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  487                          | non_empty_array_pair_list ',' . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 439
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 418 (possible_comma)

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 440
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 296

  481 array_pair_list: non_empty_array_pair_list possible_comma .

    $default  reduce using rule 481 (array_pair_list)


state 297

  361 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 116

    namespace_name  go to state 441


state 298

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  362 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225

    $default  reduce using rule 362 (class_name)


state 299

  445 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "variable (T_VARIABLE)"  shift, and go to state 34
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 442
    reference_variable         go to state 382
    compound_variable          go to state 112
    simple_indirect_reference  go to state 384


state 300

  251 new_expr: "new (T_NEW)" class_name_reference @41 . ctor_arguments

    '('  shift, and go to state 443

    $default  reduce using rule 381 (ctor_arguments)

    ctor_arguments  go to state 444


state 301

  446 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "variable (T_VARIABLE)"  shift, and go to state 34
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 445
    reference_variable         go to state 382
    compound_variable          go to state 112
    simple_indirect_reference  go to state 384


state 302

  370 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" . @63 object_property @64 dynamic_class_name_variable_properties

    $default  reduce using rule 368 (@63)

    @63  go to state 446


state 303

  455 base_variable: simple_indirect_reference reference_variable .
  457 reference_variable: reference_variable . '[' dim_offset ']'
  458                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 280
    '{'  shift, and go to state 281

    $default  reduce using rule 455 (base_variable)


state 304

  376 exit_expr: '(' ')' .

    $default  reduce using rule 376 (exit_expr)


state 305

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  377 exit_expr: '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    ')'                           shift, and go to state 447


state 306

   38 unticked_statement: "if (T_IF)" '(' expr . ')' @5 statement @6 elseif_list else_single
   41                   | "if (T_IF)" '(' expr . ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'
  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    ')'                           shift, and go to state 448


state 307

  232 echo_expr_list: echo_expr_list ',' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 449
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 308

   63 unticked_statement: "echo (T_ECHO)" echo_expr_list ';' .

    $default  reduce using rule 63 (unticked_statement)


state 309

   47 unticked_statement: "do (T_DO)" @11 statement . "while (T_WHILE)" '(' @12 expr ')' ';'

    "while (T_WHILE)"  shift, and go to state 450


state 310

   44 unticked_statement: "while (T_WHILE)" '(' @9 . expr ')' @10 while_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 451
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 311

   51 unticked_statement: "for (T_FOR)" '(' for_expr . ';' @13 for_expr ';' @14 for_expr ')' @15 for_statement

    ';'  shift, and go to state 452


state 312

  235 for_expr: non_empty_for_expr .
  237 non_empty_for_expr: non_empty_for_expr . ',' @38 expr

    ','  shift, and go to state 453

    $default  reduce using rule 235 (for_expr)


state 313

  238 non_empty_for_expr: expr .
  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 238 (non_empty_for_expr)


state 314

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable . "as (T_AS)" @19 variable foreach_optional_arg ')' @20 foreach_statement
  424 expr: expr_without_variable .

    "as (T_AS)"  shift, and go to state 454

    $default  reduce using rule 424 (expr)


state 315

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable . "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' @18 foreach_statement
  254 expr_without_variable: variable . '=' expr
  255                      | variable . '=' '&' variable
  257                      | variable . '=' '&' "new (T_NEW)" class_name_reference @43 ctor_arguments
  259                      | variable . "+= (T_PLUS_EQUAL)" expr
  260                      | variable . "-= (T_MINUS_EQUAL)" expr
  261                      | variable . "*= (T_MUL_EQUAL)" expr
  262                      | variable . "/= (T_DIV_EQUAL)" expr
  263                      | variable . ".= (T_CONCAT_EQUAL)" expr
  264                      | variable . "%= (T_MOD_EQUAL)" expr
  265                      | variable . "&= (T_AND_EQUAL)" expr
  266                      | variable . "|= (T_OR_EQUAL)" expr
  267                      | variable . "^= (T_XOR_EQUAL)" expr
  268                      | variable . "<<= (T_SL_EQUAL)" expr
  269                      | variable . ">>= (T_SR_EQUAL)" expr
  425 r_variable: variable .
  427 rw_variable: variable .

    '='                    shift, and go to state 264
    ">>= (T_SR_EQUAL)"     shift, and go to state 265
    "<<= (T_SL_EQUAL)"     shift, and go to state 266
    "^= (T_XOR_EQUAL)"     shift, and go to state 267
    "|= (T_OR_EQUAL)"      shift, and go to state 268
    "&= (T_AND_EQUAL)"     shift, and go to state 269
    "%= (T_MOD_EQUAL)"     shift, and go to state 270
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 271
    "/= (T_DIV_EQUAL)"     shift, and go to state 272
    "*= (T_MUL_EQUAL)"     shift, and go to state 273
    "-= (T_MINUS_EQUAL)"   shift, and go to state 274
    "+= (T_PLUS_EQUAL)"    shift, and go to state 275
    "as (T_AS)"            shift, and go to state 455

    "-- (T_DEC)"  reduce using rule 427 (rw_variable)
    "++ (T_INC)"  reduce using rule 427 (rw_variable)
    $default      reduce using rule 425 (r_variable)


state 316

   74 unticked_statement: "declare (T_DECLARE)" @21 '(' . declare_list ')' declare_statement

    "identifier (T_STRING)"  shift, and go to state 456

    declare_list  go to state 457


state 317

   53 unticked_statement: "switch (T_SWITCH)" '(' expr . ')' @16 switch_case_list
  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    ')'                           shift, and go to state 458


state 318

   55 unticked_statement: "break (T_BREAK)" expr ';' .

    $default  reduce using rule 55 (unticked_statement)


state 319

   57 unticked_statement: "continue (T_CONTINUE)" expr ';' .

    $default  reduce using rule 57 (unticked_statement)


state 320

   83 unticked_statement: "goto (T_GOTO)" "identifier (T_STRING)" ';' .

    $default  reduce using rule 83 (unticked_statement)


state 321

   25 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    namespace_name         go to state 467
    class_name             go to state 468
    common_scalar          go to state 469
    static_scalar          go to state 470
    static_class_constant  go to state 471


state 322

   59 unticked_statement: "return (T_RETURN)" expr_without_variable ';' .

    $default  reduce using rule 59 (unticked_statement)


state 323

   60 unticked_statement: "return (T_RETURN)" variable ';' .

    $default  reduce using rule 60 (unticked_statement)


state 324

   81 unticked_statement: "try (T_TRY)" @22 '{' . inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 472


state 325

   82 unticked_statement: "throw (T_THROW)" expr ';' .

    $default  reduce using rule 82 (unticked_statement)


state 326

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   22 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name .
   23                | "\\ (T_NS_SEPARATOR)" namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 473
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225

    $default  reduce using rule 22 (use_declaration)


state 327

   21 use_declaration: namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 474


state 328

   18 use_declarations: use_declarations ',' . use_declaration

    "identifier (T_STRING)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 186

    namespace_name   go to state 187
    use_declaration  go to state 475


state 329

   16 top_statement: "use (T_USE)" use_declarations ';' .

    $default  reduce using rule 16 (top_statement)


state 330

  178 global_var: '$' '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 476
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 331

  177 global_var: '$' r_variable .

    $default  reduce using rule 177 (global_var)


state 332

  425 r_variable: variable .

    $default  reduce using rule 425 (r_variable)


state 333

  174 global_var_list: global_var_list ',' . global_var

    "variable (T_VARIABLE)"  shift, and go to state 190
    '$'                      shift, and go to state 191

    global_var  go to state 477


state 334

   61 unticked_statement: "global (T_GLOBAL)" global_var_list ';' .

    $default  reduce using rule 61 (unticked_statement)


state 335

  182 static_var_list: "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    namespace_name         go to state 467
    class_name             go to state 468
    common_scalar          go to state 469
    static_scalar          go to state 478
    static_class_constant  go to state 471


state 336

  179 static_var_list: static_var_list ',' . "variable (T_VARIABLE)"
  180                | static_var_list ',' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 479


state 337

   62 unticked_statement: "static (T_STATIC)" static_var_list ';' .

    $default  reduce using rule 62 (unticked_statement)


state 338

  335 expr_without_variable: "static (T_STATIC)" function is_reference . '(' @54 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '('  shift, and go to state 480


state 339

   66 unticked_statement: "unset (T_UNSET)" '(' unset_variables . ')' ';'
   92 unset_variables: unset_variables . ',' unset_variable

    ','  shift, and go to state 481
    ')'  shift, and go to state 482


state 340

   91 unset_variables: unset_variable .

    $default  reduce using rule 91 (unset_variables)


state 341

   93 unset_variable: variable .

    $default  reduce using rule 93 (unset_variable)


state 342

  511 isset_variables: variable .

    $default  reduce using rule 511 (isset_variables)


state 343

  504 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables . ')'
  513 isset_variables: isset_variables . ',' @73 variable

    ','  shift, and go to state 483
    ')'  shift, and go to state 484


state 344

  505 internal_functions_in_yacc: "empty (T_EMPTY)" '(' variable . ')'

    ')'  shift, and go to state 485


state 345

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' . ';'

    ';'  shift, and go to state 486


state 346

  253 expr_without_variable: "list (T_LIST)" '(' @42 . assignment_list ')' '=' expr

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "list (T_LIST)"            shift, and go to state 487
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    $default  reduce using rule 479 (assignment_list_element)

    namespace_name                     go to state 141
    function_call                      go to state 97
    class_name                         go to state 142
    variable                           go to state 488
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    assignment_list                    go to state 489
    assignment_list_element            go to state 490


state 347

  328 expr_without_variable: "array (T_ARRAY)" '(' array_pair_list . ')'

    ')'  shift, and go to state 491


state 348

  496 encaps_var: "variable (T_VARIABLE)" '[' . @72 encaps_var_offset ']'

    $default  reduce using rule 495 (@72)

    @72  go to state 492


state 349

  497 encaps_var: "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 493


state 350

  393 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 393 (common_scalar)


state 351

  493 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" encaps_var .

    $default  reduce using rule 493 (encaps_list)


state 352

  406 scalar: "variable name (T_STRING_VARNAME)" .
  499 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" . '[' expr ']' '}'

    '['  shift, and go to state 494

    $default  reduce using rule 406 (scalar)


state 353

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  498 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    '}'                           shift, and go to state 495


state 354

  500 encaps_var: "{$ (T_CURLY_OPEN)" variable . '}'

    '}'  shift, and go to state 496


state 355

  491 encaps_list: encaps_list "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" .

    $default  reduce using rule 491 (encaps_list)


state 356

  413 scalar: "heredoc start (T_START_HEREDOC)" encaps_list "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 413 (scalar)


state 357

  490 encaps_list: encaps_list encaps_var .

    $default  reduce using rule 490 (encaps_list)


state 358

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  346 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name . '(' @56 function_call_parameter_list ')'
  361 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .
  409 scalar: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225
    '('                    shift, and go to state 497

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 361 (class_name)
    $default                       reduce using rule 409 (scalar)


state 359

   15 top_statement: "namespace (T_NAMESPACE)" '{' @3 . top_statement_list '}'

    $default  reduce using rule 4 (top_statement_list)

    top_statement_list  go to state 498


state 360

   11 top_statement: "namespace (T_NAMESPACE)" namespace_name ';' .

    $default  reduce using rule 11 (top_statement)


state 361

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' . @2 top_statement_list '}'

    $default  reduce using rule 12 (@2)

    @2  go to state 499


state 362

  348 function_call: "\\ (T_NS_SEPARATOR)" namespace_name '(' . @57 function_call_parameter_list ')'

    $default  reduce using rule 347 (@57)

    @57  go to state 500


state 363

  310 expr_without_variable: '(' new_expr ')' . @48 instance_call

    $default  reduce using rule 309 (@48)

    @48  go to state 501


state 364

  307 expr_without_variable: '(' expr ')' .

    $default  reduce using rule 307 (expr_without_variable)


state 365

   35 unticked_statement: '{' inner_statement_list '}' .

    $default  reduce using rule 35 (unticked_statement)


state 366

   27 inner_statement_list: inner_statement_list @4 . inner_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "final (T_FINAL)"                             shift, and go to state 54
    "abstract (T_ABSTRACT)"                       shift, and go to state 55
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 502
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                           go to state 83
    inner_statement                          go to state 503
    statement                                go to state 504
    unticked_statement                       go to state 87
    function_declaration_statement           go to state 505
    class_declaration_statement              go to state 506
    unticked_function_declaration_statement  go to state 90
    unticked_class_declaration_statement     go to state 91
    class_entry_type                         go to state 92
    interface_entry                          go to state 93
    new_expr                                 go to state 94
    expr_without_variable                    go to state 95
    function                                 go to state 96
    function_call                            go to state 97
    class_name                               go to state 98
    common_scalar                            go to state 99
    scalar                                   go to state 100
    expr                                     go to state 101
    r_variable                               go to state 102
    rw_variable                              go to state 103
    variable                                 go to state 104
    variable_without_objects                 go to state 105
    static_member                            go to state 106
    variable_class_name                      go to state 107
    array_function_dereference               go to state 108
    base_variable_with_function_calls        go to state 109
    base_variable                            go to state 110
    reference_variable                       go to state 111
    compound_variable                        go to state 112
    simple_indirect_reference                go to state 113
    internal_functions_in_yacc               go to state 114
    class_constant                           go to state 115


state 367

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  461 compound_variable: '$' '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    '}'                           shift, and go to state 507


state 368

  330 expr_without_variable: '`' backticks_expr '`' .

    $default  reduce using rule 330 (expr_without_variable)


state 369

  412 scalar: '"' encaps_list '"' .

    $default  reduce using rule 412 (scalar)


state 370

    6 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)" .

    $default  reduce using rule 6 (namespace_name)


state 371

  344 function_call: namespace_name '(' @55 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 508
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 167 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 509
    non_empty_function_call_parameter_list  go to state 510
    new_expr                                go to state 94
    expr_without_variable                   go to state 511
    function                                go to state 119
    function_call                           go to state 97
    class_name                              go to state 98
    common_scalar                           go to state 99
    scalar                                  go to state 100
    expr                                    go to state 182
    r_variable                              go to state 102
    rw_variable                             go to state 103
    variable                                go to state 512
    variable_without_objects                go to state 105
    static_member                           go to state 106
    variable_class_name                     go to state 107
    array_function_dereference              go to state 108
    base_variable_with_function_calls       go to state 109
    base_variable                           go to state 110
    reference_variable                      go to state 111
    compound_variable                       go to state 112
    simple_indirect_reference               go to state 113
    internal_functions_in_yacc              go to state 114
    class_constant                          go to state 115


state 372

   24 constant_declaration: constant_declaration ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 513


state 373

  109 extends_from: "extends (T_EXTENDS)" . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 116
    "namespace (T_NAMESPACE)"  shift, and go to state 514
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 515

    namespace_name              go to state 516
    fully_qualified_class_name  go to state 517


state 374

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from . @30 implements_list '{' class_statement_list '}'

    $default  reduce using rule 100 (@30)

    @30  go to state 518


state 375

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" @31 . interface_extends_list '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 519

    $default  reduce using rule 111 (interface_extends_list)

    interface_extends_list  go to state 520


state 376

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" . @29 '(' parameter_list ')' '{' inner_statement_list '}'

    $default  reduce using rule 98 (@29)

    @29  go to state 521


state 377

  333 expr_without_variable: function is_reference '(' . @53 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    $default  reduce using rule 332 (@53)

    @53  go to state 522


state 378

  450 array_function_dereference: function_call @69 '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 462 (dim_offset)

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 429
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    dim_offset                         go to state 523
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 379

  470 variable_name: "identifier (T_STRING)" .
  514 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    '('       reduce using rule 470 (variable_name)
    $default  reduce using rule 514 (class_constant)


state 380

  471 variable_name: '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 524
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 381

  352 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects . '(' @59 function_call_parameter_list ')'
  445 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    '('  shift, and go to state 525

    $default  reduce using rule 445 (static_member)


state 382

  443 variable_without_objects: reference_variable .
  457 reference_variable: reference_variable . '[' dim_offset ']'
  458                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 280
    '{'  shift, and go to state 281

    $default  reduce using rule 443 (variable_without_objects)


state 383

  350 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name . '(' @58 function_call_parameter_list ')'

    '('  shift, and go to state 526


state 384

  444 variable_without_objects: simple_indirect_reference . reference_variable
  473 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 34
    '$'                      shift, and go to state 282

    reference_variable  go to state 527
    compound_variable   go to state 112


state 385

  279 expr_without_variable: expr "or (T_LOGICAL_OR)" @46 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 528
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 386

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  282                      | expr "xor (T_LOGICAL_XOR)" expr .
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 282 (expr_without_variable)


state 387

  281 expr_without_variable: expr "and (T_LOGICAL_AND)" @47 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 529
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 388

  315 expr_without_variable: expr '?' ':' . @51 expr

    $default  reduce using rule 314 (@51)

    @51  go to state 530


state 389

  313 expr_without_variable: expr '?' @49 . expr ':' @50 expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 531
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 390

  275 expr_without_variable: expr "|| (T_BOOLEAN_OR)" @44 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 532
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 391

  277 expr_without_variable: expr "&& (T_BOOLEAN_AND)" @45 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 533
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 392

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  283                      | expr '|' expr .
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 283 (expr_without_variable)


state 393

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  285                      | expr '^' expr .
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 285 (expr_without_variable)


state 394

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  284                      | expr '&' expr .
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 284 (expr_without_variable)


state 395

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  299                      | expr "!== (T_IS_NOT_IDENTICAL)" expr .
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 299 (expr_without_variable)


state 396

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  298                      | expr "=== (T_IS_IDENTICAL)" expr .
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 298 (expr_without_variable)


state 397

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  301                      | expr "!= (T_IS_NOT_EQUAL)" expr .
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 301 (expr_without_variable)


state 398

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  300                      | expr "== (T_IS_EQUAL)" expr .
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 300 (expr_without_variable)


state 399

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  302                      | expr '<' expr .
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    ">> (T_SR)"                  shift, and go to state 252
    "<< (T_SL)"                  shift, and go to state 253
    '+'                          shift, and go to state 254
    '-'                          shift, and go to state 255
    '.'                          shift, and go to state 256
    '*'                          shift, and go to state 257
    '/'                          shift, and go to state 258
    '%'                          shift, and go to state 259
    "instanceof (T_INSTANCEOF)"  shift, and go to state 260

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 302 (expr_without_variable)


state 400

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  304                      | expr '>' expr .
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    ">> (T_SR)"                  shift, and go to state 252
    "<< (T_SL)"                  shift, and go to state 253
    '+'                          shift, and go to state 254
    '-'                          shift, and go to state 255
    '.'                          shift, and go to state 256
    '*'                          shift, and go to state 257
    '/'                          shift, and go to state 258
    '%'                          shift, and go to state 259
    "instanceof (T_INSTANCEOF)"  shift, and go to state 260

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 304 (expr_without_variable)


state 401

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  305                      | expr ">= (T_IS_GREATER_OR_EQUAL)" expr .
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    ">> (T_SR)"                  shift, and go to state 252
    "<< (T_SL)"                  shift, and go to state 253
    '+'                          shift, and go to state 254
    '-'                          shift, and go to state 255
    '.'                          shift, and go to state 256
    '*'                          shift, and go to state 257
    '/'                          shift, and go to state 258
    '%'                          shift, and go to state 259
    "instanceof (T_INSTANCEOF)"  shift, and go to state 260

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 305 (expr_without_variable)


state 402

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  303                      | expr "<= (T_IS_SMALLER_OR_EQUAL)" expr .
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    ">> (T_SR)"                  shift, and go to state 252
    "<< (T_SL)"                  shift, and go to state 253
    '+'                          shift, and go to state 254
    '-'                          shift, and go to state 255
    '.'                          shift, and go to state 256
    '*'                          shift, and go to state 257
    '/'                          shift, and go to state 258
    '%'                          shift, and go to state 259
    "instanceof (T_INSTANCEOF)"  shift, and go to state 260

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 303 (expr_without_variable)


state 403

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  293                      | expr ">> (T_SR)" expr .
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '+'                          shift, and go to state 254
    '-'                          shift, and go to state 255
    '.'                          shift, and go to state 256
    '*'                          shift, and go to state 257
    '/'                          shift, and go to state 258
    '%'                          shift, and go to state 259
    "instanceof (T_INSTANCEOF)"  shift, and go to state 260

    $default  reduce using rule 293 (expr_without_variable)


state 404

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  292                      | expr "<< (T_SL)" expr .
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '+'                          shift, and go to state 254
    '-'                          shift, and go to state 255
    '.'                          shift, and go to state 256
    '*'                          shift, and go to state 257
    '/'                          shift, and go to state 258
    '%'                          shift, and go to state 259
    "instanceof (T_INSTANCEOF)"  shift, and go to state 260

    $default  reduce using rule 292 (expr_without_variable)


state 405

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  287                      | expr '+' expr .
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '*'                          shift, and go to state 257
    '/'                          shift, and go to state 258
    '%'                          shift, and go to state 259
    "instanceof (T_INSTANCEOF)"  shift, and go to state 260

    $default  reduce using rule 287 (expr_without_variable)


state 406

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  288                      | expr '-' expr .
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '*'                          shift, and go to state 257
    '/'                          shift, and go to state 258
    '%'                          shift, and go to state 259
    "instanceof (T_INSTANCEOF)"  shift, and go to state 260

    $default  reduce using rule 288 (expr_without_variable)


state 407

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  286                      | expr '.' expr .
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '*'                          shift, and go to state 257
    '/'                          shift, and go to state 258
    '%'                          shift, and go to state 259
    "instanceof (T_INSTANCEOF)"  shift, and go to state 260

    $default  reduce using rule 286 (expr_without_variable)


state 408

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  289                      | expr '*' expr .
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 260

    $default  reduce using rule 289 (expr_without_variable)


state 409

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  290                      | expr '/' expr .
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 260

    $default  reduce using rule 290 (expr_without_variable)


state 410

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  291                      | expr '%' expr .
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 260

    $default  reduce using rule 291 (expr_without_variable)


state 411

  306 expr_without_variable: expr "instanceof (T_INSTANCEOF)" class_name_reference .

    $default  reduce using rule 306 (expr_without_variable)


state 412

  255 expr_without_variable: variable '=' '&' . variable
  257                      | variable '=' '&' . "new (T_NEW)" class_name_reference @43 ctor_arguments

    "new (T_NEW)"              shift, and go to state 534
    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    namespace_name                     go to state 141
    function_call                      go to state 97
    class_name                         go to state 142
    variable                           go to state 535
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113


state 413

  254 expr_without_variable: variable '=' expr .
  275                      | expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 254 (expr_without_variable)


state 414

  269 expr_without_variable: variable ">>= (T_SR_EQUAL)" expr .
  275                      | expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 269 (expr_without_variable)


state 415

  268 expr_without_variable: variable "<<= (T_SL_EQUAL)" expr .
  275                      | expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 268 (expr_without_variable)


state 416

  267 expr_without_variable: variable "^= (T_XOR_EQUAL)" expr .
  275                      | expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 267 (expr_without_variable)


state 417

  266 expr_without_variable: variable "|= (T_OR_EQUAL)" expr .
  275                      | expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 266 (expr_without_variable)


state 418

  265 expr_without_variable: variable "&= (T_AND_EQUAL)" expr .
  275                      | expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 265 (expr_without_variable)


state 419

  264 expr_without_variable: variable "%= (T_MOD_EQUAL)" expr .
  275                      | expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 264 (expr_without_variable)


state 420

  263 expr_without_variable: variable ".= (T_CONCAT_EQUAL)" expr .
  275                      | expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 263 (expr_without_variable)


state 421

  262 expr_without_variable: variable "/= (T_DIV_EQUAL)" expr .
  275                      | expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 262 (expr_without_variable)


state 422

  261 expr_without_variable: variable "*= (T_MUL_EQUAL)" expr .
  275                      | expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 261 (expr_without_variable)


state 423

  260 expr_without_variable: variable "-= (T_MINUS_EQUAL)" expr .
  275                      | expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 260 (expr_without_variable)


state 424

  259 expr_without_variable: variable "+= (T_PLUS_EQUAL)" expr .
  275                      | expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 259 (expr_without_variable)


state 425

  358 function_call: variable_without_objects '(' @62 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 508
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 167 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 536
    non_empty_function_call_parameter_list  go to state 510
    new_expr                                go to state 94
    expr_without_variable                   go to state 511
    function                                go to state 119
    function_call                           go to state 97
    class_name                              go to state 98
    common_scalar                           go to state 99
    scalar                                  go to state 100
    expr                                    go to state 182
    r_variable                              go to state 102
    rw_variable                             go to state 103
    variable                                go to state 512
    variable_without_objects                go to state 105
    static_member                           go to state 106
    variable_class_name                     go to state 107
    array_function_dereference              go to state 108
    base_variable_with_function_calls       go to state 109
    base_variable                           go to state 110
    reference_variable                      go to state 111
    compound_variable                       go to state 112
    simple_indirect_reference               go to state 113
    internal_functions_in_yacc              go to state 114
    class_constant                          go to state 115


state 426

  470 variable_name: "identifier (T_STRING)" .
  515 class_constant: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    '('       reduce using rule 470 (variable_name)
    $default  reduce using rule 515 (class_constant)


state 427

  356 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects . '(' @61 function_call_parameter_list ')'
  446 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    '('  shift, and go to state 537

    $default  reduce using rule 446 (static_member)


state 428

  354 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name . '(' @60 function_call_parameter_list ')'

    '('  shift, and go to state 538


state 429

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  463 dim_offset: expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 463 (dim_offset)


state 430

  448 array_function_dereference: array_function_dereference '[' dim_offset . ']'

    ']'  shift, and go to state 539


state 431

  430 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" @65 . object_property @66 method_or_not variable_properties

    "identifier (T_STRING)"  shift, and go to state 436
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 380
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 540
    reference_variable         go to state 382
    compound_variable          go to state 112
    object_property            go to state 541
    object_dim_list            go to state 542
    variable_name              go to state 543
    simple_indirect_reference  go to state 384


state 432

  457 reference_variable: reference_variable '[' dim_offset . ']'

    ']'  shift, and go to state 544


state 433

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  458 reference_variable: reference_variable '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    '}'                           shift, and go to state 545


state 434

  508 internal_functions_in_yacc: "eval (T_EVAL)" '(' expr ')' .

    $default  reduce using rule 508 (internal_functions_in_yacc)


state 435

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  346 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name . '(' @56 function_call_parameter_list ')'
  361 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225
    '('                    shift, and go to state 497

    $default  reduce using rule 361 (class_name)


state 436

  470 variable_name: "identifier (T_STRING)" .

    $default  reduce using rule 470 (variable_name)


state 437

  488 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    namespace_name                     go to state 141
    function_call                      go to state 97
    class_name                         go to state 142
    w_variable                         go to state 546
    variable                           go to state 292
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113


state 438

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  484 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 484 (non_empty_array_pair_list)


state 439

  487 non_empty_array_pair_list: non_empty_array_pair_list ',' '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    namespace_name                     go to state 141
    function_call                      go to state 97
    class_name                         go to state 142
    w_variable                         go to state 547
    variable                           go to state 292
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113


state 440

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  482 non_empty_array_pair_list: non_empty_array_pair_list ',' expr . "=> (T_DOUBLE_ARROW)" expr
  483                          | non_empty_array_pair_list ',' expr .
  486                          | non_empty_array_pair_list ',' expr . "=> (T_DOUBLE_ARROW)" '&' w_variable

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 548

    $default  reduce using rule 483 (non_empty_array_pair_list)


state 441

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  361 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225

    $default  reduce using rule 361 (class_name)


state 442

  445 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    $default  reduce using rule 445 (static_member)


state 443

  382 ctor_arguments: '(' . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 508
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 167 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 549
    non_empty_function_call_parameter_list  go to state 510
    new_expr                                go to state 94
    expr_without_variable                   go to state 511
    function                                go to state 119
    function_call                           go to state 97
    class_name                              go to state 98
    common_scalar                           go to state 99
    scalar                                  go to state 100
    expr                                    go to state 182
    r_variable                              go to state 102
    rw_variable                             go to state 103
    variable                                go to state 512
    variable_without_objects                go to state 105
    static_member                           go to state 106
    variable_class_name                     go to state 107
    array_function_dereference              go to state 108
    base_variable_with_function_calls       go to state 109
    base_variable                           go to state 110
    reference_variable                      go to state 111
    compound_variable                       go to state 112
    simple_indirect_reference               go to state 113
    internal_functions_in_yacc              go to state 114
    class_constant                          go to state 115


state 444

  251 new_expr: "new (T_NEW)" class_name_reference @41 ctor_arguments .

    $default  reduce using rule 251 (new_expr)


state 445

  446 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    $default  reduce using rule 446 (static_member)


state 446

  370 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" @63 . object_property @64 dynamic_class_name_variable_properties

    "identifier (T_STRING)"  shift, and go to state 436
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 380
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 540
    reference_variable         go to state 382
    compound_variable          go to state 112
    object_property            go to state 550
    object_dim_list            go to state 542
    variable_name              go to state 543
    simple_indirect_reference  go to state 384


state 447

  377 exit_expr: '(' expr ')' .

    $default  reduce using rule 377 (exit_expr)


state 448

   38 unticked_statement: "if (T_IF)" '(' expr ')' . @5 statement @6 elseif_list else_single
   41                   | "if (T_IF)" '(' expr ')' . ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    ':'  shift, and go to state 551

    $default  reduce using rule 36 (@5)

    @5  go to state 552


state 449

  232 echo_expr_list: echo_expr_list ',' expr .
  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 232 (echo_expr_list)


state 450

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" . '(' @12 expr ')' ';'

    '('  shift, and go to state 553


state 451

   44 unticked_statement: "while (T_WHILE)" '(' @9 expr . ')' @10 while_statement
  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    ')'                           shift, and go to state 554


state 452

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' . @13 for_expr ';' @14 for_expr ')' @15 for_statement

    $default  reduce using rule 48 (@13)

    @13  go to state 555


state 453

  237 non_empty_for_expr: non_empty_for_expr ',' . @38 expr

    $default  reduce using rule 236 (@38)

    @38  go to state 556


state 454

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" . @19 variable foreach_optional_arg ')' @20 foreach_statement

    $default  reduce using rule 70 (@19)

    @19  go to state 557


state 455

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" . @17 foreach_variable foreach_optional_arg ')' @18 foreach_statement

    $default  reduce using rule 67 (@17)

    @17  go to state 558


state 456

  127 declare_list: "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 559


state 457

   74 unticked_statement: "declare (T_DECLARE)" @21 '(' declare_list . ')' declare_statement
  128 declare_list: declare_list . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 560
    ')'  shift, and go to state 561


state 458

   53 unticked_statement: "switch (T_SWITCH)" '(' expr ')' . @16 switch_case_list

    $default  reduce using rule 52 (@16)

    @16  go to state 562


state 459

  399 static_scalar: '+' . static_scalar

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    namespace_name         go to state 467
    class_name             go to state 468
    common_scalar          go to state 469
    static_scalar          go to state 563
    static_class_constant  go to state 471


state 460

  400 static_scalar: '-' . static_scalar

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    namespace_name         go to state 467
    class_name             go to state 468
    common_scalar          go to state 469
    static_scalar          go to state 564
    static_class_constant  go to state 471


state 461

  402 static_scalar: '[' . static_array_pair_list ']'

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    $default  reduce using rule 415 (static_array_pair_list)

    namespace_name                    go to state 467
    class_name                        go to state 468
    common_scalar                     go to state 469
    static_scalar                     go to state 565
    static_class_constant             go to state 471
    static_array_pair_list            go to state 566
    non_empty_static_array_pair_list  go to state 567


state 462

  401 static_scalar: "array (T_ARRAY)" . '(' static_array_pair_list ')'

    '('  shift, and go to state 568


state 463

  404 static_scalar: "__CLASS__ (T_CLASS_C)" .

    $default  reduce using rule 404 (static_scalar)


state 464

  393 common_scalar: "heredoc start (T_START_HEREDOC)" . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  394              | "heredoc start (T_START_HEREDOC)" . "heredoc end (T_END_HEREDOC)"

    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 569
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 207


state 465

  361 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  397 static_scalar: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 570


state 466

  362 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name
  398 static_scalar: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 116

    namespace_name  go to state 571


state 467

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  360 class_name: namespace_name .
  396 static_scalar: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 360 (class_name)
    $default                       reduce using rule 396 (static_scalar)


state 468

  405 static_class_constant: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 572


state 469

  395 static_scalar: common_scalar .

    $default  reduce using rule 395 (static_scalar)


state 470

   25 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 25 (constant_declaration)


state 471

  403 static_scalar: static_class_constant .

    $default  reduce using rule 403 (static_scalar)


state 472

   27 inner_statement_list: inner_statement_list . @4 inner_statement
   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list . '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    '}'  shift, and go to state 573

    $default  reduce using rule 26 (@4)

    @4  go to state 366


state 473

   23 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 574


state 474

   21 use_declaration: namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 21 (use_declaration)


state 475

   18 use_declarations: use_declarations ',' use_declaration .

    $default  reduce using rule 18 (use_declarations)


state 476

  178 global_var: '$' '{' expr . '}'
  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    '}'                           shift, and go to state 575


state 477

  174 global_var_list: global_var_list ',' global_var .

    $default  reduce using rule 174 (global_var_list)


state 478

  182 static_var_list: "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 182 (static_var_list)


state 479

  179 static_var_list: static_var_list ',' "variable (T_VARIABLE)" .
  180                | static_var_list ',' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 576

    $default  reduce using rule 179 (static_var_list)


state 480

  335 expr_without_variable: "static (T_STATIC)" function is_reference '(' . @54 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    $default  reduce using rule 334 (@54)

    @54  go to state 577


state 481

   92 unset_variables: unset_variables ',' . unset_variable

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    namespace_name                     go to state 141
    unset_variable                     go to state 578
    function_call                      go to state 97
    class_name                         go to state 142
    variable                           go to state 341
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113


state 482

   66 unticked_statement: "unset (T_UNSET)" '(' unset_variables ')' . ';'

    ';'  shift, and go to state 579


state 483

  513 isset_variables: isset_variables ',' . @73 variable

    $default  reduce using rule 512 (@73)

    @73  go to state 580


state 484

  504 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables ')' .

    $default  reduce using rule 504 (internal_functions_in_yacc)


state 485

  505 internal_functions_in_yacc: "empty (T_EMPTY)" '(' variable ')' .

    $default  reduce using rule 505 (internal_functions_in_yacc)


state 486

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';' .

    $default  reduce using rule 10 (top_statement)


state 487

  478 assignment_list_element: "list (T_LIST)" . '(' @71 assignment_list ')'

    '('  shift, and go to state 581


state 488

  476 assignment_list_element: variable .

    $default  reduce using rule 476 (assignment_list_element)


state 489

  253 expr_without_variable: "list (T_LIST)" '(' @42 assignment_list . ')' '=' expr
  474 assignment_list: assignment_list . ',' assignment_list_element

    ','  shift, and go to state 582
    ')'  shift, and go to state 583


state 490

  475 assignment_list: assignment_list_element .

    $default  reduce using rule 475 (assignment_list)


state 491

  328 expr_without_variable: "array (T_ARRAY)" '(' array_pair_list ')' .

    $default  reduce using rule 328 (expr_without_variable)


state 492

  496 encaps_var: "variable (T_VARIABLE)" '[' @72 . encaps_var_offset ']'

    "identifier (T_STRING)"  shift, and go to state 584
    "variable (T_VARIABLE)"  shift, and go to state 585
    "number (T_NUM_STRING)"  shift, and go to state 586

    encaps_var_offset  go to state 587


state 493

  497 encaps_var: "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)" .

    $default  reduce using rule 497 (encaps_var)


state 494

  499 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' . expr ']' '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 588
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 495

  498 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr '}' .

    $default  reduce using rule 498 (encaps_var)


state 496

  500 encaps_var: "{$ (T_CURLY_OPEN)" variable '}' .

    $default  reduce using rule 500 (encaps_var)


state 497

  346 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name '(' . @56 function_call_parameter_list ')'

    $default  reduce using rule 345 (@56)

    @56  go to state 589


state 498

    3 top_statement_list: top_statement_list . @1 top_statement
   15 top_statement: "namespace (T_NAMESPACE)" '{' @3 top_statement_list . '}'

    '}'  shift, and go to state 590

    $default  reduce using rule 2 (@1)

    @1  go to state 4


state 499

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' @2 . top_statement_list '}'

    $default  reduce using rule 4 (top_statement_list)

    top_statement_list  go to state 591


state 500

  348 function_call: "\\ (T_NS_SEPARATOR)" namespace_name '(' @57 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 508
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 167 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 592
    non_empty_function_call_parameter_list  go to state 510
    new_expr                                go to state 94
    expr_without_variable                   go to state 511
    function                                go to state 119
    function_call                           go to state 97
    class_name                              go to state 98
    common_scalar                           go to state 99
    scalar                                  go to state 100
    expr                                    go to state 182
    r_variable                              go to state 102
    rw_variable                             go to state 103
    variable                                go to state 512
    variable_without_objects                go to state 105
    static_member                           go to state 106
    variable_class_name                     go to state 107
    array_function_dereference              go to state 108
    base_variable_with_function_calls       go to state 109
    base_variable                           go to state 110
    reference_variable                      go to state 111
    compound_variable                       go to state 112
    simple_indirect_reference               go to state 113
    internal_functions_in_yacc              go to state 114
    class_constant                          go to state 115


state 501

  310 expr_without_variable: '(' new_expr ')' @48 . instance_call

    '['                       reduce using rule 248 (@40)
    "-> (T_OBJECT_OPERATOR)"  reduce using rule 248 (@40)
    $default                  reduce using rule 247 (instance_call)

    instance_call  go to state 593
    @40            go to state 594


state 502

   32 inner_statement: "__halt_compiler (T_HALT_COMPILER)" . '(' ')' ';'

    '('  shift, and go to state 595


state 503

   27 inner_statement_list: inner_statement_list @4 inner_statement .

    $default  reduce using rule 27 (inner_statement_list)


state 504

   29 inner_statement: statement .

    $default  reduce using rule 29 (inner_statement)


state 505

   30 inner_statement: function_declaration_statement .

    $default  reduce using rule 30 (inner_statement)


state 506

   31 inner_statement: class_declaration_statement .

    $default  reduce using rule 31 (inner_statement)


state 507

  461 compound_variable: '$' '{' expr '}' .

    $default  reduce using rule 461 (compound_variable)


state 508

  170 non_empty_function_call_parameter_list: '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    namespace_name                     go to state 141
    function_call                      go to state 97
    class_name                         go to state 142
    w_variable                         go to state 596
    variable                           go to state 292
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113


state 509

  344 function_call: namespace_name '(' @55 function_call_parameter_list . ')'

    ')'  shift, and go to state 597


state 510

  166 function_call_parameter_list: non_empty_function_call_parameter_list .
  171 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list . ',' expr_without_variable
  172                                       | non_empty_function_call_parameter_list . ',' variable
  173                                       | non_empty_function_call_parameter_list . ',' '&' w_variable

    ','  shift, and go to state 598

    $default  reduce using rule 166 (function_call_parameter_list)


state 511

  168 non_empty_function_call_parameter_list: expr_without_variable .
  424 expr: expr_without_variable .

    ','       reduce using rule 168 (non_empty_function_call_parameter_list)
    ')'       reduce using rule 168 (non_empty_function_call_parameter_list)
    $default  reduce using rule 424 (expr)


state 512

  169 non_empty_function_call_parameter_list: variable .
  254 expr_without_variable: variable . '=' expr
  255                      | variable . '=' '&' variable
  257                      | variable . '=' '&' "new (T_NEW)" class_name_reference @43 ctor_arguments
  259                      | variable . "+= (T_PLUS_EQUAL)" expr
  260                      | variable . "-= (T_MINUS_EQUAL)" expr
  261                      | variable . "*= (T_MUL_EQUAL)" expr
  262                      | variable . "/= (T_DIV_EQUAL)" expr
  263                      | variable . ".= (T_CONCAT_EQUAL)" expr
  264                      | variable . "%= (T_MOD_EQUAL)" expr
  265                      | variable . "&= (T_AND_EQUAL)" expr
  266                      | variable . "|= (T_OR_EQUAL)" expr
  267                      | variable . "^= (T_XOR_EQUAL)" expr
  268                      | variable . "<<= (T_SL_EQUAL)" expr
  269                      | variable . ">>= (T_SR_EQUAL)" expr
  425 r_variable: variable .
  427 rw_variable: variable .

    '='                    shift, and go to state 264
    ">>= (T_SR_EQUAL)"     shift, and go to state 265
    "<<= (T_SL_EQUAL)"     shift, and go to state 266
    "^= (T_XOR_EQUAL)"     shift, and go to state 267
    "|= (T_OR_EQUAL)"      shift, and go to state 268
    "&= (T_AND_EQUAL)"     shift, and go to state 269
    "%= (T_MOD_EQUAL)"     shift, and go to state 270
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 271
    "/= (T_DIV_EQUAL)"     shift, and go to state 272
    "*= (T_MUL_EQUAL)"     shift, and go to state 273
    "-= (T_MINUS_EQUAL)"   shift, and go to state 274
    "+= (T_PLUS_EQUAL)"    shift, and go to state 275

    ','           reduce using rule 169 (non_empty_function_call_parameter_list)
    "-- (T_DEC)"  reduce using rule 427 (rw_variable)
    "++ (T_INC)"  reduce using rule 427 (rw_variable)
    ')'           reduce using rule 169 (non_empty_function_call_parameter_list)
    $default      reduce using rule 425 (r_variable)


state 513

   24 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    namespace_name         go to state 467
    class_name             go to state 468
    common_scalar          go to state 469
    static_scalar          go to state 599
    static_class_constant  go to state 471


state 514

  364 fully_qualified_class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 600


state 515

  365 fully_qualified_class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 116

    namespace_name  go to state 601


state 516

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  363 fully_qualified_class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225

    $default  reduce using rule 363 (fully_qualified_class_name)


state 517

  109 extends_from: "extends (T_EXTENDS)" fully_qualified_class_name .

    $default  reduce using rule 109 (extends_from)


state 518

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from @30 . implements_list '{' class_statement_list '}'

    "implements (T_IMPLEMENTS)"  shift, and go to state 602

    $default  reduce using rule 113 (implements_list)

    implements_list  go to state 603


state 519

  112 interface_extends_list: "extends (T_EXTENDS)" . interface_list

    "identifier (T_STRING)"    shift, and go to state 116
    "namespace (T_NAMESPACE)"  shift, and go to state 514
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 515

    namespace_name              go to state 516
    interface_list              go to state 604
    fully_qualified_class_name  go to state 605


state 520

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" @31 interface_extends_list . '{' class_statement_list '}'

    '{'  shift, and go to state 606


state 521

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 . '(' parameter_list ')' '{' inner_statement_list '}'

    '('  shift, and go to state 607


state 522

  333 expr_without_variable: function is_reference '(' @53 . parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 116
    "array (T_ARRAY)"          shift, and go to state 608
    "callable (T_CALLABLE)"    shift, and go to state 609
    "namespace (T_NAMESPACE)"  shift, and go to state 514
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 515

    ')'       reduce using rule 153 (parameter_list)
    $default  reduce using rule 162 (optional_class_type)

    namespace_name              go to state 516
    parameter_list              go to state 610
    non_empty_parameter_list    go to state 611
    optional_class_type         go to state 612
    fully_qualified_class_name  go to state 613


state 523

  450 array_function_dereference: function_call @69 '[' dim_offset . ']'

    ']'  shift, and go to state 614


state 524

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  471 variable_name: '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    '}'                           shift, and go to state 615


state 525

  352 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' . @59 function_call_parameter_list ')'

    $default  reduce using rule 351 (@59)

    @59  go to state 616


state 526

  350 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' . @58 function_call_parameter_list ')'

    $default  reduce using rule 349 (@58)

    @58  go to state 617


state 527

  444 variable_without_objects: simple_indirect_reference reference_variable .
  457 reference_variable: reference_variable . '[' dim_offset ']'
  458                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 280
    '{'  shift, and go to state 281

    $default  reduce using rule 444 (variable_without_objects)


state 528

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  279                      | expr "or (T_LOGICAL_OR)" @46 expr .
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 279 (expr_without_variable)


state 529

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  281                      | expr "and (T_LOGICAL_AND)" @47 expr .
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 281 (expr_without_variable)


state 530

  315 expr_without_variable: expr '?' ':' @51 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 618
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 531

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  313                      | expr '?' @49 expr . ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    ':'                           shift, and go to state 619
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260


state 532

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  275                      | expr "|| (T_BOOLEAN_OR)" @44 expr .
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 275 (expr_without_variable)


state 533

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  277                      | expr "&& (T_BOOLEAN_AND)" @45 expr .
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 277 (expr_without_variable)


state 534

  257 expr_without_variable: variable '=' '&' "new (T_NEW)" . class_name_reference @43 ctor_arguments

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 152
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 153
    '$'                        shift, and go to state 80

    namespace_name                go to state 154
    class_name                    go to state 155
    class_name_reference          go to state 620
    dynamic_class_name_reference  go to state 157
    static_member                 go to state 106
    variable_class_name           go to state 158
    base_variable                 go to state 159
    reference_variable            go to state 160
    compound_variable             go to state 112
    simple_indirect_reference     go to state 161


state 535

  255 expr_without_variable: variable '=' '&' variable .

    $default  reduce using rule 255 (expr_without_variable)


state 536

  358 function_call: variable_without_objects '(' @62 function_call_parameter_list . ')'

    ')'  shift, and go to state 621


state 537

  356 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' . @61 function_call_parameter_list ')'

    $default  reduce using rule 355 (@61)

    @61  go to state 622


state 538

  354 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' . @60 function_call_parameter_list ')'

    $default  reduce using rule 353 (@60)

    @60  go to state 623


state 539

  448 array_function_dereference: array_function_dereference '[' dim_offset ']' .

    $default  reduce using rule 448 (array_function_dereference)


state 540

  466 object_property: variable_without_objects . @70

    $default  reduce using rule 465 (@70)

    @70  go to state 624


state 541

  430 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" @65 object_property . @66 method_or_not variable_properties

    $default  reduce using rule 429 (@66)

    @66  go to state 625


state 542

  464 object_property: object_dim_list .
  467 object_dim_list: object_dim_list . '[' dim_offset ']'
  468                | object_dim_list . '{' expr '}'

    '['  shift, and go to state 626
    '{'  shift, and go to state 627

    $default  reduce using rule 464 (object_property)


state 543

  469 object_dim_list: variable_name .

    $default  reduce using rule 469 (object_dim_list)


state 544

  457 reference_variable: reference_variable '[' dim_offset ']' .

    $default  reduce using rule 457 (reference_variable)


state 545

  458 reference_variable: reference_variable '{' expr '}' .

    $default  reduce using rule 458 (reference_variable)


state 546

  488 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" '&' w_variable .

    $default  reduce using rule 488 (non_empty_array_pair_list)


state 547

  487 non_empty_array_pair_list: non_empty_array_pair_list ',' '&' w_variable .

    $default  reduce using rule 487 (non_empty_array_pair_list)


state 548

  482 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" . expr
  486                          | non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 628
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 629
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 549

  382 ctor_arguments: '(' function_call_parameter_list . ')'

    ')'  shift, and go to state 630


state 550

  370 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" @63 object_property . @64 dynamic_class_name_variable_properties

    $default  reduce using rule 369 (@64)

    @64  go to state 631


state 551

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' . @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    $default  reduce using rule 39 (@7)

    @7  go to state 632


state 552

   38 unticked_statement: "if (T_IF)" '(' expr ')' @5 . statement @6 elseif_list else_single

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 633
    unticked_statement                 go to state 87
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 101
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 553

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" '(' . @12 expr ')' ';'

    $default  reduce using rule 46 (@12)

    @12  go to state 634


state 554

   44 unticked_statement: "while (T_WHILE)" '(' @9 expr ')' . @10 while_statement

    $default  reduce using rule 43 (@10)

    @10  go to state 635


state 555

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 . for_expr ';' @14 for_expr ')' @15 for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 234 (for_expr)

    namespace_name                     go to state 83
    for_expr                           go to state 636
    non_empty_for_expr                 go to state 312
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 313
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 556

  237 non_empty_for_expr: non_empty_for_expr ',' @38 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 637
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 557

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 . variable foreach_optional_arg ')' @20 foreach_statement

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    namespace_name                     go to state 141
    function_call                      go to state 97
    class_name                         go to state 142
    variable                           go to state 638
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113


state 558

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 . foreach_variable foreach_optional_arg ')' @18 foreach_statement

    '&'                        shift, and go to state 639
    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    namespace_name                     go to state 141
    foreach_variable                   go to state 640
    function_call                      go to state 97
    class_name                         go to state 142
    variable                           go to state 641
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113


state 559

  127 declare_list: "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    namespace_name         go to state 467
    class_name             go to state 468
    common_scalar          go to state 469
    static_scalar          go to state 642
    static_class_constant  go to state 471


state 560

  128 declare_list: declare_list ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 643


state 561

   74 unticked_statement: "declare (T_DECLARE)" @21 '(' declare_list ')' . declare_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    ':'                                           shift, and go to state 644
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 645
    unticked_statement                 go to state 87
    declare_statement                  go to state 646
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 101
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 562

   53 unticked_statement: "switch (T_SWITCH)" '(' expr ')' @16 . switch_case_list

    ':'  shift, and go to state 647
    '{'  shift, and go to state 648

    switch_case_list  go to state 649


state 563

  399 static_scalar: '+' static_scalar .

    $default  reduce using rule 399 (static_scalar)


state 564

  400 static_scalar: '-' static_scalar .

    $default  reduce using rule 400 (static_scalar)


state 565

  421 non_empty_static_array_pair_list: static_scalar . "=> (T_DOUBLE_ARROW)" static_scalar
  422                                 | static_scalar .

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 650

    $default  reduce using rule 422 (non_empty_static_array_pair_list)


state 566

  402 static_scalar: '[' static_array_pair_list . ']'

    ']'  shift, and go to state 651


state 567

  416 static_array_pair_list: non_empty_static_array_pair_list . possible_comma
  419 non_empty_static_array_pair_list: non_empty_static_array_pair_list . ',' static_scalar "=> (T_DOUBLE_ARROW)" static_scalar
  420                                 | non_empty_static_array_pair_list . ',' static_scalar

    ','  shift, and go to state 652

    $default  reduce using rule 417 (possible_comma)

    possible_comma  go to state 653


state 568

  401 static_scalar: "array (T_ARRAY)" '(' . static_array_pair_list ')'

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    $default  reduce using rule 415 (static_array_pair_list)

    namespace_name                    go to state 467
    class_name                        go to state 468
    common_scalar                     go to state 469
    static_scalar                     go to state 565
    static_class_constant             go to state 471
    static_array_pair_list            go to state 654
    non_empty_static_array_pair_list  go to state 567


state 569

  393 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . "heredoc end (T_END_HEREDOC)"

    "heredoc end (T_END_HEREDOC)"  shift, and go to state 350


state 570

  361 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name
  397 static_scalar: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 116

    namespace_name  go to state 655


state 571

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  362 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .
  398 static_scalar: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 362 (class_name)
    $default                       reduce using rule 398 (static_scalar)


state 572

  405 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 656


state 573

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' . "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    "catch (T_CATCH)"  shift, and go to state 657


state 574

   23 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 23 (use_declaration)


state 575

  178 global_var: '$' '{' expr '}' .

    $default  reduce using rule 178 (global_var)


state 576

  180 static_var_list: static_var_list ',' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    namespace_name         go to state 467
    class_name             go to state 468
    common_scalar          go to state 469
    static_scalar          go to state 658
    static_class_constant  go to state 471


state 577

  335 expr_without_variable: "static (T_STATIC)" function is_reference '(' @54 . parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 116
    "array (T_ARRAY)"          shift, and go to state 608
    "callable (T_CALLABLE)"    shift, and go to state 609
    "namespace (T_NAMESPACE)"  shift, and go to state 514
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 515

    ')'       reduce using rule 153 (parameter_list)
    $default  reduce using rule 162 (optional_class_type)

    namespace_name              go to state 516
    parameter_list              go to state 659
    non_empty_parameter_list    go to state 611
    optional_class_type         go to state 612
    fully_qualified_class_name  go to state 613


state 578

   92 unset_variables: unset_variables ',' unset_variable .

    $default  reduce using rule 92 (unset_variables)


state 579

   66 unticked_statement: "unset (T_UNSET)" '(' unset_variables ')' ';' .

    $default  reduce using rule 66 (unticked_statement)


state 580

  513 isset_variables: isset_variables ',' @73 . variable

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    namespace_name                     go to state 141
    function_call                      go to state 97
    class_name                         go to state 142
    variable                           go to state 660
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113


state 581

  478 assignment_list_element: "list (T_LIST)" '(' . @71 assignment_list ')'

    $default  reduce using rule 477 (@71)

    @71  go to state 661


state 582

  474 assignment_list: assignment_list ',' . assignment_list_element

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "list (T_LIST)"            shift, and go to state 487
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    $default  reduce using rule 479 (assignment_list_element)

    namespace_name                     go to state 141
    function_call                      go to state 97
    class_name                         go to state 142
    variable                           go to state 488
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    assignment_list_element            go to state 662


state 583

  253 expr_without_variable: "list (T_LIST)" '(' @42 assignment_list ')' . '=' expr

    '='  shift, and go to state 663


state 584

  501 encaps_var_offset: "identifier (T_STRING)" .

    $default  reduce using rule 501 (encaps_var_offset)


state 585

  503 encaps_var_offset: "variable (T_VARIABLE)" .

    $default  reduce using rule 503 (encaps_var_offset)


state 586

  502 encaps_var_offset: "number (T_NUM_STRING)" .

    $default  reduce using rule 502 (encaps_var_offset)


state 587

  496 encaps_var: "variable (T_VARIABLE)" '[' @72 encaps_var_offset . ']'

    ']'  shift, and go to state 664


state 588

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  499 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr . ']' '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    ']'                           shift, and go to state 665


state 589

  346 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name '(' @56 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 508
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 167 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 666
    non_empty_function_call_parameter_list  go to state 510
    new_expr                                go to state 94
    expr_without_variable                   go to state 511
    function                                go to state 119
    function_call                           go to state 97
    class_name                              go to state 98
    common_scalar                           go to state 99
    scalar                                  go to state 100
    expr                                    go to state 182
    r_variable                              go to state 102
    rw_variable                             go to state 103
    variable                                go to state 512
    variable_without_objects                go to state 105
    static_member                           go to state 106
    variable_class_name                     go to state 107
    array_function_dereference              go to state 108
    base_variable_with_function_calls       go to state 109
    base_variable                           go to state 110
    reference_variable                      go to state 111
    compound_variable                       go to state 112
    simple_indirect_reference               go to state 113
    internal_functions_in_yacc              go to state 114
    class_constant                          go to state 115


state 590

   15 top_statement: "namespace (T_NAMESPACE)" '{' @3 top_statement_list '}' .

    $default  reduce using rule 15 (top_statement)


state 591

    3 top_statement_list: top_statement_list . @1 top_statement
   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' @2 top_statement_list . '}'

    '}'  shift, and go to state 667

    $default  reduce using rule 2 (@1)

    @1  go to state 4


state 592

  348 function_call: "\\ (T_NS_SEPARATOR)" namespace_name '(' @57 function_call_parameter_list . ')'

    ')'  shift, and go to state 668


state 593

  310 expr_without_variable: '(' new_expr ')' @48 instance_call .

    $default  reduce using rule 310 (expr_without_variable)


state 594

  249 instance_call: @40 . chaining_instance_call

    '['                       shift, and go to state 669
    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 670

    chaining_method_or_property  go to state 671
    chaining_dereference         go to state 672
    chaining_instance_call       go to state 673
    variable_property            go to state 674


state 595

   32 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' . ')' ';'

    ')'  shift, and go to state 675


state 596

  170 non_empty_function_call_parameter_list: '&' w_variable .

    $default  reduce using rule 170 (non_empty_function_call_parameter_list)


state 597

  344 function_call: namespace_name '(' @55 function_call_parameter_list ')' .

    $default  reduce using rule 344 (function_call)


state 598

  171 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' . expr_without_variable
  172                                       | non_empty_function_call_parameter_list ',' . variable
  173                                       | non_empty_function_call_parameter_list ',' . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 676
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 677
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 182
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 678
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 599

   24 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 24 (constant_declaration)


state 600

  364 fully_qualified_class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 116

    namespace_name  go to state 679


state 601

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  365 fully_qualified_class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225

    $default  reduce using rule 365 (fully_qualified_class_name)


state 602

  114 implements_list: "implements (T_IMPLEMENTS)" . interface_list

    "identifier (T_STRING)"    shift, and go to state 116
    "namespace (T_NAMESPACE)"  shift, and go to state 514
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 515

    namespace_name              go to state 516
    interface_list              go to state 680
    fully_qualified_class_name  go to state 605


state 603

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from @30 implements_list . '{' class_statement_list '}'

    '{'  shift, and go to state 681


state 604

  112 interface_extends_list: "extends (T_EXTENDS)" interface_list .
  116 interface_list: interface_list . ',' fully_qualified_class_name

    ','  shift, and go to state 682

    $default  reduce using rule 112 (interface_extends_list)


state 605

  115 interface_list: fully_qualified_class_name .

    $default  reduce using rule 115 (interface_list)


state 606

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" @31 interface_extends_list '{' . class_statement_list '}'

    $default  reduce using rule 184 (class_statement_list)

    class_statement_list  go to state 683


state 607

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' . parameter_list ')' '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 116
    "array (T_ARRAY)"          shift, and go to state 608
    "callable (T_CALLABLE)"    shift, and go to state 609
    "namespace (T_NAMESPACE)"  shift, and go to state 514
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 515

    ')'       reduce using rule 153 (parameter_list)
    $default  reduce using rule 162 (optional_class_type)

    namespace_name              go to state 516
    parameter_list              go to state 684
    non_empty_parameter_list    go to state 611
    optional_class_type         go to state 612
    fully_qualified_class_name  go to state 613


state 608

  163 optional_class_type: "array (T_ARRAY)" .

    $default  reduce using rule 163 (optional_class_type)


state 609

  164 optional_class_type: "callable (T_CALLABLE)" .

    $default  reduce using rule 164 (optional_class_type)


state 610

  333 expr_without_variable: function is_reference '(' @53 parameter_list . ')' lexical_vars '{' inner_statement_list '}'

    ')'  shift, and go to state 685


state 611

  152 parameter_list: non_empty_parameter_list .
  158 non_empty_parameter_list: non_empty_parameter_list . ',' optional_class_type "variable (T_VARIABLE)"
  159                         | non_empty_parameter_list . ',' optional_class_type '&' "variable (T_VARIABLE)"
  160                         | non_empty_parameter_list . ',' optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar
  161                         | non_empty_parameter_list . ',' optional_class_type "variable (T_VARIABLE)" '=' static_scalar

    ','  shift, and go to state 686

    $default  reduce using rule 152 (parameter_list)


state 612

  154 non_empty_parameter_list: optional_class_type . "variable (T_VARIABLE)"
  155                         | optional_class_type . '&' "variable (T_VARIABLE)"
  156                         | optional_class_type . '&' "variable (T_VARIABLE)" '=' static_scalar
  157                         | optional_class_type . "variable (T_VARIABLE)" '=' static_scalar

    '&'                      shift, and go to state 687
    "variable (T_VARIABLE)"  shift, and go to state 688


state 613

  165 optional_class_type: fully_qualified_class_name .

    $default  reduce using rule 165 (optional_class_type)


state 614

  450 array_function_dereference: function_call @69 '[' dim_offset ']' .

    $default  reduce using rule 450 (array_function_dereference)


state 615

  471 variable_name: '{' expr '}' .

    $default  reduce using rule 471 (variable_name)


state 616

  352 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @59 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 508
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 167 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 689
    non_empty_function_call_parameter_list  go to state 510
    new_expr                                go to state 94
    expr_without_variable                   go to state 511
    function                                go to state 119
    function_call                           go to state 97
    class_name                              go to state 98
    common_scalar                           go to state 99
    scalar                                  go to state 100
    expr                                    go to state 182
    r_variable                              go to state 102
    rw_variable                             go to state 103
    variable                                go to state 512
    variable_without_objects                go to state 105
    static_member                           go to state 106
    variable_class_name                     go to state 107
    array_function_dereference              go to state 108
    base_variable_with_function_calls       go to state 109
    base_variable                           go to state 110
    reference_variable                      go to state 111
    compound_variable                       go to state 112
    simple_indirect_reference               go to state 113
    internal_functions_in_yacc              go to state 114
    class_constant                          go to state 115


state 617

  350 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @58 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 508
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 167 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 690
    non_empty_function_call_parameter_list  go to state 510
    new_expr                                go to state 94
    expr_without_variable                   go to state 511
    function                                go to state 119
    function_call                           go to state 97
    class_name                              go to state 98
    common_scalar                           go to state 99
    scalar                                  go to state 100
    expr                                    go to state 182
    r_variable                              go to state 102
    rw_variable                             go to state 103
    variable                                go to state 512
    variable_without_objects                go to state 105
    static_member                           go to state 106
    variable_class_name                     go to state 107
    array_function_dereference              go to state 108
    base_variable_with_function_calls       go to state 109
    base_variable                           go to state 110
    reference_variable                      go to state 111
    compound_variable                       go to state 112
    simple_indirect_reference               go to state 113
    internal_functions_in_yacc              go to state 114
    class_constant                          go to state 115


state 618

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  315                      | expr '?' ':' @51 expr .

    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 315 (expr_without_variable)


state 619

  313 expr_without_variable: expr '?' @49 expr ':' . @50 expr

    $default  reduce using rule 312 (@50)

    @50  go to state 691


state 620

  257 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference . @43 ctor_arguments

    $default  reduce using rule 256 (@43)

    @43  go to state 692


state 621

  358 function_call: variable_without_objects '(' @62 function_call_parameter_list ')' .

    $default  reduce using rule 358 (function_call)


state 622

  356 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @61 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 508
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 167 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 693
    non_empty_function_call_parameter_list  go to state 510
    new_expr                                go to state 94
    expr_without_variable                   go to state 511
    function                                go to state 119
    function_call                           go to state 97
    class_name                              go to state 98
    common_scalar                           go to state 99
    scalar                                  go to state 100
    expr                                    go to state 182
    r_variable                              go to state 102
    rw_variable                             go to state 103
    variable                                go to state 512
    variable_without_objects                go to state 105
    static_member                           go to state 106
    variable_class_name                     go to state 107
    array_function_dereference              go to state 108
    base_variable_with_function_calls       go to state 109
    base_variable                           go to state 110
    reference_variable                      go to state 111
    compound_variable                       go to state 112
    simple_indirect_reference               go to state 113
    internal_functions_in_yacc              go to state 114
    class_constant                          go to state 115


state 623

  354 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @60 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 508
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 167 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 694
    non_empty_function_call_parameter_list  go to state 510
    new_expr                                go to state 94
    expr_without_variable                   go to state 511
    function                                go to state 119
    function_call                           go to state 97
    class_name                              go to state 98
    common_scalar                           go to state 99
    scalar                                  go to state 100
    expr                                    go to state 182
    r_variable                              go to state 102
    rw_variable                             go to state 103
    variable                                go to state 512
    variable_without_objects                go to state 105
    static_member                           go to state 106
    variable_class_name                     go to state 107
    array_function_dereference              go to state 108
    base_variable_with_function_calls       go to state 109
    base_variable                           go to state 110
    reference_variable                      go to state 111
    compound_variable                       go to state 112
    simple_indirect_reference               go to state 113
    internal_functions_in_yacc              go to state 114
    class_constant                          go to state 115


state 624

  466 object_property: variable_without_objects @70 .

    $default  reduce using rule 466 (object_property)


state 625

  430 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" @65 object_property @66 . method_or_not variable_properties

    '('  shift, and go to state 695

    $default  reduce using rule 442 (method_or_not)

    array_method_dereference  go to state 696
    method                    go to state 697
    method_or_not             go to state 698


state 626

  467 object_dim_list: object_dim_list '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 462 (dim_offset)

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 429
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    dim_offset                         go to state 699
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 627

  468 object_dim_list: object_dim_list '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 700
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 628

  486 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    namespace_name                     go to state 141
    function_call                      go to state 97
    class_name                         go to state 142
    w_variable                         go to state 701
    variable                           go to state 292
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113


state 629

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  482 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 482 (non_empty_array_pair_list)


state 630

  382 ctor_arguments: '(' function_call_parameter_list ')' .

    $default  reduce using rule 382 (ctor_arguments)


state 631

  370 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" @63 object_property @64 . dynamic_class_name_variable_properties

    $default  reduce using rule 373 (dynamic_class_name_variable_properties)

    dynamic_class_name_variable_properties  go to state 702


state 632

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 . inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 703


state 633

   38 unticked_statement: "if (T_IF)" '(' expr ')' @5 statement . @6 elseif_list else_single

    $default  reduce using rule 37 (@6)

    @6  go to state 704


state 634

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" '(' @12 . expr ')' ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 705
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 635

   44 unticked_statement: "while (T_WHILE)" '(' @9 expr ')' @10 . while_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    ':'                                           shift, and go to state 706
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 707
    unticked_statement                 go to state 87
    while_statement                    go to state 708
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 101
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 636

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr . ';' @14 for_expr ')' @15 for_statement

    ';'  shift, and go to state 709


state 637

  237 non_empty_for_expr: non_empty_for_expr ',' @38 expr .
  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 237 (non_empty_for_expr)


state 638

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 variable . foreach_optional_arg ')' @20 foreach_statement

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 710

    $default  reduce using rule 117 (foreach_optional_arg)

    foreach_optional_arg  go to state 711


state 639

  120 foreach_variable: '&' . variable

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    namespace_name                     go to state 141
    function_call                      go to state 97
    class_name                         go to state 142
    variable                           go to state 712
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113


state 640

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 foreach_variable . foreach_optional_arg ')' @18 foreach_statement

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 710

    $default  reduce using rule 117 (foreach_optional_arg)

    foreach_optional_arg  go to state 713


state 641

  119 foreach_variable: variable .

    $default  reduce using rule 119 (foreach_variable)


state 642

  127 declare_list: "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 127 (declare_list)


state 643

  128 declare_list: declare_list ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 714


state 644

  126 declare_statement: ':' . inner_statement_list "enddeclare (T_ENDDECLARE)" ';'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 715


state 645

  125 declare_statement: statement .

    $default  reduce using rule 125 (declare_statement)


state 646

   74 unticked_statement: "declare (T_DECLARE)" @21 '(' declare_list ')' declare_statement .

    $default  reduce using rule 74 (unticked_statement)


state 647

  131 switch_case_list: ':' . case_list "endswitch (T_ENDSWITCH)" ';'
  132                 | ':' . ';' case_list "endswitch (T_ENDSWITCH)" ';'

    ';'  shift, and go to state 716

    $default  reduce using rule 133 (case_list)

    case_list  go to state 717


state 648

  129 switch_case_list: '{' . case_list '}'
  130                 | '{' . ';' case_list '}'

    ';'  shift, and go to state 718

    $default  reduce using rule 133 (case_list)

    case_list  go to state 719


state 649

   53 unticked_statement: "switch (T_SWITCH)" '(' expr ')' @16 switch_case_list .

    $default  reduce using rule 53 (unticked_statement)


state 650

  421 non_empty_static_array_pair_list: static_scalar "=> (T_DOUBLE_ARROW)" . static_scalar

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    namespace_name         go to state 467
    class_name             go to state 468
    common_scalar          go to state 469
    static_scalar          go to state 720
    static_class_constant  go to state 471


state 651

  402 static_scalar: '[' static_array_pair_list ']' .

    $default  reduce using rule 402 (static_scalar)


state 652

  418 possible_comma: ',' .
  419 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' . static_scalar "=> (T_DOUBLE_ARROW)" static_scalar
  420                                 | non_empty_static_array_pair_list ',' . static_scalar

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    $default  reduce using rule 418 (possible_comma)

    namespace_name         go to state 467
    class_name             go to state 468
    common_scalar          go to state 469
    static_scalar          go to state 721
    static_class_constant  go to state 471


state 653

  416 static_array_pair_list: non_empty_static_array_pair_list possible_comma .

    $default  reduce using rule 416 (static_array_pair_list)


state 654

  401 static_scalar: "array (T_ARRAY)" '(' static_array_pair_list . ')'

    ')'  shift, and go to state 722


state 655

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  361 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .
  397 static_scalar: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 361 (class_name)
    $default                       reduce using rule 397 (static_scalar)


state 656

  405 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    $default  reduce using rule 405 (static_class_constant)


state 657

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" . '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    '('  shift, and go to state 723


state 658

  180 static_var_list: static_var_list ',' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 180 (static_var_list)


state 659

  335 expr_without_variable: "static (T_STATIC)" function is_reference '(' @54 parameter_list . ')' lexical_vars '{' inner_statement_list '}'

    ')'  shift, and go to state 724


state 660

  513 isset_variables: isset_variables ',' @73 variable .

    $default  reduce using rule 513 (isset_variables)


state 661

  478 assignment_list_element: "list (T_LIST)" '(' @71 . assignment_list ')'

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "list (T_LIST)"            shift, and go to state 487
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    $default  reduce using rule 479 (assignment_list_element)

    namespace_name                     go to state 141
    function_call                      go to state 97
    class_name                         go to state 142
    variable                           go to state 488
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    assignment_list                    go to state 725
    assignment_list_element            go to state 490


state 662

  474 assignment_list: assignment_list ',' assignment_list_element .

    $default  reduce using rule 474 (assignment_list)


state 663

  253 expr_without_variable: "list (T_LIST)" '(' @42 assignment_list ')' '=' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 726
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 664

  496 encaps_var: "variable (T_VARIABLE)" '[' @72 encaps_var_offset ']' .

    $default  reduce using rule 496 (encaps_var)


state 665

  499 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' . '}'

    '}'  shift, and go to state 727


state 666

  346 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name '(' @56 function_call_parameter_list . ')'

    ')'  shift, and go to state 728


state 667

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' @2 top_statement_list '}' .

    $default  reduce using rule 13 (top_statement)


state 668

  348 function_call: "\\ (T_NS_SEPARATOR)" namespace_name '(' @57 function_call_parameter_list ')' .

    $default  reduce using rule 348 (function_call)


state 669

  242 chaining_dereference: '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 462 (dim_offset)

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 429
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    dim_offset                         go to state 729
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 670

  435 variable_property: "-> (T_OBJECT_OPERATOR)" . object_property @67 method_or_not

    "identifier (T_STRING)"  shift, and go to state 436
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 380
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 540
    reference_variable         go to state 382
    compound_variable          go to state 112
    object_property            go to state 730
    object_dim_list            go to state 542
    variable_name              go to state 543
    simple_indirect_reference  go to state 384


state 671

  239 chaining_method_or_property: chaining_method_or_property . variable_property
  246 chaining_instance_call: chaining_method_or_property .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 670

    $default  reduce using rule 246 (chaining_instance_call)

    variable_property  go to state 731


state 672

  241 chaining_dereference: chaining_dereference . '[' dim_offset ']'
  244 chaining_instance_call: chaining_dereference . @39 chaining_method_or_property
  245                       | chaining_dereference .

    '['  shift, and go to state 732

    "-> (T_OBJECT_OPERATOR)"  reduce using rule 243 (@39)
    $default                  reduce using rule 245 (chaining_instance_call)

    @39  go to state 733


state 673

  249 instance_call: @40 chaining_instance_call .

    $default  reduce using rule 249 (instance_call)


state 674

  240 chaining_method_or_property: variable_property .

    $default  reduce using rule 240 (chaining_method_or_property)


state 675

   32 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' . ';'

    ';'  shift, and go to state 734


state 676

  173 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    namespace_name                     go to state 141
    function_call                      go to state 97
    class_name                         go to state 142
    w_variable                         go to state 735
    variable                           go to state 292
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113


state 677

  171 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' expr_without_variable .
  424 expr: expr_without_variable .

    ','       reduce using rule 171 (non_empty_function_call_parameter_list)
    ')'       reduce using rule 171 (non_empty_function_call_parameter_list)
    $default  reduce using rule 424 (expr)


state 678

  172 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' variable .
  254 expr_without_variable: variable . '=' expr
  255                      | variable . '=' '&' variable
  257                      | variable . '=' '&' "new (T_NEW)" class_name_reference @43 ctor_arguments
  259                      | variable . "+= (T_PLUS_EQUAL)" expr
  260                      | variable . "-= (T_MINUS_EQUAL)" expr
  261                      | variable . "*= (T_MUL_EQUAL)" expr
  262                      | variable . "/= (T_DIV_EQUAL)" expr
  263                      | variable . ".= (T_CONCAT_EQUAL)" expr
  264                      | variable . "%= (T_MOD_EQUAL)" expr
  265                      | variable . "&= (T_AND_EQUAL)" expr
  266                      | variable . "|= (T_OR_EQUAL)" expr
  267                      | variable . "^= (T_XOR_EQUAL)" expr
  268                      | variable . "<<= (T_SL_EQUAL)" expr
  269                      | variable . ">>= (T_SR_EQUAL)" expr
  425 r_variable: variable .
  427 rw_variable: variable .

    '='                    shift, and go to state 264
    ">>= (T_SR_EQUAL)"     shift, and go to state 265
    "<<= (T_SL_EQUAL)"     shift, and go to state 266
    "^= (T_XOR_EQUAL)"     shift, and go to state 267
    "|= (T_OR_EQUAL)"      shift, and go to state 268
    "&= (T_AND_EQUAL)"     shift, and go to state 269
    "%= (T_MOD_EQUAL)"     shift, and go to state 270
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 271
    "/= (T_DIV_EQUAL)"     shift, and go to state 272
    "*= (T_MUL_EQUAL)"     shift, and go to state 273
    "-= (T_MINUS_EQUAL)"   shift, and go to state 274
    "+= (T_PLUS_EQUAL)"    shift, and go to state 275

    ','           reduce using rule 172 (non_empty_function_call_parameter_list)
    "-- (T_DEC)"  reduce using rule 427 (rw_variable)
    "++ (T_INC)"  reduce using rule 427 (rw_variable)
    ')'           reduce using rule 172 (non_empty_function_call_parameter_list)
    $default      reduce using rule 425 (r_variable)


state 679

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  364 fully_qualified_class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225

    $default  reduce using rule 364 (fully_qualified_class_name)


state 680

  114 implements_list: "implements (T_IMPLEMENTS)" interface_list .
  116 interface_list: interface_list . ',' fully_qualified_class_name

    ','  shift, and go to state 682

    $default  reduce using rule 114 (implements_list)


state 681

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from @30 implements_list '{' . class_statement_list '}'

    $default  reduce using rule 184 (class_statement_list)

    class_statement_list  go to state 736


state 682

  116 interface_list: interface_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 116
    "namespace (T_NAMESPACE)"  shift, and go to state 514
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 515

    namespace_name              go to state 516
    fully_qualified_class_name  go to state 737


state 683

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" @31 interface_extends_list '{' class_statement_list . '}'
  183 class_statement_list: class_statement_list . class_statement

    "const (T_CONST)"          shift, and go to state 738
    "use (T_USE)"              shift, and go to state 739
    "public (T_PUBLIC)"        shift, and go to state 740
    "protected (T_PROTECTED)"  shift, and go to state 741
    "private (T_PRIVATE)"      shift, and go to state 742
    "final (T_FINAL)"          shift, and go to state 743
    "abstract (T_ABSTRACT)"    shift, and go to state 744
    "static (T_STATIC)"        shift, and go to state 745
    "var (T_VAR)"              shift, and go to state 746
    '}'                        shift, and go to state 747

    $default  reduce using rule 216 (method_modifiers)

    class_statement             go to state 748
    trait_use_statement         go to state 749
    variable_modifiers          go to state 750
    method_modifiers            go to state 751
    non_empty_member_modifiers  go to state 752
    member_modifier             go to state 753
    class_constant_declaration  go to state 754


state 684

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' parameter_list . ')' '{' inner_statement_list '}'

    ')'  shift, and go to state 755


state 685

  333 expr_without_variable: function is_reference '(' @53 parameter_list ')' . lexical_vars '{' inner_statement_list '}'

    "use (T_USE)"  shift, and go to state 756

    $default  reduce using rule 337 (lexical_vars)

    lexical_vars  go to state 757


state 686

  158 non_empty_parameter_list: non_empty_parameter_list ',' . optional_class_type "variable (T_VARIABLE)"
  159                         | non_empty_parameter_list ',' . optional_class_type '&' "variable (T_VARIABLE)"
  160                         | non_empty_parameter_list ',' . optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar
  161                         | non_empty_parameter_list ',' . optional_class_type "variable (T_VARIABLE)" '=' static_scalar

    "identifier (T_STRING)"    shift, and go to state 116
    "array (T_ARRAY)"          shift, and go to state 608
    "callable (T_CALLABLE)"    shift, and go to state 609
    "namespace (T_NAMESPACE)"  shift, and go to state 514
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 515

    $default  reduce using rule 162 (optional_class_type)

    namespace_name              go to state 516
    optional_class_type         go to state 758
    fully_qualified_class_name  go to state 613


state 687

  155 non_empty_parameter_list: optional_class_type '&' . "variable (T_VARIABLE)"
  156                         | optional_class_type '&' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 759


state 688

  154 non_empty_parameter_list: optional_class_type "variable (T_VARIABLE)" .
  157                         | optional_class_type "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 760

    $default  reduce using rule 154 (non_empty_parameter_list)


state 689

  352 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @59 function_call_parameter_list . ')'

    ')'  shift, and go to state 761


state 690

  350 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @58 function_call_parameter_list . ')'

    ')'  shift, and go to state 762


state 691

  313 expr_without_variable: expr '?' @49 expr ':' @50 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 763
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 692

  257 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference @43 . ctor_arguments

    '('  shift, and go to state 443

    $default  reduce using rule 381 (ctor_arguments)

    ctor_arguments  go to state 764


state 693

  356 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @61 function_call_parameter_list . ')'

    ')'  shift, and go to state 765


state 694

  354 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @60 function_call_parameter_list . ')'

    ')'  shift, and go to state 766


state 695

  439 method: '(' . @68 function_call_parameter_list ')'

    $default  reduce using rule 438 (@68)

    @68  go to state 767


state 696

  436 array_method_dereference: array_method_dereference . '[' dim_offset ']'
  441 method_or_not: array_method_dereference .

    '['  shift, and go to state 768

    $default  reduce using rule 441 (method_or_not)


state 697

  437 array_method_dereference: method . '[' dim_offset ']'
  440 method_or_not: method .

    '['  shift, and go to state 769

    $default  reduce using rule 440 (method_or_not)


state 698

  430 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" @65 object_property @66 method_or_not . variable_properties

    $default  reduce using rule 433 (variable_properties)

    variable_properties  go to state 770


state 699

  467 object_dim_list: object_dim_list '[' dim_offset . ']'

    ']'  shift, and go to state 771


state 700

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr
  468 object_dim_list: object_dim_list '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    '}'                           shift, and go to state 772


state 701

  486 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable .

    $default  reduce using rule 486 (non_empty_array_pair_list)


state 702

  370 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" @63 object_property @64 dynamic_class_name_variable_properties .
  372 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties . dynamic_class_name_variable_property

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 773

    $default  reduce using rule 370 (dynamic_class_name_reference)

    dynamic_class_name_variable_property  go to state 774


state 703

   27 inner_statement_list: inner_statement_list . @4 inner_statement
   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list . @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    "elseif (T_ELSEIF)"  reduce using rule 40 (@8)
    "else (T_ELSE)"      reduce using rule 40 (@8)
    "endif (T_ENDIF)"    reduce using rule 40 (@8)
    $default             reduce using rule 26 (@4)

    @4  go to state 366
    @8  go to state 775


state 704

   38 unticked_statement: "if (T_IF)" '(' expr ')' @5 statement @6 . elseif_list else_single

    $default  reduce using rule 142 (elseif_list)

    elseif_list  go to state 776


state 705

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" '(' @12 expr . ')' ';'
  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    ')'                           shift, and go to state 777


state 706

  141 while_statement: ':' . inner_statement_list "endwhile (T_ENDWHILE)" ';'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 778


state 707

  140 while_statement: statement .

    $default  reduce using rule 140 (while_statement)


state 708

   44 unticked_statement: "while (T_WHILE)" '(' @9 expr ')' @10 while_statement .

    $default  reduce using rule 44 (unticked_statement)


state 709

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' . @14 for_expr ')' @15 for_statement

    $default  reduce using rule 49 (@14)

    @14  go to state 779


state 710

  118 foreach_optional_arg: "=> (T_DOUBLE_ARROW)" . foreach_variable

    '&'                        shift, and go to state 639
    "identifier (T_STRING)"    shift, and go to state 116
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 138
    "namespace (T_NAMESPACE)"  shift, and go to state 139
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 140
    '$'                        shift, and go to state 80

    namespace_name                     go to state 141
    foreach_variable                   go to state 780
    function_call                      go to state 97
    class_name                         go to state 142
    variable                           go to state 641
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 145
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113


state 711

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg . ')' @20 foreach_statement

    ')'  shift, and go to state 781


state 712

  120 foreach_variable: '&' variable .

    $default  reduce using rule 120 (foreach_variable)


state 713

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 foreach_variable foreach_optional_arg . ')' @18 foreach_statement

    ')'  shift, and go to state 782


state 714

  128 declare_list: declare_list ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    namespace_name         go to state 467
    class_name             go to state 468
    common_scalar          go to state 469
    static_scalar          go to state 783
    static_class_constant  go to state 471


state 715

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  126 declare_statement: ':' inner_statement_list . "enddeclare (T_ENDDECLARE)" ';'

    "enddeclare (T_ENDDECLARE)"  shift, and go to state 784

    $default  reduce using rule 26 (@4)

    @4  go to state 366


state 716

  132 switch_case_list: ':' ';' . case_list "endswitch (T_ENDSWITCH)" ';'

    $default  reduce using rule 133 (case_list)

    case_list  go to state 785


state 717

  131 switch_case_list: ':' case_list . "endswitch (T_ENDSWITCH)" ';'
  135 case_list: case_list . "case (T_CASE)" expr case_separator @32 inner_statement_list
  137          | case_list . "default (T_DEFAULT)" case_separator @33 inner_statement_list

    "endswitch (T_ENDSWITCH)"  shift, and go to state 786
    "case (T_CASE)"            shift, and go to state 787
    "default (T_DEFAULT)"      shift, and go to state 788


state 718

  130 switch_case_list: '{' ';' . case_list '}'

    $default  reduce using rule 133 (case_list)

    case_list  go to state 789


state 719

  129 switch_case_list: '{' case_list . '}'
  135 case_list: case_list . "case (T_CASE)" expr case_separator @32 inner_statement_list
  137          | case_list . "default (T_DEFAULT)" case_separator @33 inner_statement_list

    "case (T_CASE)"        shift, and go to state 787
    "default (T_DEFAULT)"  shift, and go to state 788
    '}'                    shift, and go to state 790


state 720

  421 non_empty_static_array_pair_list: static_scalar "=> (T_DOUBLE_ARROW)" static_scalar .

    $default  reduce using rule 421 (non_empty_static_array_pair_list)


state 721

  419 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar . "=> (T_DOUBLE_ARROW)" static_scalar
  420                                 | non_empty_static_array_pair_list ',' static_scalar .

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 791

    $default  reduce using rule 420 (non_empty_static_array_pair_list)


state 722

  401 static_scalar: "array (T_ARRAY)" '(' static_array_pair_list ')' .

    $default  reduce using rule 401 (static_scalar)


state 723

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' . @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    $default  reduce using rule 77 (@23)

    @23  go to state 792


state 724

  335 expr_without_variable: "static (T_STATIC)" function is_reference '(' @54 parameter_list ')' . lexical_vars '{' inner_statement_list '}'

    "use (T_USE)"  shift, and go to state 756

    $default  reduce using rule 337 (lexical_vars)

    lexical_vars  go to state 793


state 725

  474 assignment_list: assignment_list . ',' assignment_list_element
  478 assignment_list_element: "list (T_LIST)" '(' @71 assignment_list . ')'

    ','  shift, and go to state 582
    ')'  shift, and go to state 794


state 726

  253 expr_without_variable: "list (T_LIST)" '(' @42 assignment_list ')' '=' expr .
  275                      | expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 253 (expr_without_variable)


state 727

  499 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' '}' .

    $default  reduce using rule 499 (encaps_var)


state 728

  346 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name '(' @56 function_call_parameter_list ')' .

    $default  reduce using rule 346 (function_call)


state 729

  242 chaining_dereference: '[' dim_offset . ']'

    ']'  shift, and go to state 795


state 730

  435 variable_property: "-> (T_OBJECT_OPERATOR)" object_property . @67 method_or_not

    $default  reduce using rule 434 (@67)

    @67  go to state 796


state 731

  239 chaining_method_or_property: chaining_method_or_property variable_property .

    $default  reduce using rule 239 (chaining_method_or_property)


state 732

  241 chaining_dereference: chaining_dereference '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 462 (dim_offset)

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 429
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    dim_offset                         go to state 797
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 733

  244 chaining_instance_call: chaining_dereference @39 . chaining_method_or_property

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 670

    chaining_method_or_property  go to state 798
    variable_property            go to state 674


state 734

   32 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';' .

    $default  reduce using rule 32 (inner_statement)


state 735

  173 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' '&' w_variable .

    $default  reduce using rule 173 (non_empty_function_call_parameter_list)


state 736

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from @30 implements_list '{' class_statement_list . '}'
  183 class_statement_list: class_statement_list . class_statement

    "const (T_CONST)"          shift, and go to state 738
    "use (T_USE)"              shift, and go to state 739
    "public (T_PUBLIC)"        shift, and go to state 740
    "protected (T_PROTECTED)"  shift, and go to state 741
    "private (T_PRIVATE)"      shift, and go to state 742
    "final (T_FINAL)"          shift, and go to state 743
    "abstract (T_ABSTRACT)"    shift, and go to state 744
    "static (T_STATIC)"        shift, and go to state 745
    "var (T_VAR)"              shift, and go to state 746
    '}'                        shift, and go to state 799

    $default  reduce using rule 216 (method_modifiers)

    class_statement             go to state 748
    trait_use_statement         go to state 749
    variable_modifiers          go to state 750
    method_modifiers            go to state 751
    non_empty_member_modifiers  go to state 752
    member_modifier             go to state 753
    class_constant_declaration  go to state 754


state 737

  116 interface_list: interface_list ',' fully_qualified_class_name .

    $default  reduce using rule 116 (interface_list)


state 738

  231 class_constant_declaration: "const (T_CONST)" . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 800


state 739

  191 trait_use_statement: "use (T_USE)" . trait_list trait_adaptations

    "identifier (T_STRING)"    shift, and go to state 116
    "namespace (T_NAMESPACE)"  shift, and go to state 514
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 515

    namespace_name              go to state 516
    trait_list                  go to state 801
    fully_qualified_class_name  go to state 802


state 740

  220 member_modifier: "public (T_PUBLIC)" .

    $default  reduce using rule 220 (member_modifier)


state 741

  221 member_modifier: "protected (T_PROTECTED)" .

    $default  reduce using rule 221 (member_modifier)


state 742

  222 member_modifier: "private (T_PRIVATE)" .

    $default  reduce using rule 222 (member_modifier)


state 743

  225 member_modifier: "final (T_FINAL)" .

    $default  reduce using rule 225 (member_modifier)


state 744

  224 member_modifier: "abstract (T_ABSTRACT)" .

    $default  reduce using rule 224 (member_modifier)


state 745

  223 member_modifier: "static (T_STATIC)" .

    $default  reduce using rule 223 (member_modifier)


state 746

  215 variable_modifiers: "var (T_VAR)" .

    $default  reduce using rule 215 (variable_modifiers)


state 747

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" @31 interface_extends_list '{' class_statement_list '}' .

    $default  reduce using rule 103 (unticked_class_declaration_statement)


state 748

  183 class_statement_list: class_statement_list class_statement .

    $default  reduce using rule 183 (class_statement_list)


state 749

  188 class_statement: trait_use_statement .

    $default  reduce using rule 188 (class_statement)


state 750

  186 class_statement: variable_modifiers . @36 class_variable_declaration ';'

    $default  reduce using rule 185 (@36)

    @36  go to state 803


state 751

  190 class_statement: method_modifiers . function is_reference "identifier (T_STRING)" @37 '(' parameter_list ')' method_body

    "function (T_FUNCTION)"  shift, and go to state 47

    function  go to state 804


state 752

  214 variable_modifiers: non_empty_member_modifiers .
  217 method_modifiers: non_empty_member_modifiers .
  219 non_empty_member_modifiers: non_empty_member_modifiers . member_modifier

    "public (T_PUBLIC)"        shift, and go to state 740
    "protected (T_PROTECTED)"  shift, and go to state 741
    "private (T_PRIVATE)"      shift, and go to state 742
    "final (T_FINAL)"          shift, and go to state 743
    "abstract (T_ABSTRACT)"    shift, and go to state 744
    "static (T_STATIC)"        shift, and go to state 745

    "function (T_FUNCTION)"  reduce using rule 217 (method_modifiers)
    $default                 reduce using rule 214 (variable_modifiers)

    member_modifier  go to state 805


state 753

  218 non_empty_member_modifiers: member_modifier .

    $default  reduce using rule 218 (non_empty_member_modifiers)


state 754

  187 class_statement: class_constant_declaration . ';'
  230 class_constant_declaration: class_constant_declaration . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 806
    ';'  shift, and go to state 807


state 755

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' parameter_list ')' . '{' inner_statement_list '}'

    '{'  shift, and go to state 808


state 756

  338 lexical_vars: "use (T_USE)" . '(' lexical_var_list ')'

    '('  shift, and go to state 809


state 757

  333 expr_without_variable: function is_reference '(' @53 parameter_list ')' lexical_vars . '{' inner_statement_list '}'

    '{'  shift, and go to state 810


state 758

  158 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type . "variable (T_VARIABLE)"
  159                         | non_empty_parameter_list ',' optional_class_type . '&' "variable (T_VARIABLE)"
  160                         | non_empty_parameter_list ',' optional_class_type . '&' "variable (T_VARIABLE)" '=' static_scalar
  161                         | non_empty_parameter_list ',' optional_class_type . "variable (T_VARIABLE)" '=' static_scalar

    '&'                      shift, and go to state 811
    "variable (T_VARIABLE)"  shift, and go to state 812


state 759

  155 non_empty_parameter_list: optional_class_type '&' "variable (T_VARIABLE)" .
  156                         | optional_class_type '&' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 813

    $default  reduce using rule 155 (non_empty_parameter_list)


state 760

  157 non_empty_parameter_list: optional_class_type "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    namespace_name         go to state 467
    class_name             go to state 468
    common_scalar          go to state 469
    static_scalar          go to state 814
    static_class_constant  go to state 471


state 761

  352 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @59 function_call_parameter_list ')' .

    $default  reduce using rule 352 (function_call)


state 762

  350 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @58 function_call_parameter_list ')' .

    $default  reduce using rule 350 (function_call)


state 763

  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  313                      | expr '?' @49 expr ':' @50 expr .
  315                      | expr . '?' ':' @51 expr

    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260

    $default  reduce using rule 313 (expr_without_variable)


state 764

  257 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference @43 ctor_arguments .

    $default  reduce using rule 257 (expr_without_variable)


state 765

  356 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @61 function_call_parameter_list ')' .

    $default  reduce using rule 356 (function_call)


state 766

  354 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @60 function_call_parameter_list ')' .

    $default  reduce using rule 354 (function_call)


state 767

  439 method: '(' @68 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 508
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 167 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 815
    non_empty_function_call_parameter_list  go to state 510
    new_expr                                go to state 94
    expr_without_variable                   go to state 511
    function                                go to state 119
    function_call                           go to state 97
    class_name                              go to state 98
    common_scalar                           go to state 99
    scalar                                  go to state 100
    expr                                    go to state 182
    r_variable                              go to state 102
    rw_variable                             go to state 103
    variable                                go to state 512
    variable_without_objects                go to state 105
    static_member                           go to state 106
    variable_class_name                     go to state 107
    array_function_dereference              go to state 108
    base_variable_with_function_calls       go to state 109
    base_variable                           go to state 110
    reference_variable                      go to state 111
    compound_variable                       go to state 112
    simple_indirect_reference               go to state 113
    internal_functions_in_yacc              go to state 114
    class_constant                          go to state 115


state 768

  436 array_method_dereference: array_method_dereference '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 462 (dim_offset)

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 429
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    dim_offset                         go to state 816
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 769

  437 array_method_dereference: method '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 462 (dim_offset)

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 429
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    dim_offset                         go to state 817
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 770

  430 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" @65 object_property @66 method_or_not variable_properties .
  432 variable_properties: variable_properties . variable_property

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 670

    $default  reduce using rule 430 (variable)

    variable_property  go to state 818


state 771

  467 object_dim_list: object_dim_list '[' dim_offset ']' .

    $default  reduce using rule 467 (object_dim_list)


state 772

  468 object_dim_list: object_dim_list '{' expr '}' .

    $default  reduce using rule 468 (object_dim_list)


state 773

  374 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" . object_property

    "identifier (T_STRING)"  shift, and go to state 436
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 380
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 540
    reference_variable         go to state 382
    compound_variable          go to state 112
    object_property            go to state 819
    object_dim_list            go to state 542
    variable_name              go to state 543
    simple_indirect_reference  go to state 384


state 774

  372 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties dynamic_class_name_variable_property .

    $default  reduce using rule 372 (dynamic_class_name_variable_properties)


state 775

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list @8 . new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    $default  reduce using rule 145 (new_elseif_list)

    new_elseif_list  go to state 820


state 776

   38 unticked_statement: "if (T_IF)" '(' expr ')' @5 statement @6 elseif_list . else_single
  144 elseif_list: elseif_list . "elseif (T_ELSEIF)" '(' expr ')' @34 statement

    "elseif (T_ELSEIF)"  shift, and go to state 821
    "else (T_ELSE)"      shift, and go to state 822

    "elseif (T_ELSEIF)"  [reduce using rule 148 (else_single)]
    "else (T_ELSE)"      [reduce using rule 148 (else_single)]
    $default             reduce using rule 148 (else_single)

    else_single  go to state 823


state 777

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" '(' @12 expr ')' . ';'

    ';'  shift, and go to state 824


state 778

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  141 while_statement: ':' inner_statement_list . "endwhile (T_ENDWHILE)" ';'

    "endwhile (T_ENDWHILE)"  shift, and go to state 825

    $default  reduce using rule 26 (@4)

    @4  go to state 366


state 779

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' @14 . for_expr ')' @15 for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 234 (for_expr)

    namespace_name                     go to state 83
    for_expr                           go to state 826
    non_empty_for_expr                 go to state 312
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 313
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 780

  118 foreach_optional_arg: "=> (T_DOUBLE_ARROW)" foreach_variable .

    $default  reduce using rule 118 (foreach_optional_arg)


state 781

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg ')' . @20 foreach_statement

    $default  reduce using rule 71 (@20)

    @20  go to state 827


state 782

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' . @18 foreach_statement

    $default  reduce using rule 68 (@18)

    @18  go to state 828


state 783

  128 declare_list: declare_list ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 128 (declare_list)


state 784

  126 declare_statement: ':' inner_statement_list "enddeclare (T_ENDDECLARE)" . ';'

    ';'  shift, and go to state 829


state 785

  132 switch_case_list: ':' ';' case_list . "endswitch (T_ENDSWITCH)" ';'
  135 case_list: case_list . "case (T_CASE)" expr case_separator @32 inner_statement_list
  137          | case_list . "default (T_DEFAULT)" case_separator @33 inner_statement_list

    "endswitch (T_ENDSWITCH)"  shift, and go to state 830
    "case (T_CASE)"            shift, and go to state 787
    "default (T_DEFAULT)"      shift, and go to state 788


state 786

  131 switch_case_list: ':' case_list "endswitch (T_ENDSWITCH)" . ';'

    ';'  shift, and go to state 831


state 787

  135 case_list: case_list "case (T_CASE)" . expr case_separator @32 inner_statement_list

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 832
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 788

  137 case_list: case_list "default (T_DEFAULT)" . case_separator @33 inner_statement_list

    ':'  shift, and go to state 833
    ';'  shift, and go to state 834

    case_separator  go to state 835


state 789

  130 switch_case_list: '{' ';' case_list . '}'
  135 case_list: case_list . "case (T_CASE)" expr case_separator @32 inner_statement_list
  137          | case_list . "default (T_DEFAULT)" case_separator @33 inner_statement_list

    "case (T_CASE)"        shift, and go to state 787
    "default (T_DEFAULT)"  shift, and go to state 788
    '}'                    shift, and go to state 836


state 790

  129 switch_case_list: '{' case_list '}' .

    $default  reduce using rule 129 (switch_case_list)


state 791

  419 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar "=> (T_DOUBLE_ARROW)" . static_scalar

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    namespace_name         go to state 467
    class_name             go to state 468
    common_scalar          go to state 469
    static_scalar          go to state 837
    static_class_constant  go to state 471


state 792

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 . fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    "identifier (T_STRING)"    shift, and go to state 116
    "namespace (T_NAMESPACE)"  shift, and go to state 514
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 515

    namespace_name              go to state 516
    fully_qualified_class_name  go to state 838


state 793

  335 expr_without_variable: "static (T_STATIC)" function is_reference '(' @54 parameter_list ')' lexical_vars . '{' inner_statement_list '}'

    '{'  shift, and go to state 839


state 794

  478 assignment_list_element: "list (T_LIST)" '(' @71 assignment_list ')' .

    $default  reduce using rule 478 (assignment_list_element)


state 795

  242 chaining_dereference: '[' dim_offset ']' .

    $default  reduce using rule 242 (chaining_dereference)


state 796

  435 variable_property: "-> (T_OBJECT_OPERATOR)" object_property @67 . method_or_not

    '('  shift, and go to state 695

    $default  reduce using rule 442 (method_or_not)

    array_method_dereference  go to state 696
    method                    go to state 697
    method_or_not             go to state 840


state 797

  241 chaining_dereference: chaining_dereference '[' dim_offset . ']'

    ']'  shift, and go to state 841


state 798

  239 chaining_method_or_property: chaining_method_or_property . variable_property
  244 chaining_instance_call: chaining_dereference @39 chaining_method_or_property .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 670

    $default  reduce using rule 244 (chaining_instance_call)

    variable_property  go to state 731


state 799

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from @30 implements_list '{' class_statement_list '}' .

    $default  reduce using rule 101 (unticked_class_declaration_statement)


state 800

  231 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 842


state 801

  191 trait_use_statement: "use (T_USE)" trait_list . trait_adaptations
  193 trait_list: trait_list . ',' fully_qualified_class_name

    ','  shift, and go to state 843
    ';'  shift, and go to state 844
    '{'  shift, and go to state 845

    trait_adaptations  go to state 846


state 802

  192 trait_list: fully_qualified_class_name .

    $default  reduce using rule 192 (trait_list)


state 803

  186 class_statement: variable_modifiers @36 . class_variable_declaration ';'

    "variable (T_VARIABLE)"  shift, and go to state 847

    class_variable_declaration  go to state 848


state 804

  190 class_statement: method_modifiers function . is_reference "identifier (T_STRING)" @37 '(' parameter_list ')' method_body

    '&'  shift, and go to state 231

    $default  reduce using rule 96 (is_reference)

    is_reference  go to state 849


state 805

  219 non_empty_member_modifiers: non_empty_member_modifiers member_modifier .

    $default  reduce using rule 219 (non_empty_member_modifiers)


state 806

  230 class_constant_declaration: class_constant_declaration ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 850


state 807

  187 class_statement: class_constant_declaration ';' .

    $default  reduce using rule 187 (class_statement)


state 808

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' parameter_list ')' '{' . inner_statement_list '}'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 851


state 809

  338 lexical_vars: "use (T_USE)" '(' . lexical_var_list ')'

    '&'                      shift, and go to state 852
    "variable (T_VARIABLE)"  shift, and go to state 853

    lexical_var_list  go to state 854


state 810

  333 expr_without_variable: function is_reference '(' @53 parameter_list ')' lexical_vars '{' . inner_statement_list '}'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 855


state 811

  159 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type '&' . "variable (T_VARIABLE)"
  160                         | non_empty_parameter_list ',' optional_class_type '&' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 856


state 812

  158 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)" .
  161                         | non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 857

    $default  reduce using rule 158 (non_empty_parameter_list)


state 813

  156 non_empty_parameter_list: optional_class_type '&' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    namespace_name         go to state 467
    class_name             go to state 468
    common_scalar          go to state 469
    static_scalar          go to state 858
    static_class_constant  go to state 471


state 814

  157 non_empty_parameter_list: optional_class_type "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 157 (non_empty_parameter_list)


state 815

  439 method: '(' @68 function_call_parameter_list . ')'

    ')'  shift, and go to state 859


state 816

  436 array_method_dereference: array_method_dereference '[' dim_offset . ']'

    ']'  shift, and go to state 860


state 817

  437 array_method_dereference: method '[' dim_offset . ']'

    ']'  shift, and go to state 861


state 818

  432 variable_properties: variable_properties variable_property .

    $default  reduce using rule 432 (variable_properties)


state 819

  374 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" object_property .

    $default  reduce using rule 374 (dynamic_class_name_variable_property)


state 820

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list @8 new_elseif_list . new_else_single "endif (T_ENDIF)" ';'
  147 new_elseif_list: new_elseif_list . "elseif (T_ELSEIF)" '(' expr ')' ':' @35 inner_statement_list

    "elseif (T_ELSEIF)"  shift, and go to state 862
    "else (T_ELSE)"      shift, and go to state 863

    $default  reduce using rule 150 (new_else_single)

    new_else_single  go to state 864


state 821

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" . '(' expr ')' @34 statement

    '('  shift, and go to state 865


state 822

  149 else_single: "else (T_ELSE)" . statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 866
    unticked_statement                 go to state 87
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 101
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 823

   38 unticked_statement: "if (T_IF)" '(' expr ')' @5 statement @6 elseif_list else_single .

    $default  reduce using rule 38 (unticked_statement)


state 824

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" '(' @12 expr ')' ';' .

    $default  reduce using rule 47 (unticked_statement)


state 825

  141 while_statement: ':' inner_statement_list "endwhile (T_ENDWHILE)" . ';'

    ';'  shift, and go to state 867


state 826

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' @14 for_expr . ')' @15 for_statement

    ')'  shift, and go to state 868


state 827

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg ')' @20 . foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    ':'                                           shift, and go to state 869
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 870
    unticked_statement                 go to state 87
    foreach_statement                  go to state 871
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 101
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 828

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' @18 . foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    ':'                                           shift, and go to state 869
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 870
    unticked_statement                 go to state 87
    foreach_statement                  go to state 872
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 101
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 829

  126 declare_statement: ':' inner_statement_list "enddeclare (T_ENDDECLARE)" ';' .

    $default  reduce using rule 126 (declare_statement)


state 830

  132 switch_case_list: ':' ';' case_list "endswitch (T_ENDSWITCH)" . ';'

    ';'  shift, and go to state 873


state 831

  131 switch_case_list: ':' case_list "endswitch (T_ENDSWITCH)" ';' .

    $default  reduce using rule 131 (switch_case_list)


state 832

  135 case_list: case_list "case (T_CASE)" expr . case_separator @32 inner_statement_list
  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    ':'                           shift, and go to state 833
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    ';'                           shift, and go to state 834

    case_separator  go to state 874


state 833

  138 case_separator: ':' .

    $default  reduce using rule 138 (case_separator)


state 834

  139 case_separator: ';' .

    $default  reduce using rule 139 (case_separator)


state 835

  137 case_list: case_list "default (T_DEFAULT)" case_separator . @33 inner_statement_list

    $default  reduce using rule 136 (@33)

    @33  go to state 875


state 836

  130 switch_case_list: '{' ';' case_list '}' .

    $default  reduce using rule 130 (switch_case_list)


state 837

  419 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar "=> (T_DOUBLE_ARROW)" static_scalar .

    $default  reduce using rule 419 (non_empty_static_array_pair_list)


state 838

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name . @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    $default  reduce using rule 78 (@24)

    @24  go to state 876


state 839

  335 expr_without_variable: "static (T_STATIC)" function is_reference '(' @54 parameter_list ')' lexical_vars '{' . inner_statement_list '}'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 877


state 840

  435 variable_property: "-> (T_OBJECT_OPERATOR)" object_property @67 method_or_not .

    $default  reduce using rule 435 (variable_property)


state 841

  241 chaining_dereference: chaining_dereference '[' dim_offset ']' .

    $default  reduce using rule 241 (chaining_dereference)


state 842

  231 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    namespace_name         go to state 467
    class_name             go to state 468
    common_scalar          go to state 469
    static_scalar          go to state 878
    static_class_constant  go to state 471


state 843

  193 trait_list: trait_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 116
    "namespace (T_NAMESPACE)"  shift, and go to state 514
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 515

    namespace_name              go to state 516
    fully_qualified_class_name  go to state 879


state 844

  194 trait_adaptations: ';' .

    $default  reduce using rule 194 (trait_adaptations)


state 845

  195 trait_adaptations: '{' . trait_adaptation_list '}'

    "identifier (T_STRING)"    shift, and go to state 880
    "namespace (T_NAMESPACE)"  shift, and go to state 514
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 515

    $default  reduce using rule 196 (trait_adaptation_list)

    namespace_name                          go to state 516
    trait_adaptation_list                   go to state 881
    non_empty_trait_adaptation_list         go to state 882
    trait_adaptation_statement              go to state 883
    trait_precedence                        go to state 884
    trait_method_reference                  go to state 885
    trait_method_reference_fully_qualified  go to state 886
    trait_alias                             go to state 887
    fully_qualified_class_name              go to state 888


state 846

  191 trait_use_statement: "use (T_USE)" trait_list trait_adaptations .

    $default  reduce using rule 191 (trait_use_statement)


state 847

  228 class_variable_declaration: "variable (T_VARIABLE)" .
  229                           | "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 889

    $default  reduce using rule 228 (class_variable_declaration)


state 848

  186 class_statement: variable_modifiers @36 class_variable_declaration . ';'
  226 class_variable_declaration: class_variable_declaration . ',' "variable (T_VARIABLE)"
  227                           | class_variable_declaration . ',' "variable (T_VARIABLE)" '=' static_scalar

    ','  shift, and go to state 890
    ';'  shift, and go to state 891


state 849

  190 class_statement: method_modifiers function is_reference . "identifier (T_STRING)" @37 '(' parameter_list ')' method_body

    "identifier (T_STRING)"  shift, and go to state 892


state 850

  230 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 893


state 851

   27 inner_statement_list: inner_statement_list . @4 inner_statement
   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' parameter_list ')' '{' inner_statement_list . '}'

    '}'  shift, and go to state 894

    $default  reduce using rule 26 (@4)

    @4  go to state 366


state 852

  342 lexical_var_list: '&' . "variable (T_VARIABLE)"

    "variable (T_VARIABLE)"  shift, and go to state 895


state 853

  341 lexical_var_list: "variable (T_VARIABLE)" .

    $default  reduce using rule 341 (lexical_var_list)


state 854

  338 lexical_vars: "use (T_USE)" '(' lexical_var_list . ')'
  339 lexical_var_list: lexical_var_list . ',' "variable (T_VARIABLE)"
  340                 | lexical_var_list . ',' '&' "variable (T_VARIABLE)"

    ','  shift, and go to state 896
    ')'  shift, and go to state 897


state 855

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  333 expr_without_variable: function is_reference '(' @53 parameter_list ')' lexical_vars '{' inner_statement_list . '}'

    '}'  shift, and go to state 898

    $default  reduce using rule 26 (@4)

    @4  go to state 366


state 856

  159 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)" .
  160                         | non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 899

    $default  reduce using rule 159 (non_empty_parameter_list)


state 857

  161 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    namespace_name         go to state 467
    class_name             go to state 468
    common_scalar          go to state 469
    static_scalar          go to state 900
    static_class_constant  go to state 471


state 858

  156 non_empty_parameter_list: optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 156 (non_empty_parameter_list)


state 859

  439 method: '(' @68 function_call_parameter_list ')' .

    $default  reduce using rule 439 (method)


state 860

  436 array_method_dereference: array_method_dereference '[' dim_offset ']' .

    $default  reduce using rule 436 (array_method_dereference)


state 861

  437 array_method_dereference: method '[' dim_offset ']' .

    $default  reduce using rule 437 (array_method_dereference)


state 862

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" . '(' expr ')' ':' @35 inner_statement_list

    '('  shift, and go to state 901


state 863

  151 new_else_single: "else (T_ELSE)" . ':' inner_statement_list

    ':'  shift, and go to state 902


state 864

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single . "endif (T_ENDIF)" ';'

    "endif (T_ENDIF)"  shift, and go to state 903


state 865

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' . expr ')' @34 statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 904
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 866

  149 else_single: "else (T_ELSE)" statement .

    $default  reduce using rule 149 (else_single)


state 867

  141 while_statement: ':' inner_statement_list "endwhile (T_ENDWHILE)" ';' .

    $default  reduce using rule 141 (while_statement)


state 868

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' @14 for_expr ')' . @15 for_statement

    $default  reduce using rule 50 (@15)

    @15  go to state 905


state 869

  124 foreach_statement: ':' . inner_statement_list "endforeach (T_ENDFOREACH)" ';'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 906


state 870

  123 foreach_statement: statement .

    $default  reduce using rule 123 (foreach_statement)


state 871

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg ')' @20 foreach_statement .

    $default  reduce using rule 72 (unticked_statement)


state 872

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' @18 foreach_statement .

    $default  reduce using rule 69 (unticked_statement)


state 873

  132 switch_case_list: ':' ';' case_list "endswitch (T_ENDSWITCH)" ';' .

    $default  reduce using rule 132 (switch_case_list)


state 874

  135 case_list: case_list "case (T_CASE)" expr case_separator . @32 inner_statement_list

    $default  reduce using rule 134 (@32)

    @32  go to state 907


state 875

  137 case_list: case_list "default (T_DEFAULT)" case_separator @33 . inner_statement_list

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 908


state 876

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 . "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    "variable (T_VARIABLE)"  shift, and go to state 909


state 877

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  335 expr_without_variable: "static (T_STATIC)" function is_reference '(' @54 parameter_list ')' lexical_vars '{' inner_statement_list . '}'

    '}'  shift, and go to state 910

    $default  reduce using rule 26 (@4)

    @4  go to state 366


state 878

  231 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 231 (class_constant_declaration)


state 879

  193 trait_list: trait_list ',' fully_qualified_class_name .

    $default  reduce using rule 193 (trait_list)


state 880

    5 namespace_name: "identifier (T_STRING)" .
  205 trait_method_reference: "identifier (T_STRING)" .

    "as (T_AS)"  reduce using rule 205 (trait_method_reference)
    $default     reduce using rule 5 (namespace_name)


state 881

  195 trait_adaptations: '{' trait_adaptation_list . '}'

    '}'  shift, and go to state 911


state 882

  197 trait_adaptation_list: non_empty_trait_adaptation_list .
  199 non_empty_trait_adaptation_list: non_empty_trait_adaptation_list . trait_adaptation_statement

    "identifier (T_STRING)"    shift, and go to state 880
    "namespace (T_NAMESPACE)"  shift, and go to state 514
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 515

    $default  reduce using rule 197 (trait_adaptation_list)

    namespace_name                          go to state 516
    trait_adaptation_statement              go to state 912
    trait_precedence                        go to state 884
    trait_method_reference                  go to state 885
    trait_method_reference_fully_qualified  go to state 886
    trait_alias                             go to state 887
    fully_qualified_class_name              go to state 888


state 883

  198 non_empty_trait_adaptation_list: trait_adaptation_statement .

    $default  reduce using rule 198 (non_empty_trait_adaptation_list)


state 884

  200 trait_adaptation_statement: trait_precedence . ';'

    ';'  shift, and go to state 913


state 885

  208 trait_alias: trait_method_reference . "as (T_AS)" trait_modifiers "identifier (T_STRING)"
  209            | trait_method_reference . "as (T_AS)" member_modifier

    "as (T_AS)"  shift, and go to state 914


state 886

  202 trait_precedence: trait_method_reference_fully_qualified . "insteadof (T_INSTEADOF)" trait_reference_list
  206 trait_method_reference: trait_method_reference_fully_qualified .

    "insteadof (T_INSTEADOF)"  shift, and go to state 915

    $default  reduce using rule 206 (trait_method_reference)


state 887

  201 trait_adaptation_statement: trait_alias . ';'

    ';'  shift, and go to state 916


state 888

  207 trait_method_reference_fully_qualified: fully_qualified_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 917


state 889

  229 class_variable_declaration: "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    namespace_name         go to state 467
    class_name             go to state 468
    common_scalar          go to state 469
    static_scalar          go to state 918
    static_class_constant  go to state 471


state 890

  226 class_variable_declaration: class_variable_declaration ',' . "variable (T_VARIABLE)"
  227                           | class_variable_declaration ',' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 919


state 891

  186 class_statement: variable_modifiers @36 class_variable_declaration ';' .

    $default  reduce using rule 186 (class_statement)


state 892

  190 class_statement: method_modifiers function is_reference "identifier (T_STRING)" . @37 '(' parameter_list ')' method_body

    $default  reduce using rule 189 (@37)

    @37  go to state 920


state 893

  230 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    namespace_name         go to state 467
    class_name             go to state 468
    common_scalar          go to state 469
    static_scalar          go to state 921
    static_class_constant  go to state 471


state 894

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' parameter_list ')' '{' inner_statement_list '}' .

    $default  reduce using rule 99 (unticked_function_declaration_statement)


state 895

  342 lexical_var_list: '&' "variable (T_VARIABLE)" .

    $default  reduce using rule 342 (lexical_var_list)


state 896

  339 lexical_var_list: lexical_var_list ',' . "variable (T_VARIABLE)"
  340                 | lexical_var_list ',' . '&' "variable (T_VARIABLE)"

    '&'                      shift, and go to state 922
    "variable (T_VARIABLE)"  shift, and go to state 923


state 897

  338 lexical_vars: "use (T_USE)" '(' lexical_var_list ')' .

    $default  reduce using rule 338 (lexical_vars)


state 898

  333 expr_without_variable: function is_reference '(' @53 parameter_list ')' lexical_vars '{' inner_statement_list '}' .

    $default  reduce using rule 333 (expr_without_variable)


state 899

  160 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    namespace_name         go to state 467
    class_name             go to state 468
    common_scalar          go to state 469
    static_scalar          go to state 924
    static_class_constant  go to state 471


state 900

  161 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 161 (non_empty_parameter_list)


state 901

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' . expr ')' ':' @35 inner_statement_list

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 117
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 925
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 902

  151 new_else_single: "else (T_ELSE)" ':' . inner_statement_list

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 926


state 903

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" . ';'

    ';'  shift, and go to state 927


state 904

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' expr . ')' @34 statement
  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    ')'                           shift, and go to state 928


state 905

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' @14 for_expr ')' @15 . for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    ':'                                           shift, and go to state 929
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 930
    unticked_statement                 go to state 87
    for_statement                      go to state 931
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 101
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 906

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  124 foreach_statement: ':' inner_statement_list . "endforeach (T_ENDFOREACH)" ';'

    "endforeach (T_ENDFOREACH)"  shift, and go to state 932

    $default  reduce using rule 26 (@4)

    @4  go to state 366


state 907

  135 case_list: case_list "case (T_CASE)" expr case_separator @32 . inner_statement_list

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 933


state 908

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  137 case_list: case_list "default (T_DEFAULT)" case_separator @33 inner_statement_list .

    "endswitch (T_ENDSWITCH)"  reduce using rule 137 (case_list)
    "case (T_CASE)"            reduce using rule 137 (case_list)
    "default (T_DEFAULT)"      reduce using rule 137 (case_list)
    '}'                        reduce using rule 137 (case_list)
    $default                   reduce using rule 26 (@4)

    @4  go to state 366


state 909

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" . ')' @25 '{' inner_statement_list '}' @26 additional_catches

    ')'  shift, and go to state 934


state 910

  335 expr_without_variable: "static (T_STATIC)" function is_reference '(' @54 parameter_list ')' lexical_vars '{' inner_statement_list '}' .

    $default  reduce using rule 335 (expr_without_variable)


state 911

  195 trait_adaptations: '{' trait_adaptation_list '}' .

    $default  reduce using rule 195 (trait_adaptations)


state 912

  199 non_empty_trait_adaptation_list: non_empty_trait_adaptation_list trait_adaptation_statement .

    $default  reduce using rule 199 (non_empty_trait_adaptation_list)


state 913

  200 trait_adaptation_statement: trait_precedence ';' .

    $default  reduce using rule 200 (trait_adaptation_statement)


state 914

  208 trait_alias: trait_method_reference "as (T_AS)" . trait_modifiers "identifier (T_STRING)"
  209            | trait_method_reference "as (T_AS)" . member_modifier

    "public (T_PUBLIC)"        shift, and go to state 740
    "protected (T_PROTECTED)"  shift, and go to state 741
    "private (T_PRIVATE)"      shift, and go to state 742
    "final (T_FINAL)"          shift, and go to state 743
    "abstract (T_ABSTRACT)"    shift, and go to state 744
    "static (T_STATIC)"        shift, and go to state 745

    $default  reduce using rule 210 (trait_modifiers)

    trait_modifiers  go to state 935
    member_modifier  go to state 936


state 915

  202 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" . trait_reference_list

    "identifier (T_STRING)"    shift, and go to state 116
    "namespace (T_NAMESPACE)"  shift, and go to state 514
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 515

    namespace_name              go to state 516
    trait_reference_list        go to state 937
    fully_qualified_class_name  go to state 938


state 916

  201 trait_adaptation_statement: trait_alias ';' .

    $default  reduce using rule 201 (trait_adaptation_statement)


state 917

  207 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 939


state 918

  229 class_variable_declaration: "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 229 (class_variable_declaration)


state 919

  226 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" .
  227                           | class_variable_declaration ',' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 940

    $default  reduce using rule 226 (class_variable_declaration)


state 920

  190 class_statement: method_modifiers function is_reference "identifier (T_STRING)" @37 . '(' parameter_list ')' method_body

    '('  shift, and go to state 941


state 921

  230 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 230 (class_constant_declaration)


state 922

  340 lexical_var_list: lexical_var_list ',' '&' . "variable (T_VARIABLE)"

    "variable (T_VARIABLE)"  shift, and go to state 942


state 923

  339 lexical_var_list: lexical_var_list ',' "variable (T_VARIABLE)" .

    $default  reduce using rule 339 (lexical_var_list)


state 924

  160 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 160 (non_empty_parameter_list)


state 925

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr . ')' ':' @35 inner_statement_list
  275 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @44 expr
  277                      | expr . "&& (T_BOOLEAN_AND)" @45 expr
  279                      | expr . "or (T_LOGICAL_OR)" @46 expr
  281                      | expr . "and (T_LOGICAL_AND)" @47 expr
  282                      | expr . "xor (T_LOGICAL_XOR)" expr
  283                      | expr . '|' expr
  284                      | expr . '&' expr
  285                      | expr . '^' expr
  286                      | expr . '.' expr
  287                      | expr . '+' expr
  288                      | expr . '-' expr
  289                      | expr . '*' expr
  290                      | expr . '/' expr
  291                      | expr . '%' expr
  292                      | expr . "<< (T_SL)" expr
  293                      | expr . ">> (T_SR)" expr
  298                      | expr . "=== (T_IS_IDENTICAL)" expr
  299                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  300                      | expr . "== (T_IS_EQUAL)" expr
  301                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  302                      | expr . '<' expr
  303                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  304                      | expr . '>' expr
  305                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  306                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  313                      | expr . '?' @49 expr ':' @50 expr
  315                      | expr . '?' ':' @51 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 235
    "xor (T_LOGICAL_XOR)"         shift, and go to state 236
    "and (T_LOGICAL_AND)"         shift, and go to state 237
    '?'                           shift, and go to state 238
    "|| (T_BOOLEAN_OR)"           shift, and go to state 239
    "&& (T_BOOLEAN_AND)"          shift, and go to state 240
    '|'                           shift, and go to state 241
    '^'                           shift, and go to state 242
    '&'                           shift, and go to state 243
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 244
    "=== (T_IS_IDENTICAL)"        shift, and go to state 245
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 246
    "== (T_IS_EQUAL)"             shift, and go to state 247
    '<'                           shift, and go to state 248
    '>'                           shift, and go to state 249
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 250
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 251
    ">> (T_SR)"                   shift, and go to state 252
    "<< (T_SL)"                   shift, and go to state 253
    '+'                           shift, and go to state 254
    '-'                           shift, and go to state 255
    '.'                           shift, and go to state 256
    '*'                           shift, and go to state 257
    '/'                           shift, and go to state 258
    '%'                           shift, and go to state 259
    "instanceof (T_INSTANCEOF)"   shift, and go to state 260
    ')'                           shift, and go to state 943


state 926

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  151 new_else_single: "else (T_ELSE)" ':' inner_statement_list .

    "endif (T_ENDIF)"  reduce using rule 151 (new_else_single)
    $default           reduce using rule 26 (@4)

    @4  go to state 366


state 927

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';' .

    $default  reduce using rule 41 (unticked_statement)


state 928

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' expr ')' . @34 statement

    $default  reduce using rule 143 (@34)

    @34  go to state 944


state 929

  122 for_statement: ':' . inner_statement_list "endfor (T_ENDFOR)" ';'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 945


state 930

  121 for_statement: statement .

    $default  reduce using rule 121 (for_statement)


state 931

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' @14 for_expr ')' @15 for_statement .

    $default  reduce using rule 51 (unticked_statement)


state 932

  124 foreach_statement: ':' inner_statement_list "endforeach (T_ENDFOREACH)" . ';'

    ';'  shift, and go to state 946


state 933

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  135 case_list: case_list "case (T_CASE)" expr case_separator @32 inner_statement_list .

    "endswitch (T_ENDSWITCH)"  reduce using rule 135 (case_list)
    "case (T_CASE)"            reduce using rule 135 (case_list)
    "default (T_DEFAULT)"      reduce using rule 135 (case_list)
    '}'                        reduce using rule 135 (case_list)
    $default                   reduce using rule 26 (@4)

    @4  go to state 366


state 934

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' . @25 '{' inner_statement_list '}' @26 additional_catches

    $default  reduce using rule 79 (@25)

    @25  go to state 947


state 935

  208 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 948


state 936

  209 trait_alias: trait_method_reference "as (T_AS)" member_modifier .
  211 trait_modifiers: member_modifier .

    "identifier (T_STRING)"  reduce using rule 211 (trait_modifiers)
    $default                 reduce using rule 209 (trait_alias)


state 937

  202 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" trait_reference_list .
  204 trait_reference_list: trait_reference_list . ',' fully_qualified_class_name

    ','  shift, and go to state 949

    $default  reduce using rule 202 (trait_precedence)


state 938

  203 trait_reference_list: fully_qualified_class_name .

    $default  reduce using rule 203 (trait_reference_list)


state 939

  207 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    $default  reduce using rule 207 (trait_method_reference_fully_qualified)


state 940

  227 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 459
    '-'                                           shift, and go to state 460
    '['                                           shift, and go to state 461
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 116
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 138
    "array (T_ARRAY)"                             shift, and go to state 462
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 463
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 464
    "namespace (T_NAMESPACE)"                     shift, and go to state 465
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 466

    namespace_name         go to state 467
    class_name             go to state 468
    common_scalar          go to state 469
    static_scalar          go to state 950
    static_class_constant  go to state 471


state 941

  190 class_statement: method_modifiers function is_reference "identifier (T_STRING)" @37 '(' . parameter_list ')' method_body

    "identifier (T_STRING)"    shift, and go to state 116
    "array (T_ARRAY)"          shift, and go to state 608
    "callable (T_CALLABLE)"    shift, and go to state 609
    "namespace (T_NAMESPACE)"  shift, and go to state 514
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 515

    ')'       reduce using rule 153 (parameter_list)
    $default  reduce using rule 162 (optional_class_type)

    namespace_name              go to state 516
    parameter_list              go to state 951
    non_empty_parameter_list    go to state 611
    optional_class_type         go to state 612
    fully_qualified_class_name  go to state 613


state 942

  340 lexical_var_list: lexical_var_list ',' '&' "variable (T_VARIABLE)" .

    $default  reduce using rule 340 (lexical_var_list)


state 943

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr ')' . ':' @35 inner_statement_list

    ':'  shift, and go to state 952


state 944

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' expr ')' @34 . statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 118
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 953
    unticked_statement                 go to state 87
    new_expr                           go to state 94
    expr_without_variable              go to state 95
    function                           go to state 119
    function_call                      go to state 97
    class_name                         go to state 98
    common_scalar                      go to state 99
    scalar                             go to state 100
    expr                               go to state 101
    r_variable                         go to state 102
    rw_variable                        go to state 103
    variable                           go to state 104
    variable_without_objects           go to state 105
    static_member                      go to state 106
    variable_class_name                go to state 107
    array_function_dereference         go to state 108
    base_variable_with_function_calls  go to state 109
    base_variable                      go to state 110
    reference_variable                 go to state 111
    compound_variable                  go to state 112
    simple_indirect_reference          go to state 113
    internal_functions_in_yacc         go to state 114
    class_constant                     go to state 115


state 945

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  122 for_statement: ':' inner_statement_list . "endfor (T_ENDFOR)" ';'

    "endfor (T_ENDFOR)"  shift, and go to state 954

    $default  reduce using rule 26 (@4)

    @4  go to state 366


state 946

  124 foreach_statement: ':' inner_statement_list "endforeach (T_ENDFOREACH)" ';' .

    $default  reduce using rule 124 (foreach_statement)


state 947

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 . '{' inner_statement_list '}' @26 additional_catches

    '{'  shift, and go to state 955


state 948

  208 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers "identifier (T_STRING)" .

    $default  reduce using rule 208 (trait_alias)


state 949

  204 trait_reference_list: trait_reference_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 116
    "namespace (T_NAMESPACE)"  shift, and go to state 514
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 515

    namespace_name              go to state 516
    fully_qualified_class_name  go to state 956


state 950

  227 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 227 (class_variable_declaration)


state 951

  190 class_statement: method_modifiers function is_reference "identifier (T_STRING)" @37 '(' parameter_list . ')' method_body

    ')'  shift, and go to state 957


state 952

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr ')' ':' . @35 inner_statement_list

    $default  reduce using rule 146 (@35)

    @35  go to state 958


state 953

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' expr ')' @34 statement .

    $default  reduce using rule 144 (elseif_list)


state 954

  122 for_statement: ':' inner_statement_list "endfor (T_ENDFOR)" . ';'

    ';'  shift, and go to state 959


state 955

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' . inner_statement_list '}' @26 additional_catches

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 960


state 956

  204 trait_reference_list: trait_reference_list ',' fully_qualified_class_name .

    $default  reduce using rule 204 (trait_reference_list)


state 957

  190 class_statement: method_modifiers function is_reference "identifier (T_STRING)" @37 '(' parameter_list ')' . method_body

    ';'  shift, and go to state 961
    '{'  shift, and go to state 962

    method_body  go to state 963


state 958

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr ')' ':' @35 . inner_statement_list

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 964


state 959

  122 for_statement: ':' inner_statement_list "endfor (T_ENDFOR)" ';' .

    $default  reduce using rule 122 (for_statement)


state 960

   27 inner_statement_list: inner_statement_list . @4 inner_statement
   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list . '}' @26 additional_catches

    '}'  shift, and go to state 965

    $default  reduce using rule 26 (@4)

    @4  go to state 366


state 961

  212 method_body: ';' .

    $default  reduce using rule 212 (method_body)


state 962

  213 method_body: '{' . inner_statement_list '}'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 966


state 963

  190 class_statement: method_modifiers function is_reference "identifier (T_STRING)" @37 '(' parameter_list ')' method_body .

    $default  reduce using rule 190 (class_statement)


state 964

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr ')' ':' @35 inner_statement_list .

    "elseif (T_ELSEIF)"  reduce using rule 147 (new_elseif_list)
    "else (T_ELSE)"      reduce using rule 147 (new_elseif_list)
    "endif (T_ENDIF)"    reduce using rule 147 (new_elseif_list)
    $default             reduce using rule 26 (@4)

    @4  go to state 366


state 965

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' . @26 additional_catches

    $default  reduce using rule 80 (@26)

    @26  go to state 967


state 966

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  213 method_body: '{' inner_statement_list . '}'

    '}'  shift, and go to state 968

    $default  reduce using rule 26 (@4)

    @4  go to state 366


state 967

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 . additional_catches

    "catch (T_CATCH)"  shift, and go to state 969

    $default  reduce using rule 85 (additional_catches)

    additional_catches            go to state 970
    non_empty_additional_catches  go to state 971
    additional_catch              go to state 972


state 968

  213 method_body: '{' inner_statement_list '}' .

    $default  reduce using rule 213 (method_body)


state 969

   90 additional_catch: "catch (T_CATCH)" . '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list '}'

    '('  shift, and go to state 973


state 970

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches .

    $default  reduce using rule 81 (unticked_statement)


state 971

   84 additional_catches: non_empty_additional_catches .
   87 non_empty_additional_catches: non_empty_additional_catches . additional_catch

    "catch (T_CATCH)"  shift, and go to state 969

    $default  reduce using rule 84 (additional_catches)

    additional_catch  go to state 974


state 972

   86 non_empty_additional_catches: additional_catch .

    $default  reduce using rule 86 (non_empty_additional_catches)


state 973

   90 additional_catch: "catch (T_CATCH)" '(' . fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 116
    "namespace (T_NAMESPACE)"  shift, and go to state 514
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 515

    namespace_name              go to state 516
    fully_qualified_class_name  go to state 975


state 974

   87 non_empty_additional_catches: non_empty_additional_catches additional_catch .

    $default  reduce using rule 87 (non_empty_additional_catches)


state 975

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name . @27 "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list '}'

    $default  reduce using rule 88 (@27)

    @27  go to state 976


state 976

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 . "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list '}'

    "variable (T_VARIABLE)"  shift, and go to state 977


state 977

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" . ')' @28 '{' inner_statement_list '}'

    ')'  shift, and go to state 978


state 978

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' . @28 '{' inner_statement_list '}'

    $default  reduce using rule 89 (@28)

    @28  go to state 979


state 979

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 . '{' inner_statement_list '}'

    '{'  shift, and go to state 980


state 980

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 '{' . inner_statement_list '}'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 981


state 981

   27 inner_statement_list: inner_statement_list . @4 inner_statement
   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list . '}'

    '}'  shift, and go to state 982

    $default  reduce using rule 26 (@4)

    @4  go to state 366


state 982

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list '}' .

    $default  reduce using rule 90 (additional_catch)
