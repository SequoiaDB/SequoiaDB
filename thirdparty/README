SequoiaDB Third Party Tools README

Welcome to SequoiaDB!

SequoiaDB is a distributed document-oriented NoSQL Database.

In order to reduce the complexity of full compile, SequoiaDB source code package is shipped with pre-compiled third-party libraries.
If users want to recompile individual package ( or use newer version ), users have to download the source code and perform manual compile. The following steps and compiling options can be used.
The compiled libraries have to be copied into the target directory before performing full link.
Note: users may have to deal with compatibility issues by using different version of libraries, and the compiled image should be fully tested before using in production environment.

Windows32:
	Building Prerequisites:
		Microsoft Windows SDK 7.1 32 bit
		Python 2.7.3
		autoconf 2.13 ( source code in ..\tools\compile\autoconf-2.13 )
		Windows 7, Windows 2003, Windows 2008
		mozilla-build ( installation image in ..\tools\mozilla dir )
		scons
		ActivePerl
		cygwin

	Boost 1.60.0:
		cd boost\tools\build\v2\
		bootstrap.bat
		cd boost
		tools\build\v2\bjam.exe link=static threading=multi variant=release address-model=32 toolset=msvc runtime-link=static
		tools\build\v2\bjam.exe link=static threading=multi variant=debug address-model=32 toolset=msvc
		copy boost\stage\lib\* to boost\lib\win32\

	SpiderMonkey 1.8.5:
		install ..\tools\mozilla\MozillaBuildSetup-Latest.exe to c:\mozilla\build
		c:\mozilla-build\msys\msys.bat
		install python to c:\Python27
		export PATH=$PATH:/c/Python27
		export PATH=$PATH:/c/mozilla-build/info-zip
		export MOZ_TOOLS=/c/mozilla-build/moztools
		export CFLAGS="-DJS_C_STRING_ARE_UTF8"
		export CXXFLAGS="-DJS_C_STRINGS_ARE_UTF8"
		cd parser\sm\js\src
		autoconf-2.13
		mkdir build-release
		cd build-release
		..\configure
		make
		cd ..
		mkdir build-debug
		cd build-debug
		..\configure --enable-debug --disable-optimize
		make
		copy parser\sm\js\src\build-release\include and parser\sm\js\src\build-release\lib directory to parser\sm\js\lib\release\win32\
		copy parser\sm\js\src\build-release\bin\*.dll to parser\sm\js\src\build-release\lib\
		do same operation for build-debug

	OpenSSL 1.0.1c:
		cd crypto\openssl-1.0.1c\
		perl Configure VC-WIN32 no-asm
		ms\do_ms
		nmake -f ms\ntdll.mak
		copy the following files to crypto\openssl-1.0.1c\lib\win32:
			libeay32.dll  libeay32.exp  libeay32.lib  libeay32.pdb  ssleay32.dll  ssleay32.exp  ssleay32.lib  ssleay32.pdb
	
	snappy 1.1.0:
		cd snappy
        scons [--dd|--release]
        By default it will compile in release mode.
		
	lz4 1.7.1:
		cd lz4
        scons [--dd|--release]
        By default it will compile in release mode.
		
	zlib 1.2.8:
		cd zlib
		nmake -f win32\Makefile.msc
		copy the following file to zlib\lib\win32
			libzlib.lib
	The second way to build:
		cd zlib
        scons [--dd|--release]
        By default it will compile in release mode.

Windows64:
        Building Prerequisites:
                Microsoft Windows SDK 7.1 64 bit
                Python 2.7.3
                autoconf 2.13 ( source code in ..\tools\compile\autoconf-2.13 )
                Windows 7, Windows 2003, Windows 2008
                mozilla-build ( installation image in ..\tools\mozilla dir )
                scons
                ActivePerl
		cygwin

        Boost 1.60.0:
                cd boost\tools\build\v2\
                bootstrap.bat
                cd boost
                tools\build\v2\bjam.exe link=static threading=multi variant=release address-model=64 toolset=msvc runtime-link=static
                tools\build\v2\bjam.exe link=static threading=multi variant=debug address-model=64 toolset=msvc
                copy boost\stage\lib\* to boost\lib\win64\

        SpiderMonkey 1.8.5:
                install ..\tools\mozilla\MozillaBuildSetup-Latest.exe to c:\mozilla\build
                c:\mozilla-build\msys\msys.bat
                install python to c:\Python27
                export PATH=$PATH:/c/Python27
                export PATH=$PATH:/c/mozilla-build/info-zip
                export MOZ_TOOLS=/c/mozilla-build/moztools
                export CFLAGS="-DJS_C_STRING_ARE_UTF8"
                export CXXFLAGS="-DJS_C_STRINGS_ARE_UTF8"
                cd parser\sm\js\src
                autoconf-2.13
                mkdir build-release
                cd build-release
                ..\configure --target=x86_64-pc-mingw32 --host=x86_64-pc-mingw32
                make
                cd ..
                mkdir build-debug
                cd build-debug
                ..\configure --enable-debug --disable-optimize --target=x86_64-pc-mingw32 --host=x86_64-pc-mingw32
                make
                copy parser\sm\js\src\build-release\include and parser\sm\js\src\build-release\lib directory to parser\sm\js\lib\release\win32\
                copy parser\sm\js\src\build-release\bin\*.dll to parser\sm\js\src\build-release\lib\
                do same operation for build-debug

        OpenSSL 1.0.1c:
                cd crypto\openssl-1.0.1c\
                perl Configure VC-WIN64A
                ms\do_win64a
                nmake -f ms\ntdll.mak
                copy the following files to crypto\openssl-1.0.1c\lib\win64:
                        libeay32.dll  libeay32.exp  libeay32.lib  libeay32.pdb  ssleay32.dll  ssleay32.exp  ssleay32.lib  ssleay32.pdb

		snappy 1.1.0:
            cd snappy
            scons [--dd|--release]
            By default it will compile in release mode.
			
		lz4 1.7.1:
			cd lz4
            scons [--dd|--release]
            By default it will compile in release mode.
			
		zlib 1.2.8:
			cd zlib
			nmake -f win32\Makefile.msc
			copy the following file to zlib\lib\win64
				libzlib.lib
		The second way to build:
			cd zlib
            scons [--dd|--release]
            By default it will compile in release mode.

Linux32:
        Building Prerequisites:
		g++ 4.6.3
		libstdc++ 6
		Python 2.7.3
                autoconf 2.13 ( source code in ..\tools\compile\autoconf-2.13 )
                scons
		perl

        Boost 1.60.0:
		./bootstrap.sh --prefix=./
		./bjam link=static threading=multi variant=release address-model=32 toolset=gcc runtime-link=static cxxflags="-fPIC"
                copy boost/stage/lib/* to boost/lib/linux32

        SpiderMonkey 1.8.5:
                export CFLAGS="-DJS_C_STRING_ARE_UTF8"
                export CXXFLAGS="-DJS_C_STRINGS_ARE_UTF8"
                cd parser/sm/js/src
                autoconf-2.13
                mkdir build-release
                cd build-release
                ../configure --disable-methodjit
                make
                cd ..
                mkdir build-debug
                cd build-debug
                ../configure --enable-debug --disable-optimize --disable-methodjit
                make
                copy parser/sm/js/src/build-release/include and parser/sm/js/src/build-release/lib directory to parser/sm/js/lib/release/linux32
                do same operation for build-debug

        OpenSSL 1.0.1c:
                cd crypto/openssl-1.0.1c/
		./configure
		make
                copy libcrypto.a and libssl.a to crypto/openssl-1.0.1c/lib/linux32/

		snappy 1.1.0:
			cd snappy
			scons
			
		lz4 1.7.1:
			cd lz4
			scons
			
		zlib 1.2.8:
			cd zlib
			./configure
			make
			copy the following file to zlib\lib\linux32
				libzlib.a
		The second way to build:
			cd zlib
			scons
			
Linux64:
        Building Prerequisites:
                g++ 4.6.3
                libstdc++ 6
                Python 2.7.3
                autoconf 2.13 ( source code in ..\tools\compile\autoconf-2.13 )
                scons
                perl

        Boost 1.60.0:
                ./bootstrap.sh --prefix=./
                ./bjam link=static threading=multi variant=release address-model=64 toolset=gcc runtime-link=static cxxflags="-fPIC"
                copy boost/stage/lib/* to boost/lib/linux64

        SpiderMonkey 1.8.5:
                export CFLAGS="-DJS_C_STRING_ARE_UTF8"
                export CXXFLAGS="-DJS_C_STRINGS_ARE_UTF8"
                cd parser/sm/js/src
                autoconf-2.13
                mkdir build-release
                cd build-release
                ../configure --disable-methodjit
                make
                cd ..
                mkdir build-debug
                cd build-debug
                ../configure --enable-debug --disable-optimize --disable-methodjit
                make
                copy parser/sm/js/src/build-release/include and parser/sm/js/src/build-release/lib directory to parser/sm/js/lib/release/linux64
                do same operation for build-debug

        OpenSSL 1.0.1c:
                cd crypto/openssl-1.0.1c/
                ./configure
                make
                copy libcrypto.a and libssl.a to crypto/openssl-1.0.1c/lib/linux64/
				
		snappy 1.1.0:
			cd snappy
			scons

		lz4 1.7.1:
			cd lz4
			scons
			
		zlib 1.2.8:
			cd zlib
			./configure
			make
			copy the following file to zlib\lib\linux64
				libzlib.a
		The second way to build:
			cd zlib
			scons

PowerLinux64:
        Building Prerequisites:
                g++ 4.6.3
                libstdc++ 6
                Python 2.7.3
                autoconf 2.13 ( source code in ..\tools\compile\autoconf-2.13 )
                scons
                perl

        Boost 1.60.0:
                ./bootstrap.sh --prefix=./
                ./bjam link=static threading=multi variant=release address-model=64 toolset=gcc runtime-link=static cxxflags="-fPIC"
                copy boost/stage/lib/* to boost/lib/ppclinux64

        SpiderMonkey 1.8.5:
                export CFLAGS="-DJS_C_STRING_ARE_UTF8"
                export CXXFLAGS="-DJS_C_STRINGS_ARE_UTF8"
                cd parser/sm/js/src
                vi Makefile.in, remove all "-DENABLE_ASSEMBLER=1 -DENABLE_JIT=1" options, and add -mminimal-toc option
                cp jsval.h.bak jsval.h
                cp jsvalue.h.bak jsvalue.h
                autoconf-2.13
                mkdir build-release
                cd build-release
                ../configure
                make
                cd ..
                mkdir build-debug
                cd build-debug
                ../configure --enable-debug --disable-optimize
                make
                copy parser/sm/js/src/build-release/include and parser/sm/js/src/build-release/lib directory to parser/sm/js/lib/release/ppclinux64
                do same operation for build-debug

        OpenSSL 1.0.1c:
                cd crypto/openssl-1.0.1c/
                ./Configure linux-ppc64
                make
                copy libcrypto.a and libssl.a to crypto/openssl-1.0.1c/lib/ppclinux64/

    	snappy 1.1.0:
			cd snappy
			scons

		lz4 1.7.1:
			cd lz4
			scons
			
		zlib 1.2.8:
			cd zlib
			./configure
			make
			copy the following file to zlib\lib\ppclinux64
				libzlib.a
		The second way to build:
			cd zlib
			scons
			
PowerleLinux64:
        Building Prerequisites:
                g++ 4.8.3
                libstdc++ 6.0.19
                Python 2.7.7
                autoconf 2.13 ( source code in ..\tools\compile\autoconf-2.13 )
                scons
                perl

        Boost 1.60.0:
                ./bootstrap.sh --prefix=./
                ./bjam link=static threading=multi variant=release address-model=64 toolset=gcc runtime-link=static cxxflags="-fPIC"
                copy boost/stage/lib/* to boost/lib/ppclelinux64

        SpiderMonkey 1.8.5:
                export CFLAGS="-DJS_C_STRING_ARE_UTF8"
                export CXXFLAGS="-DJS_C_STRINGS_ARE_UTF8"
                cd parser/sm/js/src
                vi Makefile.in, remove all "-DENABLE_ASSEMBLER=1 -DENABLE_JIT=1" options, and add -mminimal-toc option
                cp jsval.h.bak jsval.h
                cp jsvalue.h.bak jsvalue.h
                autoconf-2.13
                mkdir build-release
                cd build-release
                ../configure ppc64le
                make
                cd ..
                mkdir build-debug
                cd build-debug
                ../configure ppc64le --enable-debug --disable-optimize
                make
                copy parser/sm/js/src/build-release/include and parser/sm/js/src/build-release/lib directory to parser/sm/js/lib/release/ppclelinux64
                do same operation for build-debug

        OpenSSL 1.0.2h:
                cd crypto/openssl-1.0.2h/
                ./Configure linux-ppc64le -fPIC
                make depend
                make
                copy libcrypto.a and libssl.a to crypto/openssl-1.0.2h/lib/ppclelinux64/

    	snappy 1.1.0:
			cd snappy
			scons

		lz4 1.7.1:
			cd lz4
			scons
			
		zlib 1.2.8:
			cd zlib
			./configure
			make
			copy the following file to zlib\lib\ppclinux64
				libzlib.a
		The second way to build:
			cd zlib
			scons
						
Aix64:
        Building Prerequisites:
                g++ 4.6.3
                libstdc++ 6
                Python 2.7.3
                autoconf 2.13 ( source code in ..\tools\compile\autoconf-2.13 )
                scons

        NOTE: gcc-aix generates 32-bit objects by default, so it needs add -maix64 for generating 64-bit objects.

        Boost 1.60.0:
                ./bootstrap.sh --prefix=./
                ./bjam link=static threading=multi variant=release address-model=64 toolset=gcc runtime-link=static cxxflags="-maix64" linkflags="-maix64"
                copy boost/stage/lib/* to boost/lib/aix64

        OpenSSL 1.0.1c:
                NOTE: use GNU ld
                cd crypto/openssl-1.0.1c/
                ./Configure aix64-gcc -fPIC threads
                make
                make test
                copy libcrypto.a and libssl.a to crypto/openssl-1.0.1c/lib/aix64/

		snappy 1.1.0:
			cd snappy
			scons

		lz4 1.7.1:
			cd lz4
			scons
			
		zlib 1.2.8:
			cd zlib
			./configure
			make
			copy the following file to zlib\lib\aix64
				libzlib.a
		The second way to build:
			cd zlib
			scons