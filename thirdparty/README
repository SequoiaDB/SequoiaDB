SequoiaDB Third Party Tools README

Welcome to SequoiaDB!

SequoiaDB is a distributed document-oriented NoSQL Database.

In order to reduce the complexity of full compile, SequoiaDB source code package is shipped with pre-compiled third-party libraries.
If users want to recompile individual package ( or use newer version ), users have to download the source code and perform manual compile. The following steps and compiling options can be used.
The compiled libraries have to be copied into the target directory before performing full link.
Note: users may have to deal with compatibility issues by using different version of libraries, and the compiled image should be fully tested before using in production environment.

Windows32:
    Building Prerequisites:
        Microsoft Windows SDK 7.1 32 bit
        Python 2.7.3
        autoconf 2.13 ( source code in ..\tools\compile\autoconf-2.13 )
        Windows 7, Windows 2003, Windows 2008
        mozilla-build ( installation image in ..\tools\mozilla dir )
        scons
        ActivePerl
        cygwin

    Boost 1.60.0:
        cd boost\tools\build\v2\
        bootstrap.bat
        cd boost
        tools\build\v2\bjam.exe link=static threading=multi variant=release address-model=32 toolset=msvc runtime-link=static
        tools\build\v2\bjam.exe link=static threading=multi variant=debug address-model=32 toolset=msvc
        copy boost\stage\lib\* to boost\lib\win32\

    SpiderMonkey 1.8.5:
        install ..\tools\mozilla\MozillaBuildSetup-Latest.exe to c:\mozilla\build
        c:\mozilla-build\msys\msys.bat
        install python to c:\Python27
        export PATH=$PATH:/c/Python27
        export PATH=$PATH:/c/mozilla-build/info-zip
        export MOZ_TOOLS=/c/mozilla-build/moztools
        cd parser\sm\js\src
        autoconf-2.13
        mkdir build-release
        cd build-release
        ..\configure
        make
        cd ..
        mkdir build-debug
        cd build-debug
        ..\configure --enable-debug --disable-optimize
        make
        copy parser\sm\js\src\build-release\dist\include and parser\sm\js\src\build-release\dist\lib directory to parser\sm\js\lib\win32\
        copy parser\sm\js\src\build-release\bin\dist\*.dll to parser\sm\js\src\build-release\dist\lib\
        do same operation for build-debug

    OpenSSL 1.1.1o:
        win32 not used, so not compile and not support.

    snappy 1.1.0:
        cd snappy
        scons [--dd|--release]
        By default it will compile in release mode.

    lz4 1.9.4:
        cd lz4
        scons [--dd|--release]
        By default it will compile in release mode.

    zlib 1.2.8:
        cd zlib
        nmake -f win32\Makefile.msc
        copy the following file to zlib\lib\win32
            libzlib.lib
    The second way to build:
        cd zlib
        scons [--dd|--release]
        By default it will compile in release mode.

Windows64:
    Building Prerequisites:
        Microsoft Windows SDK 7.1 64 bit
        Python 2.7.3
        autoconf 2.13 ( source code in ..\tools\compile\autoconf-2.13 )
        Windows 7, Windows 2003, Windows 2008
        mozilla-build ( installation image in ..\tools\mozilla dir )
        scons
        ActivePerl
        cygwin

    Boost 1.60.0:
        cd boost\tools\build\v2\
        bootstrap.bat
        cd boost
        tools\build\v2\bjam.exe link=static threading=multi variant=release address-model=64 toolset=msvc runtime-link=static
        tools\build\v2\bjam.exe link=static threading=multi variant=debug address-model=64 toolset=msvc
        copy boost\stage\lib\* to boost\lib\win64\

    SpiderMonkey 1.8.5:
        install ..\tools\mozilla\MozillaBuildSetup-Latest.exe to c:\mozilla\build
        c:\mozilla-build\msys\msys.bat
        install python to c:\Python27
        export PATH=$PATH:/c/Python27
        export PATH=$PATH:/c/mozilla-build/info-zip
        export MOZ_TOOLS=/c/mozilla-build/moztools
        cd parser\sm\js\src
        autoconf-2.13
        mkdir build-release
        cd build-release
        ..\configure --target=x86_64-pc-mingw32 --host=x86_64-pc-mingw32
        make
        cd ..
        mkdir build-debug
        cd build-debug
        ..\configure --enable-debug --disable-optimize --target=x86_64-pc-mingw32 --host=x86_64-pc-mingw32
        make
        copy parser\sm\js\src\build-release\dist\include and parser\sm\js\src\build-release\dist\lib directory to parser\sm\js\lib\win64\
        copy parser\sm\js\src\build-release\bin\dist\*.dll to parser\sm\js\src\build-release\dist\lib\
        do same operation for build-debug

    OpenSSL 1.1.1o:
        cd crypto/openssl.1.1g\
        perl Configure VC-WIN64A
        nmake
        copy the following files to crypto\openssl-1.1.1o\lib\win64:
        libssl.lib libcrypto.lib

    snappy 1.1.0:
        cd snappy
        scons [--dd|--release]
        By default it will compile in release mode.

    lz4 1.9.4:
        cd lz4
        scons [--dd|--release]
        By default it will compile in release mode.

    zlib 1.2.8:
        cd zlib
        nmake -f win32\Makefile.msc
        copy the following file to zlib\lib\win64
            libzlib.lib
    The second way to build:
        cd zlib
        scons [--dd|--release]
        By default it will compile in release mode.

Linux32:
    Building Prerequisites:
        g++ 4.6.3
        libstdc++ 6
        Python 2.7.3
        autoconf 2.13 ( source code in ..\tools\compile\autoconf-2.13 )
        scons
        perl

    Boost 1.60.0:
        ./bootstrap.sh --prefix=./
        ./bjam link=static threading=multi variant=release address-model=32 toolset=gcc runtime-link=static cxxflags="-fPIC"
        copy boost/stage/lib/* to boost/lib/linux32

    SpiderMonkey 1.8.5:
        cd parser/sm/js/src
        autoconf-2.13
        mkdir build-release
        cd build-release
        ../configure --disable-methodjit
        make
        cd ..
        mkdir build-debug
        cd build-debug
        ../configure --enable-debug --disable-optimize --disable-methodjit
        make
        copy parser/sm/js/src/build-release/dist/include to parser/sm/js/include and
        parser/sm/js/src/build-release/dist/lib to parser/sm/js/lib/linux32.
        Do same operation for build-debug.

        Note:
            autoconf2.13 is required to compile this version of SpiderMonkey. If it's not
            installed in your system, you can compile and install it from source provided
            by the sequoiadb repository. The source code path is tools/compile/autoconf-2.13.
            Compile and install as follows:
            cd autoconf-2.13
            ./configure --program-suffix=2.13   # Be sure to use this version number
            make
            sudo make install
            Then check if it's installed successfully:
            autoconf2.13 --version

    OpenSSL 1.1.1o:
        cd crypto/openssl-1.1.1o/
        ./configure
        make
        copy libcrypto.a and libssl.a to crypto/openssl-1.1.1o/lib/linux32/

    snappy 1.1.0:
        cd snappy
        scons

    lz4 1.9.4:
        cd lz4
        scons

    zlib 1.2.8:
        cd zlib
        ./configure
        make
        copy the following file to zlib\lib\linux32
            libzlib.a
    The second way to build:
        cd zlib
        scons

Linux64:
    Building Prerequisites:
        g++ 4.6.3
        libstdc++ 6
        Python 2.7.3
        autoconf 2.13 ( source code in ..\tools\compile\autoconf-2.13 )
        scons
        perl

    Boost 1.60.0:
        # for release build:
        cd thirdparty/boost/
        chmod +x bootstrap.sh
        chmod +x ./tools/build/src/engine/build.sh
        ./bootstrap.sh --with-libraries=system,filesystem,thread,program_options,chrono --prefix=./
        ./bjam link=static threading=multi variant=release address-model=64 toolset=gcc runtime-link=static cxxflags="-fPIC"
        cp ./stage/lib/* ./lib/linux64/release

        # for debug build:
        cd thirdparty/boost/
        chmod +x bootstrap.sh
        chmod +x ./tools/build/src/engine/build.sh
        ./bootstrap.sh --with-libraries=system,filesystem,thread,program_options,chrono --prefix=./
        ./bjam link=static threading=multi variant=debug address-model=64 toolset=gcc runtime-link=static cxxflags="-fPIC"
        cp ./stage/lib/* ./lib/linux64/debug

    SpiderMonkey 1.8.5:
        # for release build:
        cd thirdparty/parser/sm/js/src
        autoconf2.13
        mkdir build-release
        cd build-release
        ../configure --disable-methodjit --bindir=../../lib/linux64/bin --includedir=../../lib/linux64/include --libdir=../../lib/linux64/release
        make -j 4
        make install

        # for debug build:
        cd thirdparty/parser/sm/js/src
        autoconf2.13
        mkdir build-debug
        cd build-debug
        ../configure --enable-debug --disable-optimize --disable-methodjit --bindir=../../lib/linux64/bin --includedir=../../lib/linux64/include --libdir=../../lib/linux64/debug
        make -j 4
        make install

        Note:
            autoconf2.13 is required to compile this version of SpiderMonkey. If it's not
            installed in your system, you can compile and install it from source provided
            by the sequoiadb repository. The source code path is tools/compile/autoconf-2.13.
            Compile and install as follows:
            cd autoconf-2.13
            ./configure --program-suffix=2.13   # Be sure to use this version number
            make
            sudo make install
            Then check if it's installed successfully:
            autoconf2.13 --version

    OpenSSL 1.1.1o:
        # for release build:
        cd thirdparty/crypto/openssl-1.1.1o/
        rm -rf stage
        make clean
        chmod +x ./config
        ./config -fPIC
        make -j 4
        cp libcrypto.a lib/linux64/release
        cp libssl.a ./lib/linux64/release
        
        # for debug build:
        cd thirdparty/crypto/openssl-1.1.1o/
        rm -rf stage 
        make clean
        chmod +x ./config
        ./config -fPIC -d
        make -j 4
        cp libcrypto.a lib/linux64/debug
        cp libssl.a ./lib/linux64/debug

    snappy 1.1.0:
        # for release build:
        cd thirdparty/snappy
        scons --clean
        scons
        cp stage/lib/libsnappy.a ./lib/linux64/release
        
        # for debug build:
        cd thirdparty/snappy
        scons --clean
        scons --dd
        cp stage/lib/libsnappy.a ./lib/linux64/debug

    lz4 1.9.4:
        # for release build:
        cd thirdparty/lz4
        scons --clean
        scons
        cp stage/lib/liblz4.a ./lib/linux64/release
        
        # for debug build:
        cd thirdparty/lz4
        scons --clean
        scons --dd
        cp stage/lib/liblz4.a ./lib/linux64/debug

    zlib 1.2.8:
        # The first way to build:
        # for release build:
        cd thirdparty/zlib
        scons --clean
        scons
        cp stage/lib/libzlib.a ./lib/linux64/release/libzlib.a
        
        # for debug build:
        cd thirdparty/zlib
        scons --clean
        scons --dd
        cp stage/lib/libzlib.a ./lib/linux64/debug/libzlib.a
        
        # The second way to build:
        cd zlib
        chmod +x configure
        ./configure
        make -j 4
        cp ./libz.a ./lib/linux64/release/libzlib.a

    fuse 2.8.6
        cd fuse
        chmod +x makeconf.sh
        ./makeconf.sh
        ./configure
        make -j 4
        sudo make install
        whereis libfuse.a
        cp ./lib/.libs/libfuse.a ./lib/linux64/release/libfuse.a
        
ARM64:
    Building Prerequisites:
        g++ 4.6.3
        libstdc++ 6
        Python 2.7.3
        autoconf 2.13 ( source code in ..\tools\compile\autoconf-2.13 )
        scons
        perl

    Boost 1.60.0:
        # for release build:
        cd thirdparty/boost/
        chmod +x bootstrap.sh
        chmod +x ./tools/build/src/engine/build.sh
        ./bootstrap.sh --with-libraries=system,filesystem,thread,program_options,chrono --prefix=./
        ./bjam link=static threading=multi variant=release address-model=64 toolset=gcc runtime-link=static cxxflags="-fPIC" architecture=arm
        mkdir -p ./lib/armlinux64/release
        cp ./stage/lib/* ./lib/armlinux64/release

        # for debug build:
        cd thirdparty/boost/
        chmod +x bootstrap.sh
        chmod +x ./tools/build/src/engine/build.sh
        ./bootstrap.sh --with-libraries=system,filesystem,thread,program_options,chrono --prefix=./
        ./bjam link=static threading=multi variant=debug address-model=64 toolset=gcc runtime-link=static cxxflags="-fPIC" architecture=arm
        mkdir -p ./lib/armlinux64/debug
        cp ./stage/lib/* ./lib/armlinux64/debug

    SpiderMonkey 1.8.5:
        # for release build:
        cd thirdparty/parser/sm/js/src
        autoconf2.13
        mkdir build-release
        cd build-release
        ../configure --disable-methodjit --bindir=../../lib/armlinux64/bin --includedir=../../lib/armlinux64/include --libdir=../../lib/armlinux64/release  --host=aarch64
        make -j 4
        make install

        # for debug build:
        cd thirdparty/parser/sm/js/src
        autoconf2.13
        mkdir build-debug
        cd build-debug
        ../configure --enable-debug --disable-optimize --disable-methodjit --bindir=../../lib/armlinux64/bin --includedir=../../lib/armlinux64/include --libdir=../../lib/armlinux64/debug --host=aarch64
        make -j 4
        make install

        Note:
            autoconf2.13 is required to compile this version of SpiderMonkey. If it's not
            installed in your system, you can compile and install it from source provided
            by the sequoiadb repository. The source code path is tools/compile/autoconf-2.13.
            Compile and install as follows:
            cd autoconf-2.13
            ./configure --program-suffix=2.13   # Be sure to use this version number
            make
            sudo make install
            Then check if it's installed successfully:
            autoconf2.13 --version

    OpenSSL 1.1.1o:
        # for release build:
        cd thirdparty/crypto/openssl-1.1.1o/
        rm -rf stage
        make clean
        chmod +x ./config
        ./config -fPIC
        make -j 4
        mkdir -p ./lib/armlinux64/release
        cp libcrypto.a ./lib/armlinux64/release   
        cp libssl.a ./lib/armlinux64/release

        # for debug build:
        cd thirdparty/crypto/openssl-1.1.1o/
        rm -rf stage
        make clean
        chmod +x ./config
        ./config -fPIC -d
        make -j 4
        mkdir -p ./lib/armlinux64/debug
        cp libcrypto.a ./lib/armlinux64/debug
        cp libssl.a ./lib/armlinux64/debug

    snappy 1.1.0:
        # for release build:
        cd thirdparty/snappy
        scons --clean
        scons
        mkdir -p ./lib/armlinux64/release
        cp stage/lib/libsnappy.a ./lib/armlinux64/release

        # for debug build:
        cd thirdparty/snappy
        scons --clean
        scons --dd
        mkdir -p ./lib/armlinux64/debug
        cp stage/lib/libsnappy.a ./lib/armlinux64/debug

    lz4 1.9.4:
        # for release build:
        cd thirdparty/lz4
        scons --clean
        scons
        mkdir -p ./lib/armlinux64/release
        cp stage/lib/liblz4.a ./lib/armlinux64/release

        # for debug build:
        cd thirdparty/lz4
        scons --clean
        scons --dd
        mkdir -p ./lib/armlinux64/debug
        cp stage/lib/liblz4.a ./lib/armlinux64/debug

    zlib 1.2.8:
        # The first way to build:
        # for release build:
        cd thirdparty/zlib
        scons --clean
        scons
        mkdir -p ./lib/armlinux64/release
        cp stage/lib/libzlib.a ./lib/armlinux64/release/libzlib.a

        # for debug build:
        cd thirdparty/zlib
        scons --clean
        scons --dd
        mkdir -p ./lib/armlinux64/debug
        cp stage/lib/libzlib.a ./lib/armlinux64/debug/libzlib.a

        # The second way to build:
        cd zlib
        chmod +x configure
        ./configure
        make -j 4
        mkdir -p ./lib/armlinux64/release
        cp ./libz.a ./lib/armlinux64/release/libzlib.a

    fuse 2.8.6
        cd thirdparty/fuse
        chmod +x makeconf.sh
        ./makeconf.sh
        ./configure
        make -j 4
        sudo make install
        whereis libfuse.a
        mkdir -p ./lib/armlinux64/release
        cp ./lib/.libs/libfuse.a ./lib/armlinux64/release/libfuse.a

PowerLinux64:
    Building Prerequisites:
        g++ 4.6.3
        libstdc++ 6
        Python 2.7.3
        autoconf 2.13 ( source code in ..\tools\compile\autoconf-2.13 )
        scons
        perl

    Boost 1.60.0:
        ./bootstrap.sh --prefix=./
        ./bjam link=static threading=multi variant=release address-model=64 toolset=gcc runtime-link=static cxxflags="-fPIC"
        copy boost/stage/lib/* to boost/lib/ppclinux64

    SpiderMonkey 1.8.5:
        cd parser/sm/js/src
        vi Makefile.in, remove all "-DENABLE_ASSEMBLER=1 -DENABLE_JIT=1" options, and add -mminimal-toc option
        cp jsval.h.bak jsval.h
        cp jsvalue.h.bak jsvalue.h
        autoconf-2.13
        mkdir build-release
        cd build-release
        ../configure
        make
        cd ..
        mkdir build-debug
        cd build-debug
        ../configure --enable-debug --disable-optimize
        make
        copy parser/sm/js/src/build-release/dist/include to parser/sm/js/include and
        parser/sm/js/src/build-release/dist/lib to parser/sm/js/lib/ppclinux64.
        do same operation for build-debug

    OpenSSL 1.1.1o:
       not compile.

    snappy 1.1.0:
        cd snappy
        scons

    lz4 1.9.4:
        cd lz4
        scons

    zlib 1.2.8:
        cd zlib
        ./configure
        make
        copy the following file to zlib\lib\ppclinux64
            libzlib.a
    The second way to build:
        cd zlib
        scons

PowerleLinux64:
    Building Prerequisites:
        g++ 4.8.3
        libstdc++ 6.0.19
        Python 2.7.7
        autoconf 2.13 ( source code in ..\tools\compile\autoconf-2.13 )
        scons
        perl

    Boost 1.60.0:
        ./bootstrap.sh --prefix=./
        ./bjam link=static threading=multi variant=release address-model=64 toolset=gcc runtime-link=static cxxflags="-fPIC"
        copy boost/stage/lib/* to boost/lib/ppclelinux64

    SpiderMonkey 1.8.5:    
        cd thirdparty/parser/sm/js/src
        autoconf2.13
        mkdir build-release
        cd build-release
        ../configure ppc64le
        make
        cd ..
        mkdir build-debug
        cd build-debug
        ../configure ppc64le --enable-debug --disable-optimize
        make
        copy parser/sm/js/src/build-release/dist/include to parser/sm/js/include and
        parser/sm/js/src/build-release/dist/lib to parser/sm/js/lib/ppclelinux64.
        do same operation for build-debug
    Note:
         1. autoconf2.13 is required to compile this version of SpiderMonkey. If it's not
            installed in your system, you can compile and install it from source provided
            by the sequoiadb repository. The source code path is tools/compile/autoconf-2.13.
            Compile and install as follows:
            cd autoconf-2.13
            ./configure --program-suffix=2.13   # Be sure to use this version number
            make
            sudo make install
            Then check if it's installed successfully:
            autoconf2.13 --version

         2. If the command '../configure ppc64le' reports an error, use the command 'gcc -dM -E -x c /dev/null'
            to check if the macro '__ppc64le__' exists, if the macro does not, use another macro that has been 
            defined, such as: '../configure __PPC64__'

    OpenSSL 1.1.1o:
        # for release build:
        cd thirdparty/crypto/openssl-1.1.1o/
        make clean
        chmod +x ./config
        ./config -fPIC
        make -j 4
        mkdir -p ./lib/ppclelinux64/release
        cp libcrypto.a ./lib/ppclelinux64/release
        cp libssl.a ./lib/ppclelinux64/release

        # for debug build:
        cd thirdparty/crypto/openssl-1.1.1o/
        make clean
        chmod +x ./config
        ./config -fPIC -d
        make -j 4
        mkdir -p ./lib/ppclelinux64/debug
        cp libcrypto.a ./lib/ppclelinux64/debug
        cp libssl.a ./lib/ppclelinux64/debug

    snappy 1.1.0:
        cd snappy
        scons

    lz4 1.9.4:
        cd lz4
        scons

    zlib 1.2.8:
        cd zlib
        ./configure
        make
        copy the following file to zlib\lib\ppclinux64
            libzlib.a
    The second way to build:
        cd zlib
        scons

Aix64:
    Building Prerequisites:
        g++ 4.6.3
        libstdc++ 6
        Python 2.7.3
        autoconf 2.13 ( source code in ..\tools\compile\autoconf-2.13 )
        scons

    NOTE: gcc-aix generates 32-bit objects by default, so it needs add -maix64 for generating 64-bit objects.

    Boost 1.60.0:
        ./bootstrap.sh --prefix=./
        ./bjam link=static threading=multi variant=release address-model=64 toolset=gcc runtime-link=static cxxflags="-maix64" linkflags="-maix64"
        copy boost/stage/lib/* to boost/lib/aix64

    OpenSSL 1.1.1o:
       not compile.

    snappy 1.1.0:
        cd snappy
        scons

    lz4 1.9.4:
        cd lz4
        scons

    zlib 1.2.8:
        cd zlib
        ./configure
        make
        copy the following file to zlib\lib\aix64
            libzlib.a
    The second way to build:
        cd zlib
        scons

Alpha64:
    Building Prerequisites:
        g++ 4.8.3
        libstdc++ 6.0.19
        Python 2.7.7
        autoconf 2.13 ( source code in ..\tools\compile\autoconf-2.13 )
        scons

    Boost 1.60.0:
        ./bootstrap.sh --prefix=./
        ./bjam link=static threading=multi variant=release address-model=64 toolset=gcc runtime-link=static cxxflags="-fPIC -mieee"
        copy boost/stage/lib/* to boost/lib/alphalinux64

    SpiderMonkey 1.8.5:
        cd thirdparty/parser/sm/js/src
        autoconf2.13
        mkdir build-release
        cd build-release
        ../configure --host=sw_64 --enable-optimize="-std=gnu++98 -mieee"
        make
        cd ..
        mkdir build-debug
        cd build-debug
        ../configure --host=sw_64 --enable-optimize="-std=gnu++98 -mieee" --enable-debug
        make
        copy parser/sm/js/src/build-release/dist/include to parser/sm/js/include and
        parser/sm/js/src/build-release/dist/lib to parser/sm/js/lib/alphalinux64.
        do same operation for build-debug

        Note:
            autoconf2.13 is required to compile this version of SpiderMonkey. If it's not
            installed in your system, you can compile and install it from source provided
            by the sequoiadb repository. The source code path is tools/compile/autoconf-2.13.
            Compile and install as follows:
            cd autoconf-2.13
            ./configure --program-suffix=2.13   # Be sure to use this version number
            make
            sudo make install
            Then check if it's installed successfully:
            autoconf2.13 --version

    OpenSSL 1.1.1o:
        # alpha64(sw_64) dose not supported SSL source compile
        # we need to use the SSL library that comes with it
        apt install libssl-dev
        find /usr/ -name "libcrypto.a"
        find /usr/ -name "libssl.a"
        # copy the find file to ./lib/alphalinux64/release

    snappy 1.1.0:
        cd snappy
        scons

    lz4 1.9.4:
        cd lz4
        scons

    zlib 1.2.8:
        cd zlib
        ./configure
        make
        copy the following file to zlib\lib\alphalinux64
            libzlib.a
    The second way to build:
        cd zlib
        scons