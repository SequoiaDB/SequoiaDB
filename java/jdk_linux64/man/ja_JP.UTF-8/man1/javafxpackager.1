'\" t
.\" Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved.
.\" Title: javafxpackager
.\" Language: English
.\" Date: 2013年8月
.\" SectDesc: ユーザー・コマンド
.\" Software: Oracle Java
.\" Arch: 汎用
.\"
.pl 99999
.TH "javafxpackager" "1" "2013年8月" "Oracle Java" "ユーザー・コマンド"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
javafxpackager \- JavaFXアプリケーションのパッケージ化と署名に関連するタスクを実行するコマンドを備えたツール。
.SH "形式"
.sp
.if n \{\
.RS 4
.\}
.nf
javafxpackager \fI\-taskcommand\fR \fI[\-options]\fR
.fi
.if n \{\
.RE
.\}
.PP
ここで、\fI\-taskcommand\fRには、次のいずれかを指定します。
.PP
\-createjar
.RS 4
他のパラメータに従ってJARアーカイブを作成します。
.RE
.PP
\-deploy
.RS 4
再配布用のアプリケーション・パッケージを組み立てます。デプロイ・タスクでは、デフォルトでベース・アプリケーション・パッケージが生成されますが、指定すれば自己完結型アプリケーション・パッケージも生成できます。
.RE
.PP
\-createbss
.RS 4
CSSファイルをバイナリ形式に変換します。
.RE
.PP
\-signJar
.RS 4
指定した証明書でJARファイルに署名します。
.RE
.PP
\-makeall
.RS 4
大半は事前定義されている引数を使用して、コンパイル、\fIcreatejar\fR、\fIdeploy\fRのステップを1つの呼出しで実行します。デフォルトでは、該当する自己完結型アプリケーション・パッケージをすべて生成しようとします。ソース・ファイルはsrcというフォルダに配置する必要があり、生成されるファイル(JAR、JNLP、HTMLおよび自己完結型アプリケーション・パッケージ)はdistというフォルダに出力されます。このコマンドでは最小限の構成のみが可能で、可能な限り自動化されています。
.RE
.PP
オプションはすべて大文字と小文字が区別されますので注意してください。
.SH "CREATEJARコマンドのオプション"
.PP
\-appclass \fI<application class>\fR
.RS 4
実行するアプリケーション・クラスの修飾名。
.RE
.PP
\-preloader \fI<preloader class>\fR
.RS 4
実行するプリローダー・クラスの修飾名。
.RE
.PP
\-paramfile <file>
.RS 4
デフォルトの名前付きアプリケーション・パラメータが含まれるプロパティ・ファイル。
.RE
.PP
\-argument arg
.RS 4
\fI<fx:argument>\fR要素としてJNLPファイルに挿入される名前なし引数。
.RE
.PP
\-classpath \fI<files>\fR
.RS 4
依存するJARファイル名のリスト。
.RE
.PP
\-manifestAttrs \fI<manifest attributes>\fR
.RS 4
追加のマニフェスト属性のリスト。構文:
.sp
.if n \{\
.RS 4
.\}
.nf
"name1=value1,name2=value2,name3=value3"
.fi
.if n \{\
.RE
.\}
.RE
.PP
\-noembedlauncher
.RS 4
指定した場合、パッケージャはJARファイルにJavaFX起動クラスを追加しません。
.RE
.PP
\-nocss2bin
.RS 4
パッケージャはJARにコピーする前にCSSファイルをバイナリ形式に変換しません。
.RE
.PP
\-runtimeversion \fI<version>\fR
.RS 4
必要なJavaFXランタイムのバージョン。
.RE
.PP
\-outdir \fI<dir>\fR
.RS 4
生成された出力ファイルを受け取るディレクトリの名前。
.RE
.PP
\-outfile \fI<filename>\fR
.RS 4
生成されるファイルの名前(拡張子なし)。
.RE
.PP
\-srcdir \fI<dir>\fR
.RS 4
パッケージ化するファイルのベース・ディレクトリ。
.RE
.PP
\-srcfiles \fI<files>\fR
.RS 4
\fIsrcdir\fR内のファイルのリスト。省略すると、\fIsrcdir\fR
(この場合は必須の引数)にあるすべてのファイルが使用されます。
.RE
.SH "DEPLOYコマンドのオプション"
.PP
\-title \fI<title>\fR
.RS 4
アプリケーションのタイトル。
.RE
.PP
\-vendor \fI<vendor>\fR
.RS 4
アプリケーションのベンダー。
.RE
.PP
\-description \fI<description>\fR
.RS 4
アプリケーションの説明。
.RE
.PP
\-appclass \fI<application class>\fR
.RS 4
実行するアプリケーション・クラスの修飾名。
.RE
.PP
\-preloader \fI<preloader class>\fR
.RS 4
実行するプリローダー・クラスの修飾名。
.RE
.PP
\-paramfile \fI<file>\fR
.RS 4
デフォルトの名前付きアプリケーション・パラメータが含まれるプロパティ・ファイル。
.RE
.PP
\-htmlparamfile \fI<file>\fR
.RS 4
生成されるアプリケーションをブラウザで実行する場合のパラメータが含まれるプロパティ・ファイル。
.RE
.PP
\-width \fI<width>\fR
.RS 4
アプリケーションの幅。
.RE
.PP
\-height \fI<height>\fR
.RS 4
アプリケーションの高さ。
.RE
.PP
\-native \fI<type>\fR
.RS 4
自己完結型アプリケーション・バンドルを生成します(可能な場合)。\fItype\fRを指定すると、このタイプのバンドルのみが作成されます。サポートされるタイプは、installer、image、exe、msi、dmg、rpm、debです。
.RE
.PP
\-name \fI<name>\fR
.RS 4
アプリケーションの名前。
.RE
.PP
\-embedjnlp
.RS 4
指定した場合、JNLPファイルがHTMLドキュメントに埋め込まれます。
.RE
.PP
\-embedCertificates
.RS 4
指定した場合、証明書がJNLPファイルに埋め込まれます。
.RE
.PP
\-allpermissions
.RS 4
指定した場合、JNLPファイル内のすべてのセキュリティ権限がアプリケーションに必要になります。
.RE
.PP
\-updatemode \fI<updatemode>\fR
.RS 4
JNLPファイルの更新モードを設定します。
.RE
.PP
\-isExtension
.RS 4
指定した場合、\fIsrcfiles\fRは拡張ファイルとして処理されます。
.RE
.PP
\-callbacks
.RS 4
生成後のHTMLでのユーザー・コールバック方式を指定します。形式は次のとおりです。
.sp
.if n \{\
.RS 4
.\}
.nf
"name1:value1,name2:value2,\&.\&.\&."
.fi
.if n \{\
.RE
.\}
.RE
.PP
\-templateInFilename
.RS 4
HTMLテンプレート・ファイルの名前。プレースホルダの形式は次のとおりです。
.sp
.if n \{\
.RS 4
.\}
.nf
#XXXX\&.YYYY(APPID)#
.fi
.if n \{\
.RE
.\}
.RE
.PP
\-templateOutFilename
.RS 4
テンプレートから生成されるHTMLファイルの名前。
.RE
.PP
\-templateId
.RS 4
テンプレート処理を行うアプリケーションのアプリケーションID。
.RE
.PP
\-argument arg
.RS 4
JNLPファイルの\fI<fx:argument>\fR要素に挿入される名前なし引数。
.RE
.PP
\-outdir \fI<dir>\fR
.RS 4
生成された出力ファイルを受け取るディレクトリの名前。
.RE
.PP
\-outfile \fI<filename>\fR
.RS 4
生成されるファイルの名前(拡張子なし)。
.RE
.PP
\-srcdir \fI<dir>\fR
.RS 4
パッケージ化するファイルのベース・ディレクトリ。
.RE
.PP
\-srcfiles \fI<files>\fR
.RS 4
\fIsrcdir\fR内のファイルのリスト。省略すると、\fIsrcdir\fR
(この場合は必須の引数)にあるすべてのファイルが使用されます。
.RE
.SH "CREATEBSSコマンドのオプション"
.PP
\-outdir \fI<dir>\fR
.RS 4
生成された出力ファイルを受け取るディレクトリの名前。
.RE
.PP
\-srcdir \fI<dir>\fR
.RS 4
パッケージ化するファイルのベース・ディレクトリ。
.RE
.PP
\-srcfiles \fI<files>\fR
.RS 4
\fIsrcdir\fR内のファイルのリスト。省略すると、\fIsrcdir\fR
(この場合は必須の引数)にあるすべてのファイルが使用されます。
.RE
.SH "SIGNJARコマンドのオプション"
.PP
\-keyStore \fI<file>\fR
.RS 4
キーストア・ファイル名。
.RE
.PP
\-alias
.RS 4
キーの別名。
.RE
.PP
\-storePass
.RS 4
キーストアの整合性を確認したり、ロックを解除するためのパスワード。
.RE
.PP
\-keyPass
.RS 4
キーを復元するためのパスワード。
.RE
.PP
\-storeType
.RS 4
キーストアのタイプ。デフォルト値は"jks"です。
.RE
.PP
\-outdir \fI<dir>\fR
.RS 4
生成された出力ファイルを受け取るディレクトリの名前。
.RE
.PP
\-srcdir \fI<dir>\fR
.RS 4
署名するファイルのベース・ディレクトリ。
.RE
.PP
\-srcfiles \fI<files>\fR
.RS 4
\fIsrcdir\fR内のファイルのリスト。省略すると、\fIsrcdir\fR
(この場合は必須の引数)にあるすべてのファイルが使用されます。
.RE
.SH "MAKEALLコマンドのオプション"
.PP
\-appclass \fI<application class>\fR
.RS 4
実行するアプリケーション・クラスの修飾名。
.RE
.PP
\-preloader \fI<preloader class>\fR
.RS 4
実行するプリローダー・クラスの修飾名。
.RE
.PP
\-classpath \fI<files>\fR
.RS 4
依存するJARファイル名のリスト。
.RE
.PP
\-name \fI<name>\fR
.RS 4
アプリケーションの名前。
.RE
.PP
\-width \fI<width>\fR
.RS 4
アプリケーションの幅。
.RE
.PP
\-height \fI<height>\fR
.RS 4
アプリケーションの高さ。
.RE
.SH "注意"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
タスク・コマンドとともに\fI\-v \fRオプションを使用すれば、詳細な出力が有効になります。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fI\-srcdir\fRオプションをコマンドで使用できる場合は、複数回使用できます。\fI\-srcfiles\fRオプションを指定すると、引数に指定されたファイル名が、その前に指定されている\fIsrcdir\fRオプションで指定された場所で検索されます。\fI\-srcdir\fRが\fI\-srcfiles\fRの前に指定されていない場合は、javafxpackagerコマンドが実行されるディレクトリが使用されます。
.RE
.SH "例"
.PP
\fBExample 1\fR, \-createjarコマンドの使用方法
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
javafxpackager \-createjar \-appclass package\&.ClassName
  \-srcdir classes \-outdir out \-outfile outjar \-v
.fi
.if n \{\
.RE
.\}
classesディレクトリの内容をoutjar\&.jarにパッケージ化して、アプリケーション・クラスをpackage\&.ClassNameに設定します。
.RE
.PP
\fBExample 2\fR, \-deployコマンドの使用方法
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
javafxpackager \-deploy \-outdir outdir \-outfile outfile \-width 34 \-height 43 
  \-name AppName \-appclass package\&.ClassName \-v \-srcdir compiled
.fi
.if n \{\
.RE
.\}
outfile\&.jnlpファイルおよび対応するoutfile\&.htmlファイルを、アプリケーションAppNameのoutdirに生成します。これは、package\&.ClassNameで始まり、34 x 43の配列を持ちます。
.RE
.PP
\fBExample 3\fR, \-makeallコマンドの使用方法
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
javafxpackager \-makeall \-appclass brickbreaker\&.Main \-name BrickBreaker
  \-width 600 \-height 600
.fi
.if n \{\
.RE
.\}
コンパイルを含むすべてのパッケージ化作業(コンパイル、Jarの作成、デプロイ)を実行します。
.RE
.PP
\fBExample 4\fR, \-signJarコマンドの使用方法
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
javafxpackager \-signJar \-\-outdir dist \-keyStore sampleKeystore\&.jks 
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
 \-storePass **** \-alias javafx \-keypass **** \-srcdir dist
.fi
.if n \{\
.RE
.\}
distディレクトリにあるすべてのファイルに署名し、指定したalias、keyStoreおよびstorePassを指定して証明書を添付し、署名されたJARファイルをdistディレクトリに戻します。
.RE
.br
'pl 8.5i
'bp
