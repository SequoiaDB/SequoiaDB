.\"t
.\" Automatically generated by Pandoc 1.18
.\"
.TH "alter" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH NAME
.PP
alter \- modify the properties of the domain
.SH SYNOPSIS
.PP
\f[B]domain.alter(<options>)\f[]
.SH CATEGORY
.PP
SdbDomain
.SH DESCRIPTION
.PP
This function is used to modify the properties of the domain.
.SH PARAMETERS
.PP
options ( \f[I]object, required\f[] )
.PP
Modify the properties of the domain through the parameter "options":
.IP \[bu] 2
Groups ( \f[I]string/array\f[] ): The replication group contained in the domain.
.RS 2
.PP
When modifying the replication group contained in the domain, if it involves
deleting the replication group, make sure that there is no data in the
replication group, otherwise the operation will report an error.
.PP
Format: \f[C]Groups: [\[aq]group1\[aq], \[aq]group2\[aq]]\f[]
.RE
.IP \[bu] 2
AutoSplit ( \f[I]boolean\f[] ): Whether to enable automatic segmentation, the
default value is false, not enabled.
.RS 2
.PP
After this parameter is modified, it will only take effect for the newly created
collection space and collection.
.PP
Format: \f[C]AutoSplit: true\f[]
.RE
.SH RETURN VALUE
.PP
When the function executes successfully, there is no return value.
.PP
When the function fails, an exception will be thrown and an error message will
be printed.
.SH ERRORS
.PP
The common exceptions of \f[C]alter()\f[] function are as follows:
.PP
.TS
tab(@);
l l l l l.
T{
0
T}@T{
Error Code
T}@T{
Error Type
T}@T{
Description
T}@T{
Solution
T}
_
T{
1
T}@T{
\-154
T}@T{
SDB_CLS_GRP_NOT_EXIST
T}@T{
Partition group does
T}@T{
Use the list to check
T}
T{
T}@T{
T}@T{
T}@T{
not exist.
T}@T{
whether the partition
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
group exists.
T}
T{
2
T}@T{
\-214
T}@T{
SDB_CAT_DOMAIN_NOT_
T}@T{
Domain does not exist.
T}@T{
Use listDomains() to
T}
T{
T}@T{
T}@T{
EXIST
T}@T{
T}@T{
check whether the
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
domain exists.
T}
T{
3
T}@T{
\-256
T}@T{
SDB_DOMAIN_IS_OCCUPIED
T}@T{
Domain has been used.
T}@T{
Use
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
listCollectionSpaces()
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
to check whether there
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
is a collection space
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
in the domain.
T}
.TE
.PP
When the exception happens, use getLastErrMsg() to get the error message or use
getLastError() to get the error code.
For more details, refer to Troubleshooting.
.SH VERSION
.PP
v3.4 and above
.SH EXAMPLES
.IP \[bu] 2
Create a domain containing the replication group "group1" and "group2", no data
exists in the replication groups.
.RS 2
.IP
.nf
\f[C]
> var domain = db.createDomain(\[aq]mydomain\[aq], [\[aq]group1\[aq], \[aq]group2\[aq]])
\f[]
.fi
.PP
Modify the replication group contained in the domain to "group1" and group3.
.IP
.nf
\f[C]
> domain.alter({Groups: [\[aq]group1\[aq], \[aq]group3\[aq]]})
\f[]
.fi
.RE
.IP \[bu] 2
Create a domain containing the replication group "group1" with data in the
replication group.
.RS 2
.IP
.nf
\f[C]
> var domain = db.createDomain(\[aq]mydomain\[aq], [\[aq]group1\[aq]])
\f[]
.fi
.PP
Modify the replication group contained in the domain to "group2".
.IP
.nf
\f[C]
> domain.alter({Groups: [\[aq]group2\[aq]]})
\f[]
.fi
.PP
Because there is data in "group1", the operation reports an error.
.IP
.nf
\f[C]
(nofile):0 uncaught exception: \-256
Domain has been used
\f[]
.fi
.RE
