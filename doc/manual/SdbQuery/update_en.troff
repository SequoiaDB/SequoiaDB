.\"t
.\" Automatically generated by Pandoc 1.18
.\"
.TH "update" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH NAME
.PP
update \- Update the result set after the query.
.SH SYNOPSIS
.PP
\f[B]\f[I]query.update( <rule>, [returnNew], [options] )\f[]\f[]
.SH CATEGORY
.PP
SdbQuery
.SH DESCRIPTION
.PP
Update the result set after the query.
.RS
.PP
\f[B]Note:\f[]
.RE
.RS
.IP "1." 3
update() cannot be used with count() and remove().
.RE
.RS
.IP "2." 3
If update() is used with sort(), it must use an index when sorts on a single
node.
.RE
.RS
.IP "3." 3
When update() is used with limit() and skip() in a cluster, it must ensure that
the query conditions are executed on a single node or on a single child table.
.RE
.SH PARAMETERS
.PP
.TS
tab(@);
l l l l l l.
T{
0
T}@T{
Name
T}@T{
Type
T}@T{
Default
T}@T{
Description
T}@T{
Required or not
T}
_
T{
1
T}@T{
rule
T}@T{
JSON
T}@T{
\-\-\-
T}@T{
update rules and
T}@T{
yes
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
records are updated
T}@T{
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
according to specified
T}@T{
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
rules
T}@T{
T}
T{
2
T}@T{
returnNew
T}@T{
bool
T}@T{
false
T}@T{
whether to return the
T}@T{
not
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
record after the update
T}@T{
T}
T{
3
T}@T{
options
T}@T{
JSON
T}@T{
\-\-\-
T}@T{
specify partition key
T}@T{
not
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
properties
T}@T{
T}
.TE
.PP
The detail description of \[aq]options\[aq] parameter is as follow:
.PP
.TS
tab(@);
l l l l l l.
T{
0
T}@T{
Attributes
T}@T{
Type
T}@T{
Default
T}@T{
Description
T}@T{
Required or not
T}
_
T{
1
T}@T{
KeepShardingKey
T}@T{
bool
T}@T{
false
T}@T{
whether to retain the
T}@T{
not
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
partition key field
T}@T{
T}
.TE
.SH RETURN VALUE
.PP
On success, return result set.
.PP
On error, exception will be thrown.
.SH ERRORS
.PP
When exception happens, use getLastError() to get the error code and use
getLastErrMsg() to get error message.
For more details, refer to Troubleshooting.
.SH EXAMPLES
.IP \[bu] 2
Select the record that the age field value greater than (with using $gt) 10
under the collection, employee, and add (with using $inc) one to the age field.
.IP
.nf
\f[C]
> db.sample.employee.find( { age: { $gt: 10 } } ).update( { $inc: { age: 1 } }, true )
{
  "_id": {
    "$oid": "5d006c45e846796ae69f85a9"
  },
  "age": 21,
  "name": "tom"
}
{
  "_id": {
    "$oid": "5d006c45e846796ae69f85aa"
  },
  "age": 22,
  "name": "ben"
}
{
  "_id": {
    "$oid": "5d006c45e846796ae69f85ab"
  },
  "age": 23,
  "name": "alice"
}
\f[]
.fi
