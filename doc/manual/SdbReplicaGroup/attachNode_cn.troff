.\"t
.\" Automatically generated by Pandoc 1.18
.\"
.TH "attachNode" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH 名称
.PP
attachNode \- 将不属于任何复制组的节点加入当前复制组
.SH 语法
.PP
\f[B]rg.attachNode( <host>, <service>, <options> )\f[]
.SH 类别
.PP
SdbReplicaGroup
.SH 描述
.PP
将一个已经创建完成但不属于任何复制组的节点加入到当前复制组。可以搭配
rg.detachNode() 使用。目前可以支持加入到数据组或者编目组。
.SH 参数
.PP
.TS
tab(@);
l l l l l.
T{
0
T}@T{
参数名
T}@T{
参数类型
T}@T{
描述
T}@T{
是否必填
T}
_
T{
1
T}@T{
host
T}@T{
string
T}@T{
节点的主机名或
T}@T{
是
T}
T{
T}@T{
T}@T{
T}@T{
者主机 IP。
T}@T{
T}
T{
2
T}@T{
service
T}@T{
string
T}@T{
节点服务名或者
T}@T{
是
T}
T{
T}@T{
T}@T{
T}@T{
端口。
T}@T{
T}
T{
3
T}@T{
options
T}@T{
Json 对象
T}@T{
详见options选项说
T}@T{
是
T}
T{
T}@T{
T}@T{
T}@T{
明。
T}@T{
T}
.TE
.PP
options 选项：
.PP
.TS
tab(@);
l l l l l.
T{
0
T}@T{
参数名
T}@T{
参数类型
T}@T{
描述
T}@T{
默认值
T}
_
T{
1
T}@T{
KeepData
T}@T{
bool
T}@T{
是否保留新加节
T}@T{
无默认值，需用
T}
T{
T}@T{
T}@T{
T}@T{
点原有的数据。
T}@T{
户显式指定。
T}
.TE
.RS
.PP
\f[B]Note:\f[]
.RE
.RS
.IP "1." 3
参数 options 中的 KeepData
字段为必填项，需用户显式指定。由于该选项会决定新节点数据是否继续被保留，用户应该谨慎考虑。
.IP "2." 3
如果新加的节点原本不属于当前组，建议用户将 KeepData 设置为
false。否则，一旦发生主备切换及全量同步，当前组原有节点的数据将有可能被新加节点的数据覆盖。
.IP "3." 3
节点配置文件中角色(role)指定为编目(catalog)的节点只能加入编目组中；角色指定为数据(data)的节点只能加入到数据组中。
.RE
.SH 返回值
.PP
无返回值，出错抛异常，并输出错误信息。可以通过 getLastErrMsg
获取错误信息，或通过 getLastError 获取错误码。 关于错误处理可以参考
常见错误处理指南 。
.SH 错误
.PP
错误信息记录在节点诊断日志（diaglog）中，可参考错误码。
.PP
.TS
tab(@);
l l l l.
T{
0
T}@T{
错误码
T}@T{
可能的原因
T}@T{
解决方法
T}
_
T{
1
T}@T{
\-15
T}@T{
网络错误
T}@T{
1.
检查 sdbcm 状态
T}
T{
T}@T{
T}@T{
T}@T{
是否正常，如果
T}
T{
T}@T{
T}@T{
T}@T{
状态异常，可以
T}
T{
T}@T{
T}@T{
T}@T{
尝试重启； 2.
T}
T{
T}@T{
T}@T{
T}@T{
检查填写的 host
T}
T{
T}@T{
T}@T{
T}@T{
是否正确。
T}
T{
2
T}@T{
\-146
T}@T{
节点不存在
T}@T{
检查节点是否存
T}
T{
T}@T{
T}@T{
T}@T{
在。
T}
T{
3
T}@T{
\-157
T}@T{
节点已存在于其
T}@T{
检查节点是否已
T}
T{
T}@T{
T}@T{
他复制组
T}@T{
加入到当前或其
T}
T{
T}@T{
T}@T{
T}@T{
他复制组，如果
T}
T{
T}@T{
T}@T{
T}@T{
已属于任何复制
T}
T{
T}@T{
T}@T{
T}@T{
组将不支持该操
T}
T{
T}@T{
T}@T{
T}@T{
作。注意：编目
T}
T{
T}@T{
T}@T{
T}@T{
节点不能加入到
T}
T{
T}@T{
T}@T{
T}@T{
数据组中，数据
T}
T{
T}@T{
T}@T{
T}@T{
节点也不能加入
T}
T{
T}@T{
T}@T{
T}@T{
到编目组中。
T}
.TE
.SH 版本
.PP
v2.0 及以上版本
.SH 示例
.PP
将一个节点从 group1 中分离，加入到 group2 中，方法如下：
.PP
attachNode 前的节点信息：
.IP
.nf
\f[C]
> db.listReplicaGroups()
{
  "Group": [
    {
      "HostName": "hostname1",
      "Status": 1,
      "dbpath": "/opt/sequoiadb/database/data/11830/",
      "Service": [
        {
          "Type": 0,
          "Name": "11830"
        },
        {
          "Type": 1,
          "Name": "11831"
        },
        {
          "Type": 2,
          "Name": "11832"
        }
      ],
      "NodeID": 1007
    }
    ......
  ],
  "GroupID": 1002,
  "GroupName": "group1",
  "PrimaryNode": 1002,
  "Role": 0,
  "Status": 1,
  "Version": 7,
  "_id": {
    "$oid": "580adfd531ae32109e38ca29"
  }
}
\&......
{
  "Group": [
    {
      "HostName": "hostname2",
      "Status": 1,
      "dbpath": "/opt/sequoiadb/database/data/11840/",
      "Service": [
        {
          "Type": 0,
          "Name": "11840"
        },
        {
          "Type": 1,
          "Name": "11841"
        },
        {
          "Type": 2,
          "Name": "11842"
        }
      ],
      "NodeID": 1000
    }
    ......
  ],
  "GroupID": 1000,
  "GroupName": "group2",
  "PrimaryNode": 1000,
  "Role": 0,
  "Status": 1,
  "Version": 7,
  "_id": {
    "$oid": "580adfd531ae32109e38ca27"
  }
}
\f[]
.fi
.PP
将“hostname1:11830” 节点从 group1 复制组中分离：
.IP
.nf
\f[C]
> db.getRG(\[aq]group1\[aq]).detachNode(\[aq]hostname1\[aq], \[aq]11830\[aq], { KeepData: true } )
\f[]
.fi
.PP
将“hostname1:11830” 节点加入到 group2 复制组中，由于节点原本不属于 group2,
此处将其原本的数据清空：
.IP
.nf
\f[C]
> db.getRG(\[aq]group2\[aq]).attachNode(\[aq]hostname1\[aq], \[aq]11830\[aq], { KeepData: false } )
\f[]
.fi
.PP
查看 attachNode 后的节点信息，group1 复制组中已不存在“hostname1:11830”
节点，group2 复制组存在“hostname1:11830” 节点：
.IP
.nf
\f[C]
> db.listReplicaGroups()
    {
      "HostName": "hostname3",
      "Status": 1,
      "dbpath": "/opt/sequoiadb/database/data/11830/",
      "Service": [
        {
          "Type": 0,
          "Name": "11830"
        },
        {
          "Type": 1,
          "Name": "11831"
        },
        {
          "Type": 2,
          "Name": "11832"
        }
      ],
      "NodeID": 1002
    }
  ],
  "GroupID": 1002,
  "GroupName": "group1",
  "PrimaryNode": 1002,
  "Role": 0,
  "Status": 1,
  "Version": 7,
  "_id": {
    "$oid": "580adfd531ae32109e38ca29"
  }
}
\&......
{
  "Group": [
    {
      "HostName": "hostname1",
      "Status": 1,
      "dbpath": "/opt/sequoiadb/database/data/11830/",
      "Service": [
        {
          "Type": 0,
          "Name": "11830"
        },
        {
          "Type": 1,
          "Name": "11831"
        },
        {
          "Type": 2,
          "Name": "11832"
        }
      ],
      "NodeID": 1010
    },
    {
      "HostName": "hostname2",
      "Status": 1,
      "dbpath": "/opt/sequoiadb/database/data/11840/",
      "Service": [
        {
          "Type": 0,
          "Name": "11840"
        },
        {
          "Type": 1,
          "Name": "11841"
        },
        {
          "Type": 2,
          "Name": "11842"
        }
      ],
      "NodeID": 1000
    },
    ......
  ],
  "GroupID": 1000,
  "GroupName": "group2",
  "PrimaryNode": 1000,
  "Role": 0,
  "Status": 1,
  "Version": 7,
  "_id": {
    "$oid": "580adfd531ae32109e38ca27"
  }
}
\f[]
.fi
