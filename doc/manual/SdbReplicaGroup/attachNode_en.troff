.\"t
.\" Automatically generated by Pandoc 1.18
.\"
.TH "attachNode" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH NAME
.PP
attachNode \- Add a node that has been created but does not belong to any group
to the current group.
.SH SYNOPSIS
.PP
\f[B]rg.attachNode( <host>, <service>, <options> )\f[]
.SH CATEGORY
.PP
Replica Group
.SH DESCRIPTION
.PP
Add a node that has been created but does not belong to any group to the current
group.
Can be used with rg.detachNode().
.SH PARAMETERS
.IP \[bu] 2
\f[C]host\f[] ( \f[I]String\f[]， \f[I]Required\f[] )
.RS 2
.PP
Hostname or IP address of node.
.RE
.IP \[bu] 2
\f[C]service\f[] ( \f[I]String\f[]， \f[I]Required\f[] )
.RS 2
.PP
Service name or port of node.
.RE
.IP \[bu] 2
\f[C]options\f[] ( \f[I]Object\f[], \f[I]Required\f[] )
.RS 2
.PP
Can be the following options:
.IP "1." 3
\f[C]KeepData\f[] ( \f[I]Bool\f[] ): Whether to keep the original data of the
new node.
This option has no default value.
User should specify its value explicitly.
.RE
.PP
\f[B]Note:\f[]
.IP "1." 3
The field \f[C]KeepData\f[] in the \f[C]options\f[] must be specified
explicitly.
For it will determine if the data of the new node still be kept or not.
So, be careful.
.IP "2." 3
It\[aq]s better to set \f[C]KeepData\f[] to be \f[C]false\f[] if the new node
does not originally belong to the current group.
.IP "3." 3
Nodes in the node configuration file where roles are specified as
\f[C]catalog\f[] can only be added to the catalog group; nodes whose roles are
specified as \f[C]data\f[] can only be added to data groups.
.SH RETURN VALUE
.PP
On success, return void.
.PP
On error, exception will be thrown.
.SH ERRORS
.PP
the exceptions of \f[C]attachNode()\f[] are as below:
.PP
.TS
tab(@);
l l l l l.
T{
0
T}@T{
Error Code
T}@T{
Error Type
T}@T{
Description
T}@T{
Solution
T}
_
T{
1
T}@T{
\-15
T}@T{
SDB_NETWORK
T}@T{
Network error.
T}@T{
1.
Check the state of
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
sdbcm.
2.
Check whether
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
hostname or service
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
name is ok or not.
T}
T{
2
T}@T{
\-146
T}@T{
SDBCM_NODE_NOTEXISTED
T}@T{
Node does not exist.
T}@T{
Check whether the note
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
exists or not.
T}
T{
3
T}@T{
\-157
T}@T{
SDB_CM_CONFIG_CONFLICTS
T}@T{
Node may have been in
T}@T{
Check if the node has
T}
T{
T}@T{
T}@T{
T}@T{
another group.
T}@T{
joined to the current
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
or other replication
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
group.
If it belongs to
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
any replication group,
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
this operation will
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
not be supported.
T}
.TE
.PP
When error happen, use getLastErrMsg() to get the error message or use
getLastError() to get the error code.
See troubleshooting for more detail.
.SH HISTORY
.IP \[bu] 2
since v1.12
.SH EXAMPLES
.IP "1." 3
Detach node from group1 and then add it to group2.
.nf
\f[C]
> var rg1 = db.getRG("group1")
> rg1.detachNode(\[aq]hostname1\[aq], \[aq]11830\[aq], { KeepData: true })
> var rg2 = db.getRG("group2")
> rg2.attachNode(\[aq]hostname1\[aq], \[aq]11830\[aq], { KeepData: false })
\f[]
.fi
.RE
