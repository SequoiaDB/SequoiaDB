.\"t
.\" Automatically generated by Pandoc 1.18
.\"
.TH "getSlave" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH NAME
.PP
getSlave \- Get the slave node of current replica group.
.SH SYNOPSIS
.PP
\f[B]rg.getSlave([positions])\f[]
.SH CATEGORY
.PP
Replica Group
.SH DESCRIPTION
.PP
Get the slave node of current replica group.
.SH PARAMETERS
.IP \[bu] 2
\f[C]positions\f[] ( \f[I]Int32\f[]ï¼Œ \f[I]Optional\f[] )
.RS 2
.PP
positions of nodes.
Should be [1,7].
The amount of valid positions can not more than 7.
.RE
.SH RETURN VALUE
.PP
On success, return an object of SdbNode.
.PP
On error, exception will be thrown.
.PP
\f[B]Note:\f[]
.IP "1." 3
when only have a node in current replica group, return this node anyway.
.IP "2." 3
when have several nodes in current replica group, while no position is
specified, return a random slave node.
.IP "3." 3
when have several nodes in current replica group, while specified positions, and
the positions contain slave node, return a random slave node first.
.SH ERRORS
.PP
the exceptions of \f[C]getSlave()\f[] are as below:
.PP
.TS
tab(@);
l l l l l.
T{
0
T}@T{
Error Code
T}@T{
Error Type
T}@T{
Description
T}@T{
Solution
T}
_
T{
1
T}@T{
\-6
T}@T{
SDB_INVALIDARG
T}@T{
Invalid arguments.
T}@T{
Check the input
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
positions.
T}
T{
2
T}@T{
\-10
T}@T{
SDB_SYS
T}@T{
Network error.
T}@T{
Check the meta data of
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
node in catalog is ok
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
or not.
T}
T{
3
T}@T{
\-154
T}@T{
SDB_CLS_GRP_NOT_EXIST
T}@T{
The replica group does
T}@T{
Check the current group
T}
T{
T}@T{
T}@T{
T}@T{
not exist.
T}@T{
exist or not.
T}
T{
4
T}@T{
\-158
T}@T{
SDB_CLS_EMPTY_GROUP
T}@T{
The current replica
T}@T{
Check the current group
T}
T{
T}@T{
T}@T{
T}@T{
group is empty.
T}@T{
has nodes or not.
T}
.TE
.PP
When error happen, use getLastErrMsg() to get the error message or use
getLastError() to get the error code.
See troubleshooting for more detail.
.SH HISTORY
.IP \[bu] 2
add the positions arguments since v2.10
.IP \[bu] 2
since v1.0
.SH EXAMPLES
.IP "1." 3
Get a slave node in group1.
.nf
\f[C]
> var rg = db.getRG("group1")
> rg.getSlave()
hostname1:42000
\f[]
.fi
.RE
.IP "2." 3
Get the slave node in group1 with the specified positions.
.nf
\f[C]
> var rg = db.getRG("group1")
> rg.getSlave(1,2)
hostname1:40000
\f[]
.fi
.RE
