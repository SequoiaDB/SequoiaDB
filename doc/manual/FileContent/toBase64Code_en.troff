.\" Automatically generated by Pandoc 1.18
.\"
.TH "toBase64Code" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH NAME
.PP
toBase64Code \- Convert binary stream to base64 encoded.
.SH SYNOPSIS
.PP
\f[B]toBase64Code()\f[]
.SH CATEGORY
.PP
FileContent
.SH DESCRIPTION
.PP
Convert binary stream to base64 encoded.
.SH PARAMETERS
.PP
NULL
.SH RETURN VALUE
.PP
On success, return the string in base64 encoded format of binary stream.
.PP
On error, exception will be thrown.
.SH ERRORS
.PP
when exception happen, use getLastError() to get the error code and use
getLastErrMsg() to get error message.
For more detial, please reference to Troubleshooting.
.SH EXAMPLES
.IP \[bu] 2
Open a banary file and get a file descriptor.
.RS 2
.IP
.nf
\f[C]
> var file = new File( "/opt/sequoiadb/file.dump" )
\f[]
.fi
.RE
.IP \[bu] 2
Read the contents of the file into the fileContent object( For more detail,
refer to File::readContent ).
.RS 2
.IP
.nf
\f[C]
> var content = file.readContent( 10 )
\f[]
.fi
.RE
.IP \[bu] 2
Convert the binary stream in the fileContent to base64 encoded.
.RS 2
.IP
.nf
\f[C]
> var base64String = content.toBase64Code()
\f[]
.fi
.RE
.IP \[bu] 2
You can write the string after conversion to a new file, so you can easily view
the string.
.RS 2
.IP
.nf
\f[C]
> var base64StringFile = new File( "/opt/sequoiadb/file.dump.base64" ) 
> base64StringFile.write( base64String )
\f[]
.fi
.RE
.IP \[bu] 2
Read the contents of the file.
.RS 2
.IP
.nf
\f[C]
> base64StringFile.seek(0)
> base64StringFile.read()
BQAGAAgA8////w==
\f[]
.fi
.RE
