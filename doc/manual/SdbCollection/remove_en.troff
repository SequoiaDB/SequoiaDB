.\"t
.\" Automatically generated by Pandoc 1.18
.\"
.TH "remove" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH NAME
.PP
remove \- remove records in the collection
.SH SYNOPSIS
.PP
\f[B]db.collectionspace.collection.remove([cond], [hint], [options])\f[]
.SH CATEGORY
.PP
SdbCollection
.SH DESCRIPTION
.PP
This function is used to remove records in the collection.
.SH PARAMETERS
.PP
.TS
tab(@);
l l l l l.
T{
0
T}@T{
Name
T}@T{
Type
T}@T{
Description
T}@T{
Required or not
T}
_
T{
1
T}@T{
cond
T}@T{
object
T}@T{
Selection condition.
T}@T{
required
T}
T{
T}@T{
T}@T{
T}@T{
When it is empty,
T}@T{
T}
T{
T}@T{
T}@T{
T}@T{
remove all records.
T}@T{
T}
T{
T}@T{
T}@T{
T}@T{
When it is not empty,
T}@T{
T}
T{
T}@T{
T}@T{
T}@T{
remove the records that
T}@T{
T}
T{
T}@T{
T}@T{
T}@T{
meet the conditions.
T}@T{
T}
T{
2
T}@T{
hint
T}@T{
object
T}@T{
Specify an access plan.
T}@T{
not
T}
T{
3
T}@T{
options
T}@T{
object
T}@T{
Options.
For more
T}@T{
not
T}
T{
T}@T{
T}@T{
T}@T{
details, refer to the
T}@T{
T}
T{
T}@T{
T}@T{
T}@T{
description of options.
T}@T{
T}
.TE
.PP
options:
.PP
.TS
tab(@);
l l l l l.
T{
0
T}@T{
Name
T}@T{
Type
T}@T{
Description
T}@T{
Defaults
T}
_
T{
1
T}@T{
JustOne
T}@T{
boolean
T}@T{
When it is true, only
T}@T{
false
T}
T{
T}@T{
T}@T{
T}@T{
one eligible record
T}@T{
T}
T{
T}@T{
T}@T{
T}@T{
will be updated.
T}@T{
T}
T{
T}@T{
T}@T{
T}@T{
When it is false, all
T}@T{
T}
T{
T}@T{
T}@T{
T}@T{
eligible records will
T}@T{
T}
T{
T}@T{
T}@T{
T}@T{
be updated.
T}@T{
T}
.TE
.RS
.PP
\f[B]Note:\f[]
.IP \[bu] 2
The usage of the parameters cond and hint are used in the same way as find().
.IP \[bu] 2
When JustOne is true, it can only be executed on a single partition and a single
subtable.
.RE
.SH RETURN VALUE
.PP
When the function executes successfully, it will return an object of type
BSONObj.
Users can get a list of successful deletion through this object, and the field
descriptions are as follows:
.PP
.TS
tab(@);
l l l l.
T{
0
T}@T{
Name
T}@T{
Type
T}@T{
Description
T}
_
T{
1
T}@T{
DeletedNum
T}@T{
int64
T}@T{
Number of records
T}
T{
T}@T{
T}@T{
T}@T{
successfully deleted.
T}
.TE
.PP
When the function fails, an exception will be thrown and an error message will
be printed.
.SH ERRORS
.PP
The common exceptions of \f[C]remove()\f[] function are as follows:
.PP
.TS
tab(@);
l l l l l.
T{
0
T}@T{
Error Code
T}@T{
Error Type
T}@T{
Description
T}@T{
Solution
T}
_
T{
1
T}@T{
\-348
T}@T{
SDB_COORD_DELETE_MULTI_
T}@T{
When the parameter "
T}@T{
Modify the matching
T}
T{
T}@T{
T}@T{
NODES
T}@T{
JustOne" is true,
T}@T{
conditions or do not
T}
T{
T}@T{
T}@T{
T}@T{
delete records across
T}@T{
use the parameter "
T}
T{
T}@T{
T}@T{
T}@T{
multiple partitions or
T}@T{
JustOne".
T}
T{
T}@T{
T}@T{
T}@T{
subtables.
T}@T{
T}
.TE
.PP
When the exception happens, use getLastErrMsg() to get the error message or use
getLastError() to get the error code.
For more details, refer to Troubleshooting.
.SH VERSION
.PP
v2.0 and above
.SH EXAMPLES
.IP \[bu] 2
Remove all records in the collection.
.RS 2
.IP
.nf
\f[C]
> db.sample.employee.remove()
\f[]
.fi
.RE
.IP \[bu] 2
Remove records matching the cond condition according to the access plan.
For example, the following operation traverses the records in the collection
according to the index named "myIndex", and removes the records whose "age"
field value is greater than or equal to 20 from the traversed records.
.RS 2
.IP
.nf
\f[C]
> db.sample.employee.remove({age: {$gte: 20}}, {"": "myIndex"})
\f[]
.fi
.RE
