.\"t
.\" Automatically generated by Pandoc 1.18
.\"
.TH "aggregate" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH NAME
.PP
aggregate \- Calculate the aggregate value of the data in the collection
.SH SYNOPSIS
.PP
\f[B]db.collectionspace.collection.aggregate( <subOp1>，[subOp2]，... )\f[]
.SH CATEGORY
.PP
Collection
.SH DESCRIPTION
.PP
The functions of aggregate() and find() are pretty similar to each other.
It also retrieves the documents from the collection in the SequoiaDB and return
a cursor.
.SH PARAMETERS
.IP \[bu] 2
\f[C]subOp\f[] ( \f[I]Object\f[], \f[I]Required\f[] )
.RS 2
.PP
subOp1,subOp2...
means sub\-operations which containing aggregate operators.
1 to N sub\-operations can be filled in the aggregate() method.
Every sub\-operation is an object which contatining aggregate operators, and
sub\-operations be separated by commans.
.RS
.PP
\f[B]Note:\f[]
.PP
The aggregate() method will perform each sub\-operation from left to right in
the order of sub\-operations.
.RE
.RE
.SH RETURN VALUE
.PP
On success, aggregate() returns an object of DBCursor for iterating the result.
.PP
On error, exception will be thrown.
.SH ERRORS
.PP
the exceptions of \f[C]aggregate()\f[] are as below:
.PP
.TS
tab(@);
l l l l l.
T{
0
T}@T{
Error code
T}@T{
Error type
T}@T{
Description
T}@T{
Solution
T}
_
T{
1
T}@T{
\-6
T}@T{
SDB_INVALIDARG
T}@T{
Invalid Argument.
T}@T{
Check whether the input
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
arguments are valid or
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
not.
T}
.TE
.PP
When the exception happens, use getLastErrMsg() to get the error message or use
getLastError() to get the error code.
For more details, refer to Troubleshooting.
.SH HISTORY
.PP
Since v1.0
.SH EXAMPLES
.PP
Assume a collection stores records in following format:
.IP
.nf
\f[C]
{
  no:1000,
  score:80,
  interest:["basketball","football"],
  major:"Computer Science and Technology",
  dep:"Computer Academy",
  info:
  {
    name:"Tom",
    age:25,
    gender:"male"
  }
}
\f[]
.fi
.IP "1." 3
Select records according to the criteria, and specify the returned field name.
.nf
\f[C]
> db.sample.employee.aggregate( { $match: { $and: [ { no: { $gt: 1002 } },
                                            { no: { $lt: 1015 } },
                                            { dep: "Computer Academy" } ] } },
                              { $project: { no: 1, "info.name": 1, major: 1 } } )
{
    "no": 1003,
    "info.name": "Sam",
    "major": "Computer Software and Theory"
}
{
      "no": 1004,
      "info.name": "Coll",
      "major": "Computer Engineering"
}
{
      "no": 1005,
      "info.name": "Jim",
      "major": "Computer Engineering"
}
\f[]
.fi
.RE
.IP "2." 3
Select records by criteria and divide the selected records into groups.
This operation firstly uses $match to select records that match the selecting
criteria, then uses $group to divide the selected records by field "major", and
uses $avg to return the average of the "age" field in each group
.nf
\f[C]
> db.sample.employee.aggregate( { $match: { dep:  "Computer Academy" } },
                              { $group: { _id:  "$major", Major: { $first: "$major" }, 
                              avg_age: { $avg: "$info.age" } } } ) 
{
    "Major": "Computer Engineering",
    "avg_age": 25
}
{
      "Major": "Computer Science and Technology",
      "avg_age": 22.5
}
{
      "Major": "Computer Software and Theory",
      "avg_age": 26
}
\f[]
.fi
.RE
.IP "3." 3
Select records by criteria, then group and sort the selected records, limit the
starting point of the result set and the number of returned records.
This aggregate operation firstly uses $match to select records match the
criteria, then uses $group to group the records by "major", uses $avg to return
the average of "age" field in each group, and sort the records in descending
order, uses $skip to specify the starting point of the returned result, and
$limit to limit the number of returned records.
.nf
\f[C]
> db.sample.employee.aggregate( { $match: { interest: { $exists: 1 } } }, 
                              { $group: { _id: "$major", 
                                          avg_age: { $avg: "$info.age" }, 
                                          major: { $first: "$major" } } }, 
                              { $sort: { avg_age: \-1, major: \-1 } }, 
                              { $skip: 2 }, 
                              { $limit: 3 } )
{
    "avg_age": 25,
    "major": "Computer Science and Technology"
}
{
      "avg_age": 22,
      "major": "Computer Software and Theory"
}
{
      "avg_age": 22,
      "major": "Physics"
}
\f[]
.fi
.RE
