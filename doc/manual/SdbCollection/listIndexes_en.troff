.\"t
.\" Automatically generated by Pandoc 1.18
.\"
.TH "listIndexes" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH NAME
.PP
listIndexes \- list the index information in the collection
.SH SYNOPSIS
.PP
\f[B]db.collectionspace.collection.listIndexes()\f[]
.SH CATEGORY
.PP
SdbCollection
.SH DESCRIPTION
.PP
This function is used to list the information of all indexes in the specified
collection.
When the users executes the function through the coordination node, the index
information will be obtained from the catalog node.
If the function is executed through the data node, the index information will be
obtained from the data node.
.SH PARAMETERS
.PP
None
.SH RETURN VALUE
.PP
When the function executes successfully, it will return an object of type
SdbCursor.
Users can get a list of index details through this object, the field
descriptions are as follows:
.PP
.TS
tab(@);
l l l l.
T{
0
T}@T{
Name
T}@T{
Type
T}@T{
Description
T}
_
T{
1
T}@T{
name
T}@T{
string
T}@T{
Index name
T}
T{
2
T}@T{
key
T}@T{
json
T}@T{
Index key, the value is
T}
T{
T}@T{
T}@T{
T}@T{
as follows:1:
T}
T{
T}@T{
T}@T{
T}@T{
Ascending by field
T}
T{
T}@T{
T}@T{
T}@T{
\-1: Descending order by
T}
T{
T}@T{
T}@T{
T}@T{
field"text": Full\-
T}
T{
T}@T{
T}@T{
T}@T{
text index
T}
T{
3
T}@T{
v
T}@T{
int32
T}@T{
Index version number
T}
T{
4
T}@T{
unique
T}@T{
boolean
T}@T{
Is the index unique,
T}
T{
T}@T{
T}@T{
T}@T{
the value is as follows
T}
T{
T}@T{
T}@T{
T}@T{
: "true": Unique
T}
T{
T}@T{
T}@T{
T}@T{
index, no duplicate
T}
T{
T}@T{
T}@T{
T}@T{
values in the
T}
T{
T}@T{
T}@T{
T}@T{
collection are allowed.
T}
T{
T}@T{
T}@T{
T}@T{
 "false": Ordinary
T}
T{
T}@T{
T}@T{
T}@T{
index, allowing
T}
T{
T}@T{
T}@T{
T}@T{
duplicate values in the
T}
T{
T}@T{
T}@T{
T}@T{
collection.
T}
T{
5
T}@T{
enforced
T}@T{
boolean
T}@T{
Whether the index is
T}
T{
T}@T{
T}@T{
T}@T{
mandatory to be unique,
T}
T{
T}@T{
T}@T{
T}@T{
the value is as
T}
T{
T}@T{
T}@T{
T}@T{
follows:"false":
T}
T{
T}@T{
T}@T{
T}@T{
Not mandatory."true
T}
T{
T}@T{
T}@T{
T}@T{
": Mandatory unique,
T}
T{
T}@T{
T}@T{
T}@T{
which means that more
T}
T{
T}@T{
T}@T{
T}@T{
than one empty index
T}
T{
T}@T{
T}@T{
T}@T{
key is not allowed.
T}
T{
6
T}@T{
NotNull
T}@T{
boolean
T}@T{
Whether any field of
T}
T{
T}@T{
T}@T{
T}@T{
the index is allowed to
T}
T{
T}@T{
T}@T{
T}@T{
be "null" or non\-
T}
T{
T}@T{
T}@T{
T}@T{
existent, the value is
T}
T{
T}@T{
T}@T{
T}@T{
as follows: "true"
T}
T{
T}@T{
T}@T{
T}@T{
: Not allowed to be "
T}
T{
T}@T{
T}@T{
T}@T{
null" or non\-existent.
T}
T{
T}@T{
T}@T{
T}@T{
 "false": Allow "
T}
T{
T}@T{
T}@T{
T}@T{
null" or not exist.
T}
T{
7
T}@T{
IndexFlag
T}@T{
string
T}@T{
Index current state,
T}
T{
T}@T{
T}@T{
T}@T{
the value is as follows
T}
T{
T}@T{
T}@T{
T}@T{
: "Normal": Normal
T}
T{
T}@T{
T}@T{
T}@T{
 "Creating":
T}
T{
T}@T{
T}@T{
T}@T{
Creating "Dropping
T}
T{
T}@T{
T}@T{
T}@T{
": Dropping "
T}
T{
T}@T{
T}@T{
T}@T{
Truncating": Truncating
T}
T{
T}@T{
T}@T{
T}@T{
 "Invalid":
T}
T{
T}@T{
T}@T{
T}@T{
Invalid
T}
T{
8
T}@T{
Type
T}@T{
string
T}@T{
Index type, the value
T}
T{
T}@T{
T}@T{
T}@T{
is as follows: "
T}
T{
T}@T{
T}@T{
T}@T{
Positive": Positive
T}
T{
T}@T{
T}@T{
T}@T{
index "Reverse":
T}
T{
T}@T{
T}@T{
T}@T{
Reverse index "
T}
T{
T}@T{
T}@T{
T}@T{
Text": Full\-text index
T}
T{
9
T}@T{
NotArray
T}@T{
boolean
T}@T{
Whether any field of
T}
T{
T}@T{
T}@T{
T}@T{
the index is allowed to
T}
T{
T}@T{
T}@T{
T}@T{
be an array, the value
T}
T{
T}@T{
T}@T{
T}@T{
is as follows: "
T}
T{
T}@T{
T}@T{
T}@T{
true": Not allowed to
T}
T{
T}@T{
T}@T{
T}@T{
be an array.
 "
T}
T{
T}@T{
T}@T{
T}@T{
false": Allowed as an
T}
T{
T}@T{
T}@T{
T}@T{
array.
T}
T{
10
T}@T{
Standalone
T}@T{
boolean
T}@T{
Whether it is an
T}
T{
T}@T{
T}@T{
T}@T{
independent index.
T}
T{
11
T}@T{
dropDups
T}@T{
boolean
T}@T{
Not open
T}
.TE
.PP
When the function fails, an exception will be thrown and an error message will
be printed.
.SH ERRORS
.PP
When the exception happens, use getLastErrMsg() to get the error message or use
getLastError() to get the error code.
For more details, refer to Troubleshooting.
.SH VERSION
.PP
v3.4 and above
.SH EXAMPLES
.PP
List the information of all indexes in the collection "sample.employee".
.IP
.nf
\f[C]
> db.sample.employee.listIndexes()
{
  "_id": {
    "$oid": "6098e71a820799d22f1f2165"
  },
  "IndexDef": {
    "name": "$id",
    "_id": {
      "$oid": "6098e71a820799d22f1f2164"
    },
    "UniqueID": 4037269258240,
    "key": {
      "_id": 1
    },
    "v": 0,
    "unique": true,
    "dropDups": false,
    "enforced": true,
    "NotNull": false,
    "NotArray": true,
    "Global": false,
    "Standalone": false
  },
  "IndexFlag": "Normal",
  "Type": "Positive"
}
\f[]
.fi
