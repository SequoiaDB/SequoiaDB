.\"t
.\" Automatically generated by Pandoc 1.18
.\"
.TH "setAttributes" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH NAME
.PP
setAttributes \- modify the properties of the collection
.SH SYNOPSIS
.PP
\f[B]db.collectionspace.collection.setAttributes(<options>)\f[]
.SH CATEGORY
.PP
SdbCollection
.SH DESCRIPTION
.PP
This function is used to modify the properties of the collection when the
collection does not meet expectations.
.SH PARAMETERS
.PP
options ( \f[I]object, required\f[] )
.PP
Modify the collection properties through the options parameter:
.IP \[bu] 2
ReplSize ( \f[I]number\f[] )：The number of replicas that need to be
synchronized for write operations.
The values are as follows:
.RS 2
.IP \[bu] 2
\-1: Write request needs to be synchronized after the active node of the
replication group, and then the database write operation returns the response to
the client.
.IP \[bu] 2
0: Write request needs to be synchronized after all nodes in the replication
group, and then the database write operation returns the response to the client.
.IP \[bu] 2
1 ~ 7: Write request needs to be synchronized after the specified number of
nodes in the replication group, and then the database write operation returns
the response to the client.
.PP
Format: \f[C]ReplSize: <number>\f[]
.RE
.IP \[bu] 2
ShardingKey ( \f[I]object\f[] ): Sharding key, the value is 1 or \-1, indicating
forward or backward sorting.
.IP \[bu] 2
ConsistencyStrategy ( \f[I]number\f[] ): Synchronization consistency strategy.
.RS 2
.PP
This parameter is used to set the preferred node for data synchronization, the
default value is 3.
.PP
The values are as follows:
.IP \[bu] 2
1: Node priority strategy.
.IP \[bu] 2
2: Position majority first strategy.
.IP \[bu] 2
3: Main position majority first strategy.
.PP
Format：\f[C]ConsistencyStrategy: 3\f[]
.RE
.IP \[bu] 2
ShardingKey ( \f[I]object\f[] ): Sharding key, and the value is 1 or \-1,
indicating forward or reverse sorting.
.RS 2
.PP
"ShardingKey" can be modified when the collection only exists in one data group,
or the collection does not have subcollections mounted.
.PP
Format: \f[C]ShardingKey: {<field1>: <1|\-1>, [<field2>: <1|\-1>, ...]}\f[]
.RE
.IP \[bu] 2
ShardingType ( \f[I]string\f[] ): Partition method, the default value is "hash",
and the values are as follows:
.RS 2
.IP \[bu] 2
"hash": Hash partition
.IP \[bu] 2
"range": Range partition
.PP
The collection can only exist in one data group.
.PP
Format: \f[C]ShardingType: "hash" | "range"\f[]
.RE
.IP \[bu] 2
Partition ( \f[I]number\f[] ): Number of partitions.
It represents the number of hash partitions and is only filled in when selecting
"hash" , The value must be a power of 2, and the range is [2^3, 2^20].
.RS 2
.PP
The collection can only exist in one data group.
.PP
Format: \f[C]Partition: <num>\f[]
.RE
.IP \[bu] 2
AutoSplit ( \f[I]boolean\f[] ): Identify whether the automatic segmentation
function is enabled for the new collection.
.RS 2
.IP \[bu] 2
The default value is false.
.IP \[bu] 2
After setting a new hash partition key for the collection, users can use this
option for automatic segmentation.
.IP \[bu] 2
When AutoSplit is not specified explicitly, If "AutoSplit" is not specified
before the collection is modified and the collection belongs to a non\-system
domain, the "AutoSplit" parameter of this domain will affect this setting.
.IP \[bu] 2
Before the collection, "AutoSplit" is specified as false, user need to
explicitly set AutoSplit to true for automatic segmentation.
.IP \[bu] 2
"AutoSplit" can only work on "hash" partition keys.
.PP
Format: \f[C]AutoSplit: true | false\f[]
.RE
.IP \[bu] 2
EnsureShardingIndex ( \f[I]boolean\f[] ): Identifies whether to create a
partition index.
The default value is true.
.IP \[bu] 2
Compressed ( \f[I]boolean\f[] ): Identifies whether the collection is enabled
for data compression.
.RS 2
.PP
If "Compressed" is set to "true" and "CompressionType" is not specified, then
"CompressionType" is "lzw".
.PP
Format: \f[C]Compressed: true | false\f[]
.RE
.IP \[bu] 2
CompressionType ( \f[I]string\f[] ): The compression algorithm of the
collection, "snappy" or "lzw".
.RS 2
.IP \[bu] 2
"snappy": Using "snappy" algorithm to compress.
.IP \[bu] 2
"lzw": Using "lzw" algorithm to compress.
.PP
Format: \f[C]CompressionType: "snappy" | "lzw"\f[]
.RE
.IP \[bu] 2
StrictDataMode ( \f[I]boolean\f[] ): Identifies whether the operation of the
collection enables strict data type mode.
.RS 2
.PP
Format: \f[C]StrictDataMode: true | false\f[]
.RE
.IP \[bu] 2
AutoIncrement ( \f[I]object\f[] )：Auto\-increment field.
.RS 2
.IP \[bu] 2
"Field" attribute must be added to "option" to mark the field to be modified.
.IP \[bu] 2
The properties that can be modified by the self\-increment field are
CurrentValue, Increment, StartValue, MinValue, MaxValue, CacheSize, AcquireSize,
Cycled, Generated.
Specific attribute function can refet to Auto\-increment.
.IP \[bu] 2
After modifying the attribute, the field value may not be unique.
If users need to ensure that the modified value is unique, it is recommended to
use a unique index.
.PP
Format: \f[C]AutoIncrement: <option>\f[]
.RS
.PP
\f[B]Note:\f[]
.IP \[bu] 2
The specific way of using each option can refers to createCL().
.IP \[bu] 2
The partition collection cannot modify the attributes related to the partition,
such as "ShardingKey", "Partition".
.IP \[bu] 2
"EnsureShardingIndex" and "AutoSplit" are only effective for the current
operation, and only effective when modifying partition properties, such as
"ShardingKey".
.RE
.RE
.SH RETURN VALUE
.PP
When the function executes successfully, there is no return value.
.PP
When the function fails, an exception will be thrown and an error message will
be printed.
.SH ERRORS
.PP
The common exceptions of \f[C]setAttributes()\f[] function are as follows:
.PP
.TS
tab(@);
l l l l l.
T{
0
T}@T{
Error Code
T}@T{
Error Type
T}@T{
Description
T}@T{
Solution
T}
_
T{
1
T}@T{
\-32
T}@T{
SDB_OPTION_NOT_SUPPORT
T}@T{
Options are not
T}@T{
Check the attributes of
T}
T{
T}@T{
T}@T{
T}@T{
currently supported.
T}@T{
the current collection,
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
if it is a partitioned
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
collection, user
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
cannot modify the
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
attributes related to
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
the partition.
T}
.TE
.PP
When the exception happens, use getLastErrMsg() to get the error message or use
getLastError() to get the error code.
For more details, refer to Troubleshooting.
.SH VERSION
.PP
v2.10 and above
.SH 示例
.SH EXAMPLES
.IP \[bu] 2
Create a normal collection, and then modify the collection to a partitioned
collection.
.RS 2
.IP
.nf
\f[C]
> db.sample.createCL(\[aq]employee\[aq])
> db.sample.employee.alter({ShardingKey: {a: 1}, ShardingType: "hash"})
\f[]
.fi
.RE
.IP \[bu] 2
Create a normal collection, then modify the collection to a partitioned
collection, and split it automatically.
.RS 2
.IP
.nf
\f[C]
> db.sample.createCL(\[aq]employee\[aq])
> db.sample.employee.alter({ ShardingKey: {a: 1}, ShardingType: "hash", AutoSplit: true})
\f[]
.fi
.RE
.IP \[bu] 2
Create a normal collection, and then modify the collection to "snappy"
compression.
.RS 2
.IP
.nf
\f[C]
> db.sample.createCL(\[aq]employee\[aq])
> db.sample.employee.alter({CompressionType: \[aq]snappy\[aq]})
\f[]
.fi
.RE
.IP \[bu] 2
Create a collection with auto\-increment fields and modify its auto\-increment
starting value.
.RS 2
.IP
.nf
\f[C]
> db.sample.createCL(\[aq]employee\[aq], {AutoIncrement: {Field: "studentID"}})
> db.sample.employee.alter({AutoIncrement: {Field: "studentID", StartValue: 2017140000}})
\f[]
.fi
.RE
