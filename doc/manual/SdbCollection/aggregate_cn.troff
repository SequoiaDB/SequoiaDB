.\"t
.\" Automatically generated by Pandoc 1.18
.\"
.TH "aggregate" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH 名称
.PP
aggregate \- 计算集合中数据的聚合值
.SH 语法
.PP
\f[B]db.collectionspace.collection.aggregate( <subOp1>，[subOp2]，... )\f[]
.SH 类别
.PP
SdbCollection
.SH 描述
.PP
该函数用于计算集合中数据的聚合值。
.SH 参数
.IP \[bu] 2
\f[C]subOp\f[]( \f[I]Object\f[]， \f[I]必填\f[] )
.RS 2
.PP
subOp1，subOp2...
表示包含聚集符的子操作，在 aggregate() 方法中可以填写 1~N
个子操作。每个子操作是一个包含聚集符的 Object
对象，子操作之间用逗号隔开。注意各子操作的参数名的语法规则。
.RS
.PP
\f[B]Note:\f[]
.PP
aggregate 方法会根据子操作的顺序从左到右依次执行每个子操作。
.RE
.RE
.SH 返回值
.PP
函数执行成功时，将返回一个 SdbCursor 类型的对象。
.PP
函数执行失败时，将抛异常并输出错误信息。
.SH 错误
.PP
\f[C]aggregate()\f[]函数常见异常如下：
.PP
.TS
tab(@);
l l l l l.
T{
0
T}@T{
错误码
T}@T{
错误类型
T}@T{
描述
T}@T{
解决方法
T}
_
T{
1
T}@T{
\-6
T}@T{
SDB_INVALIDARG
T}@T{
参数错误
T}@T{
查看参数是否填
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
写正确。
T}
.TE
.PP
当异常抛出时，可以通过 getLastErrMsg() 获取错误信息或通过 getLastError()
获取错误码。更多错误处理可以参考常见错误处理指南。
.SH 版本
.PP
v1.0 及以上版本
.SH 示例
.PP
假设集合 collection 包含如下格式的记录：
.IP
.nf
\f[C]
{
  no:1000,
  score:80,
  interest:["basketball","football"],
  major:"计算机科学与技术",
  dep:"计算机学院",
  info:
  {
    name:"Tom",
    age:25,
    gender:"男"
  }
}
\f[]
.fi
.IP \[bu] 2
按条件选择记录，并指定返回字段名，如下聚集操作操作首先使用 $match 选择
匹配条件的记录，然后使用 $project 只返回指定的字段名。
.RS 2
.IP
.nf
\f[C]
> db.sample.employee.aggregate( { $match: { $and: [ { no: { $gt: 1002 } },
                                                { no: { $lt: 1015 } },
                                                { dep: "计算机学院" } ] } },
                              { $project: { no: 1, "info.name": 1, major: 1 } } )
{
    "no": 1003,
    "info.name": "Sam",
    "major": "计算机软件与理论"
}
{
    "no": 1004,
    "info.name": "Coll",
    "major": "计算机工程"
}
{
    "no": 1005,
    "info.name": "Jim",
    "major": "计算机工程"
}
\f[]
.fi
.RE
.IP \[bu] 2
按条件选择记录，并对记录进行分组。如下操作首先使用 $match 选择匹配条件的记录，
然后使用 $group 对记录按字段 major 进行分组，并使用 $avg 返回每个分组中嵌套 对象
age 字段的平均值。
.RS 2
.IP
.nf
\f[C]
> db.sample.employee.aggregate( { $match: { dep:  "计算机学院" } },
                              { $group: { _id:  "$major", Major: { $first: "$major" },
                              avg_age: { $avg: "$info.age" } } } )
   {
"Major": "计算机工程",
"avg_age": 25
}
{
   "Major": "计算机科学与技术",
   "avg_age": 22.5
}
{
   "Major": "计算机软件与理论",
   "avg_age": 26
}
\f[]
.fi
.RE
.IP \[bu] 2
按条件选择记录，并对记录进行分组、排序、限制返回记录的起始位置和返回记录数。
如下操作首先按 $match 选择匹配条件的记录；然后使用 $group 按 major 进行分组，
并使用 $avg 返回每个分组中嵌套对象 age 字段的平均值，输出字段名为 avg_age；
最后使用 $sort 按 avg_age 字段值（降序），major 字段值（降序）对结果集进行
排序，使用 $skip 确定返回记录的起始位置，使用 $limit 限制返回记录的条数。
.RS 2
.IP
.nf
\f[C]
> db.sample.employee.aggregate( { $match: { interest: { $exists: 1 } } },
                              { $group: { _id: "$major",
                                          avg_age: { $avg: "$info.age" },
                                          major: { $first: "$major" } } },
                              { $sort: { avg_age: \-1, major: \-1 } },
                              { $skip: 2 },
                              { $limit: 3 } )
{
   "avg_age": 25,
    "major": "计算机科学与技术"
}
{
    "avg_age": 22,
    "major": "计算机软件与理论"
}
{
    "avg_age": 22,
    "major": "物理学"
}
\f[]
.fi
.RE
