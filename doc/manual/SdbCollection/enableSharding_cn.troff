.\"t
.\" Automatically generated by Pandoc 1.18
.\"
.TH "enableSharding" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH 名称
.PP
enableSharding \- 修改集合的属性开启分区属性
.SH 语法
.PP
\f[B]db.collectionspace.collection.enableSharding(<options>)\f[]
.SH 类别
.PP
SdbCollection
.SH 描述
.PP
该函数用于修改集合的属性开启分区属性。
.SH 参数
.PP
options ( \f[I]object，必填\f[] )
.PP
通过 options 参数可以修改集合属性：
.IP \[bu] 2
ShardingKey ( \f[I]object，必填\f[] )：分区键，取值为 1 或
\-1，表示正向或逆向排序
.RS 2
.IP \[bu] 2
已有的 ShardingKey 会被修改成新的 ShardingKey。
.IP \[bu] 2
集合只能存在于一个数据组中，或者集合为没有挂载子表的主表。
.PP
格式：\f[C]ShardingKey: {<字段1>: <1|\-1>, [<字段2>: <1|\-1>, ...]}\f[]
.RE
.IP \[bu] 2
ShardingType ( \f[I]string\f[] )：分区方式，默认为 hash 分区。其可选取值如下：
.RS 2
.IP \[bu] 2
"hash"：hash 分区
.IP \[bu] 2
"range"：范围分区
.PP
集合只能存在于一个数据组中
.PP
格式：\f[C]ShardingType: "hash" | "range"\f[]
.RE
.IP \[bu] 2
\f[C]Partition\f[] ( \f[I]number\f[] )：分区数，仅当选择 hash 分区时填写，代表
hash 分区的个数，默认值为 4096
.RS 2
.IP \[bu] 2
该参数值必须是 2 的幂，取值范围为[2^3，2^20]。
.IP \[bu] 2
集合只能存在于一个数据组中。
.PP
格式：\f[C]Partition: <分区数>\f[]
.RE
.IP \[bu] 2
\f[C]AutoSplit\f[] ( \f[I]boolean\f[] )：标识是否开启自动切分功能，默认值为
false
.RS 2
.IP \[bu] 2
集合设置新的 hash 分区键后，可以使用该选项进行自动切分。
.IP \[bu] 2
不显式指定 AutoSplit 时，如果该集合修改前无指定 AutoSplit
且从属于某个非系统域，该域的 AutoSplit 参数将作用于此次设置。
.IP \[bu] 2
集合之前有指定 AutoSplit 为 false，需要显式设置 AutoSplit 为 true 进行自动切分。
.IP \[bu] 2
AutoSplit 只能作用于 hash 分区键上。
.PP
格式：\f[C]AutoSplit: true | false\f[]
.RE
.IP \[bu] 2
\f[C]EnsureShardingIndex\f[] ( \f[I]boolean\f[]
)：标识是否创建分区索引，默认值为 true
.RS
.PP
\f[B]Note:\f[]
.IP \[bu] 2
各个选项的具体使用方式见 createCL()。
.IP \[bu] 2
分区集合不能修改与分区相关的属性。
.IP \[bu] 2
EnsureShardingIndex 和 AutoSplit 仅对当前该次操作生效，仅当修改分区属性，如
ShardingKey 等时有效。
.RE
.SH 返回值
.PP
函数执行成功时，无返回值。
.PP
函数执行失败时，将抛异常并输出错误信息。
.SH 错误
.PP
\f[C]enableSharding()\f[]函数常见异常如下：
.PP
.TS
tab(@);
l l l l l.
T{
0
T}@T{
错误码
T}@T{
错误类型
T}@T{
可能发生的原因
T}@T{
解决办法
T}
_
T{
1
T}@T{
\-32
T}@T{
SDB_OPTION_NOT_SUPPORT
T}@T{
选项暂不支持
T}@T{
检查当前集合属
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
性，如果是分区
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
集合不能修改与
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
分区相关的属性
T}
.TE
.PP
当异常抛出时，可以通过 getLastErrMsg() 获取错误信息或通过 getLastError()
获取错误码。更多错误处理可以参考常见错误处理指南。
.SH 版本
.PP
v2.10 及以上版本
.SH 示例
.IP \[bu] 2
创建一个普通集合，然后将该集合修改为分区集合
.RS 2
.IP
.nf
\f[C]
> db.sample.createCL(\[aq]employee\[aq])
> db.sample.employee.enableSharding({ShardingKey: {a: 1}, ShardingType: "hash"})
\f[]
.fi
.RE
.IP \[bu] 2
创建一个普通集合，然后将该集合修改为分区集合，并且自动切分
.RS 2
.IP
.nf
\f[C]
> db.sample.createCL(\[aq]employee\[aq])
> db.sample.employee.enableSharding({ShardingKey: {a: 1}, ShardingType: "hash", AutoSplit: true})
\f[]
.fi
.RE
