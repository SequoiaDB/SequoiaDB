.\"t
.\" Automatically generated by Pandoc 1.18
.\"
.TH "insert" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH 名称
.PP
insert \- 将记录插入当前集合
.SH 语法
.PP
\f[B]db.collectionspace.collection.insert(<doc|docs>, [flag])\f[]
.PP
\f[B]db.collectionspace.collection.insert(<doc|docs>, [options])\f[]
.SH 类别
.PP
SdbCollection
.SH 描述
.PP
该函数用于将单条或多条记录插入当前集合。
.SH 参数
.IP \[bu] 2
doc|docs（ \f[I]object/array，必填\f[] ）
.RS 2
.PP
单条或者多条记录
.RE
.IP \[bu] 2
flag（ \f[I]number，选填\f[] ）
.RS 2
.PP
标志位，用于控制插入操作的行为及结果。如果不指定该参数，插入操作默认不返回字段
_id 的内容，且发生索引键冲突时将报错。
.PP
取值如下：
.IP \[bu] 2
SDB_INSERT_RETURN_ID：插入成功后返回记录中字段 _id 的内容。
.IP \[bu] 2
SDB_INSERT_CONTONDUP：发生索引键冲突时，忽略该条新记录并继续插入其他记录。
.IP \[bu] 2
SDB_INSERT_REPLACEONDUP：发生索引键冲突时，新记录将覆盖原有记录，并继续插入其他记录。
.IP \[bu] 2
SDB_INSERT_CONTONDUP_ID：发生 $id
索引键冲突时，忽略该条新记录并继续插入其他记录。
.IP \[bu] 2
SDB_INSERT_REPLACEONDUP_ID：发生 $id
索引键冲突时，新记录将覆盖原有记录，并继续插入其他记录。
.RS
.PP
\f[B]Note：\f[]
.IP \[bu] 2
SDB_INSERT_RETURN_ID 支持与其他标志位同时指定，多个取值间用“|”分隔。
.IP \[bu] 2
对于 SDB_INSERT_CONTONDUP、SDB_INSERT_REPLACEONDUP、SDB_INSERT_CONTONDUP_ID 和
SDB_INSERT_REPLACEONDUP_ID，不支持同时指定多项。
.RE
.RE
.IP \[bu] 2
options（ \f[I]object，选填\f[] ）
.RS 2
.PP
通过参数 options 可以控制插入操作的行为及结果：
.IP \[bu] 2
ReturnOID（ \f[I]boolean\f[] ）：与参数 flag 中的 SDB_INSERT_RETURN_ID 行为一致
.RS 2
.PP
格式：\f[C]ReturnOID: true\f[]
.RE
.IP \[bu] 2
ContOnDup（ \f[I]boolean\f[] ）：与参数 flag 中的 SDB_INSERT_CONTONDUP 行为一致
.RS 2
.PP
格式：\f[C]ContOnDup: true\f[]
.RE
.IP \[bu] 2
ReplaceOnDup（ \f[I]boolean\f[] ）：与参数 flag 中的 SDB_INSERT_REPLACEONDUP
行为一致
.RS 2
.PP
格式：\f[C]ReplaceOnDup: true\f[]
.RE
.IP \[bu] 2
ContOnDupID（ \f[I]boolean\f[] ）：与参数 flag 中的 SDB_INSERT_CONTONDUP_ID
行为一致
.RS 2
.PP
格式：\f[C]ContOnDupID: true\f[]
.RE
.IP \[bu] 2
ReplaceOnDupID（ \f[I]boolean\f[] ）：与参数 flag 中的
SDB_INSERT_REPLACEONDUP_ID 行为一致
.RS 2
.PP
格式：\f[C]ReplaceOnDupID: true\f[]
.RE
.RS
.PP
\f[B]Note:\f[]
.IP \[bu] 2
如果不指定参数 options，插入操作默认不返回字段 _id
的内容，且发生索引键冲突时将报错。
.IP \[bu] 2
对于参数 ContOnDup、ReplaceOnDup、ContOnDupID 和
ReplaceOnDupID，不支持同时指定多项为 true。
.RE
.RE
.SH 返回值
.PP
函数执行成功时，将返回一个 BSONObj
类型的对象，通过该对象获取成功插入的记录数信息，字段说明如下：
.PP
.TS
tab(@);
l l l l.
T{
0
T}@T{
字段名
T}@T{
类型
T}@T{
描述
T}
_
T{
1
T}@T{
InsertedNum
T}@T{
int64
T}@T{
成功插入的记录
T}
T{
T}@T{
T}@T{
T}@T{
数（不包含被覆
T}
T{
T}@T{
T}@T{
T}@T{
盖的记录）
T}
T{
2
T}@T{
DuplicatedNum
T}@T{
int64
T}@T{
因索引键冲突被
T}
T{
T}@T{
T}@T{
T}@T{
忽略或覆盖的记
T}
T{
T}@T{
T}@T{
T}@T{
录数
T}
T{
3
T}@T{
LastGenerateID
T}@T{
int64
T}@T{
自增字段的值（
T}
T{
T}@T{
T}@T{
T}@T{
仅在集合包含自
T}
T{
T}@T{
T}@T{
T}@T{
增字段时显示），
T}
T{
T}@T{
T}@T{
T}@T{
返回情况如下：
T}
T{
T}@T{
T}@T{
T}@T{
 \- 当插入单条
T}
T{
T}@T{
T}@T{
T}@T{
记录时，返回该
T}
T{
T}@T{
T}@T{
T}@T{
记录所对应的自
T}
T{
T}@T{
T}@T{
T}@T{
增字段值\- 当
T}
T{
T}@T{
T}@T{
T}@T{
插入多条记录时，
T}
T{
T}@T{
T}@T{
T}@T{
仅返回第一条记
T}
T{
T}@T{
T}@T{
T}@T{
录对应的自增字
T}
T{
T}@T{
T}@T{
T}@T{
段值\- 当存在
T}
T{
T}@T{
T}@T{
T}@T{
多个自增字段时，
T}
T{
T}@T{
T}@T{
T}@T{
插入单条记录，
T}
T{
T}@T{
T}@T{
T}@T{
仅返回所有自增
T}
T{
T}@T{
T}@T{
T}@T{
字段中的最大值
T}
T{
T}@T{
T}@T{
T}@T{
 \- 当存在多个
T}
T{
T}@T{
T}@T{
T}@T{
自增字段时，插
T}
T{
T}@T{
T}@T{
T}@T{
入多条记录，仅
T}
T{
T}@T{
T}@T{
T}@T{
返回第一条记录
T}
T{
T}@T{
T}@T{
T}@T{
所对应的最大自
T}
T{
T}@T{
T}@T{
T}@T{
增字段值
T}
T{
4
T}@T{
_id
T}@T{
oid
T}@T{
返回插入的记录
T}
T{
T}@T{
T}@T{
T}@T{
中字段 _id 所包含
T}
T{
T}@T{
T}@T{
T}@T{
的内容（仅参数
T}
T{
T}@T{
T}@T{
T}@T{
flag 取值为 SDB_
T}
T{
T}@T{
T}@T{
T}@T{
INSERT_RETURN_ID 或参
T}
T{
T}@T{
T}@T{
T}@T{
数 ReturnOID 为 true
T}
T{
T}@T{
T}@T{
T}@T{
时显示 ）
T}
.TE
.PP
函数执行失败时，将抛异常并输出错误信息。
.SH 错误
.PP
\f[C]insert()\f[] 函数常见异常如下：
.PP
.TS
tab(@);
l l l l l.
T{
0
T}@T{
错误码
T}@T{
错误类型
T}@T{
可能发生的原因
T}@T{
解决办法
T}
_
T{
1
T}@T{
\-6
T}@T{
SDB_INVALIDARG
T}@T{
参数错误
T}@T{
查看参数是否填
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
写正确
T}
T{
2
T}@T{
\-23
T}@T{
SDB_DMS_NOTEXIST
T}@T{
集合不存在
T}@T{
检查集合是否存
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
在
T}
T{
3
T}@T{
\-34
T}@T{
SDB_DMS_CS_NOTEXIST
T}@T{
集合空间不存在
T}@T{
检查集合空间是
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
否存在
T}
T{
4
T}@T{
\-38
T}@T{
SDB_IXM_DUP_KEY
T}@T{
索引键已存在
T}@T{
检查插入记录的
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
索引键是否存在
T}
.TE
.PP
当异常抛出时，可以通过 getLastErrMsg() 获取错误信息或通过 getLastError()
获取错误码。更多错误处理可以参考常见错误处理指南。
.SH 版本
.PP
v3.4 及以上版本
.SH 示例
.IP \[bu] 2
在集合 sample.employee 中插入一条记录
.RS 2
.IP
.nf
\f[C]
> db.sample.employee.insert({name: "Tom", age: 20})
\f[]
.fi
.RE
.IP \[bu] 2
在集合 sample.employee 中插入多条记录
.RS 2
.IP
.nf
\f[C]
> db.sample.employee.insert([{_id: 20, name: "Mike", age: 15}, {name: "John", age: 25, phone: 123}])
\f[]
.fi
.RE
.IP \[bu] 2
在集合 sample.employee 中插入拥有重复 _id 键的多条记录，并指定参数 flag 为
SDB_INSERT_CONTONDUP
.RS 2
.IP
.nf
\f[C]

> db.sample.employee.insert([{_id: 1, a: 1}, {_id: 1, b: 2}, {_id: 3, c: 3}], SDB_INSERT_CONTONDUP)
> db.sample.employee.find()
{
  "_id": 1,
  "a": 1,
}
{
  "_id": 3,
  "c": 3
}
\f[]
.fi
.RE
.IP \[bu] 2
在集合 sample.employee 中插入多条记录，并指定参数 ReturnOID 为 true
.RS 2
.IP
.nf
\f[C]
> db.sample.employee.insert([{a: 1}, {b: 1}], {ReturnOID: true})
{
    "_id": [
        {
            "$oid": "5bececdf6404b9295a63cacb"
        },
        {
            "$oid": "5bececdf6404b9295a63cacc"
        }
    ]
    "InsertedNum": 2,
    "DuplicatedNum": 0
}
\f[]
.fi
.RE
.IP \[bu] 2
在集合 sample.employee 中创建自增字段，并插入一条记录
.RS 2
.IP
.nf
\f[C]
> db.sample.employee.createAutoIncrement({Field: "ID"})
> db.sample.employee.insert({a: 1})
{
    "InsertedNum": 1,
    "DuplicatedNum": 0,
    "LastGenerateID": 1
}
\f[]
.fi
.RE
