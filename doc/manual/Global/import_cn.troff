.\"t
.\" Automatically generated by Pandoc 1.18
.\"
.TH "import" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH 名称
.PP
import \- 导入执行指定的 js 文件。
.SH 语法
.PP
\f[B]import(<filename>)\f[]
.SH 类别
.PP
Global
.SH 描述
.PP
在编写新的js脚本时存在重用现有脚本的可能性。可通过该命令将 js 文件导入并执行。
.PP
\f[B]Note:\f[]
.IP "1." 3
如果import()嵌套导入同个文件多次，会跳过后续的文件导入。
.PD 0
.P
.PD
.IP "2." 3
在一段js脚本中，如果导入的文件和该脚本对同个函数有多个定义，那么
在先导入文件再在脚本中定义相同函数的场景下，实际生效的函数定义将
会是导入文件中的函数定义。导致这个现象的原因是js运行前会先读取该
段js脚本的函数定义，而导入的文件中的函数定义是在运行import方法时
才读取的，这导致了最终生效的是导入文件中的函数定义。通过将脚本中
的函数放置到别的文件中再导入，可以规避这个问题。
.SH 参数
.IP \[bu] 2
\f[C]filename\f[] ( \f[I]String\f[]， \f[I]必填\f[] )
.RS 2
.PP
js文件的相对路径名或全路径名。
.RE
.SH 返回值
.PP
成功：导入文件的返回值。
.PP
失败：抛出异常。
.SH 错误
.PP
\f[C]import()\f[]函数常见异常如下：
.PP
.TS
tab(@);
l l l l l.
T{
0
T}@T{
错误码
T}@T{
错误类型
T}@T{
可能的原因
T}@T{
解决方法
T}
_
T{
1
T}@T{
\-152
T}@T{
SDB_SPT_EVAL_FAIL
T}@T{
导入的文件执行
T}@T{
根据错误信息提
T}
T{
T}@T{
T}@T{
T}@T{
失败
T}@T{
供的行号解决问
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
题
T}
.TE
.PP
当异常抛出时，可以通过getLastError()获取错误码，
或通过getLastErrMsg()获取错误信息。 可以参考常见错误处理指南了解更多内容。
.SH 版本
.PP
v2.9及以上版本。
.SH 示例
.IP "1." 3
导入执行 helloWorld.js 文件
.RS 4
.IP "1)" 3
helloWorld.js 内容如下：
.IP
.nf
\f[C]
function sayHello()
{
    println( "hello world" ) ;
}
println( "import helloWorld.js" ) ;
\f[]
.fi
.IP "2)" 3
导入执行 helloWorld.js 并调用定义的方法
.IP
.nf
\f[C]
> import( \[aq]helloWorld.js\[aq] )
import helloWorld.js
Takes 0.000901s.
> sayHello()
hello world
Takes 0.000475s.
\f[]
.fi
.RE
.IP "2." 3
函数重复定义问题及规避方法
.RS 4
.IP \[bu] 2
问题描述举例
.RS 2
.IP "1)" 3
funcDef.js 内容如下：
.IP
.nf
\f[C]
function test()
{
    println( "defined in funcDef.js" ) ;
}  
\f[]
.fi
.IP "2)" 3
test.js 内容如下：
.IP
.nf
\f[C]
import( \[aq]./funcDef.js\[aq] ) ;
function test()
{
    println( \[aq]defined in test.js\[aq] ) ;
}
test() ;
\f[]
.fi
.IP "3)" 3
使用 sdb 执行 test.js 文件
.IP
.nf
\f[C]
$ ./sdb \-f test.js 
defined in funcDef.js
\f[]
.fi
.PP
可以发现，实际生效的是 funcDef.js 中的函数定义。
.RE
.IP \[bu] 2
规避方法
.RS 2
.PP
可以通过将脚本中的函数定义放置到单独的文件再导入来规避这个问题
.IP "1)" 3
增加文件 userDef.js,内容如下：
.IP
.nf
\f[C]
function test()
{
    println( \[aq]defined in userDef.js\[aq] ) ;
}
\f[]
.fi
.IP "2)" 3
test.js 内容改为：
.IP
.nf
\f[C]
import( \[aq]./funcDef.js\[aq] ) ;
import( \[aq]./userDef.js\[aq] ) ;
test() ;
\f[]
.fi
.IP "3)" 3
使用 sdb 执行 test.js 文件
.IP
.nf
\f[C]
$ ./sdb \-f test.js 
defined in userDef.js
\f[]
.fi
.PP
可以发现，实际生效的是 userDef.js 中的函数定义。
.RE
.RE
