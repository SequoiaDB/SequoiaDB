.\"t
.\" Automatically generated by Pandoc 1.18
.\"
.TH "list" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH NAME
.PP
list \- get list
.SH SYNOPSIS
.PP
\f[B]db.list(<listType>,[cond],[sel],[sort])\f[]
.SH CATEGORY
.PP
Sdb
.SH DESCRIPTION
.PP
This function is used to get the specified list and view the current system
status.
The list is a lightweight command.
.SH PARAMETERS
.PP
.TS
tab(@);
l l l l l.
T{
0
T}@T{
Name
T}@T{
Type
T}@T{
Description
T}@T{
Required or Not
T}
_
T{
1
T}@T{
listType
T}@T{
macro
T}@T{
The list to be obtained,
T}@T{
Required
T}
T{
T}@T{
T}@T{
T}@T{
the value can refer to
T}@T{
T}
T{
T}@T{
T}@T{
T}@T{
List type.
T}@T{
T}
T{
2
T}@T{
cond
T}@T{
object
T}@T{
Match condictions and
T}@T{
Not
T}
T{
T}@T{
T}@T{
T}@T{
position parameter.
T}@T{
T}
T{
3
T}@T{
sel
T}@T{
object
T}@T{
Select the returned
T}@T{
Not
T}
T{
T}@T{
T}@T{
T}@T{
field name.
When it is
T}@T{
T}
T{
T}@T{
T}@T{
T}@T{
null, return all field
T}@T{
T}
T{
T}@T{
T}@T{
T}@T{
names.
T}@T{
T}
T{
4
T}@T{
sort
T}@T{
object
T}@T{
Sort the returned
T}@T{
Not
T}
T{
T}@T{
T}@T{
T}@T{
records by the selected
T}@T{
T}
T{
T}@T{
T}@T{
T}@T{
field.
1 is ascending
T}@T{
T}
T{
T}@T{
T}@T{
T}@T{
and \-1 is descending.
T}@T{
T}
.TE
.RS
.PP
\f[B]Note:\f[]
.IP \[bu] 2
sel parameter is a json structure,like:{Field name:Field value}，The field value
is generally specified as an empty string.The field name specified in sel exists
in the record,setting the field value does not take effect;return the field name
and field value specified in the sel otherwise.
.IP \[bu] 2
The field value type in the record is an array.User can specify the field name
in sel,and use "." operator with double marks ("") to refer to the array
elements.
.RE
.SH RETURN VALUE
.PP
When the function executes successfully, it will return an object of type
SdbCursor.
.PP
When the function fails, an exception will be thrown and an error message will
be printed.
.SH ERRORS
.PP
When the exception happens，use getLastErrMsg() to get the error message or use
getLastError() to get the error code.
For more details, refer to Troubleshooting.
.SH VERSION
.PP
v2.0 and above
.SH EXAMPLES
.IP \[bu] 2
Specify the value of listType as SDB_LIST_CONTEXTS.
.RS 2
.IP
.nf
\f[C]
> db.list( SDB_LIST_CONTEXTS )
{
  "NodeName": "ubuntu\-200\-043:11850",
  "SessionID": 29,
  "TotalCount": 1,
  "Contexts": [
    254
  ]
}
\f[]
.fi
.RE
.IP \[bu] 2
Specify the value of listType as SDB_LIST_STORAGEUNITS.
.RS 2
.IP
.nf
\f[C]
> db.list( SDB_LIST_STORAGEUNITS )
{
  "NodeName": "ubuntu\-200\-043:11830",
  "Name": "sample",
  "UniqueID": 61,
  "ID": 4094,
  "LogicalID": 186,
  "PageSize": 65536,
  "LobPageSize": 262144,
  "Sequence": 1,
  "NumCollections": 1,
  "CollectionHWM": 1,
  "Size": 306315264
}
\f[]
.fi
.RE
.IP \[bu] 2
Return reccords with LogicalID greater than 1 and only return the Name field and
ID field for each record.The records are in ascending order according to the
value of the Name field.
.RS 2
.IP
.nf
\f[C]
> db.list( SDB_LIST_STORAGEUNITS, { "LogicalID": { $gt: 1 } }, { Name: "", ID: "" }, { Name: 1 } )
{
  "Name": "sample",
  "ID": 4094
}
\f[]
.fi
.RE
.IP \[bu] 2
Specify the command position parameter and only return the context of the data
group db1.
.RS 2
.IP
.nf
\f[C]
> db.list( SDB_LIST_CONTEXTS, { GroupName: "db1" } )
{
  "NodeName": "ubuntu\-200\-043:20000",
  "SessionID": 29,
  "TotalCount": 1,
  "Contexts": [
    254
  ]
}
\f[]
.fi
.RE
