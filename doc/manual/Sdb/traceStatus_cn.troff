.\"t
.\" Automatically generated by Pandoc 1.18
.\"
.TH "traceStatus" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH 名称
.PP
traceStatus \- 查看当前程序跟踪的状态
.SH 语法
.PP
\f[B]\f[I]db.traceStatus()\f[]\f[]
.SH 类别
.PP
Sdb
.SH 描述
.PP
开启数据库引擎跟踪功能后，用户可使用该函数查看当前程序跟踪的状态。
.SH 参数
.PP
无
.SH 返回值
.PP
函数执行成功时，将通过游标（cursor）方式返回当前程序跟踪状态，返回的字段信息如下：
.PP
.TS
tab(@);
l l l l.
T{
0
T}@T{
参数名
T}@T{
类型
T}@T{
描述
T}
_
T{
1
T}@T{
TraceStarted
T}@T{
boolean
T}@T{
跟踪是否开始
T}
T{
T}@T{
T}@T{
T}@T{
"true"：跟踪开始
T}
T{
T}@T{
T}@T{
T}@T{
 "false"：跟踪
T}
T{
T}@T{
T}@T{
T}@T{
未开始
T}
T{
2
T}@T{
Wrapped
T}@T{
boolean
T}@T{
跟踪文件是否翻
T}
T{
T}@T{
T}@T{
T}@T{
转 "true"：已
T}
T{
T}@T{
T}@T{
T}@T{
翻转 "false"：
T}
T{
T}@T{
T}@T{
T}@T{
未翻转
T}
T{
3
T}@T{
Size
T}@T{
int64
T}@T{
跟踪文件大小
T}
T{
4
T}@T{
FreeSize
T}@T{
int64
T}@T{
可用内存大小
T}
T{
5
T}@T{
Mask
T}@T{
string
T}@T{
所跟踪的模块，
T}
T{
T}@T{
T}@T{
T}@T{
模块说明可参考
T}
T{
T}@T{
T}@T{
T}@T{
SdbTraceOption 的
T}
T{
T}@T{
T}@T{
T}@T{
conponent 参数
T}
T{
6
T}@T{
BreakPoint
T}@T{
string
T}@T{
所跟踪的函数断
T}
T{
T}@T{
T}@T{
T}@T{
点
T}
T{
7
T}@T{
Threads
T}@T{
int32
T}@T{
线程号
T}
T{
8
T}@T{
ThreadTypes
T}@T{
string
T}@T{
线程类型，类型
T}
T{
T}@T{
T}@T{
T}@T{
说明可参考
T}
T{
T}@T{
T}@T{
T}@T{
SdbTraceOption 的
T}
T{
T}@T{
T}@T{
T}@T{
threadTypes 参数
T}
T{
9
T}@T{
FunctionNames
T}@T{
string
T}@T{
所跟踪的函数名
T}
.TE
.PP
函数执行失败时，将抛出异常并输出错误信息。
.SH 错误
.PP
当异常抛出时，可以通过 getLastErrMsg() 获取错误信息或通过 getLastError()
获取[错误码][error_code]。更多错误处理可以参考常见错误处理指南。
.SH 版本
.PP
v2.0 及以上版本
.SH 示例
.IP \[bu] 2
开启数据库引擎程序跟踪的功能
.RS 2
.IP
.nf
\f[C]
> db.traceOn( 100, new SdbTraceOption().components( "dms" ).functionNames( "_dmsStorageUnit::insertRecord" ).threadTypes( "RestListener" ) )
\f[]
.fi
.RE
.IP \[bu] 2
查看当前程序跟踪的状态：
.RS 2
.IP
.nf
\f[C]
> db.traceStatus()
{
  "TraceStarted": true,
  "Wrapped": false,
  "Size": 104857600,
  "FreeSize": 104857600,
  "PadSize": 0,
  "Mask": [
    "dms"
  ],
  "BreakPoint": [],
  "Threads": [],
  "ThreadTypes": [
    "RestListener"
  ],
  "FunctionNames": [
    "_dmsStorageUnit::insertRecord"
  ]
}
\f[]
.fi
.RE
