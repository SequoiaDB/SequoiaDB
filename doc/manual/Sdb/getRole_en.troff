.\"t
.\" Automatically generated by Pandoc 1.18
.\"
.TH "getRole" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH NAME
.PP
getRole \- Get role information
.SH SYNOPSIS
.PP
\f[B]db.getRole(<rolename>, [options])\f[]
.SH CATEGORY
.PP
Sdb
.SH DESCRIPTION
.PP
This function is used to retrieve information about a specified custom role
Custom Roles and Built\-in Roles.
.SH PARAMETERS
.IP \[bu] 2
rolename (\f[I]string, required\f[]) \- Specifies the role by its name.
.IP \[bu] 2
options (\f[I]object, optional\f[]) \- Additional parameters.
.IP \[bu] 2
ShowPrivileges (\f[I]boolean\f[]) \- Show the role\[aq]s privileges.
Default value is \f[C]false\f[].
.SH RETURN VALUE
.PP
Upon successful execution, this function will return a BSONObj through which the
role information can be obtained.
.PP
Upon failure, it throws an exception and outputs an error message.
.SH ERRORS
.PP
Common exceptions are as follows:
.PP
.TS
tab(@);
l l l l l.
T{
0
T}@T{
Error Code
T}@T{
Error Type
T}@T{
Description
T}@T{
Solution
T}
_
T{
1
T}@T{
\-409
T}@T{
SDB_AUTH_ROLE_NOT_EXIST
T}@T{
The specified role does
T}@T{
T}
T{
T}@T{
T}@T{
T}@T{
not exist
T}@T{
T}
.TE
.PP
When an exception is thrown, you can retrieve the error message using
getLastErrMsg() or the error code using getLastError().
For more error handling, refer to the Common Error Handling Guide.
.SH VERSION
.PP
v5.8 and above
.SH EXAMPLES
.IP \[bu] 2
Get information about the role named \f[C]foo_developer\f[] in the cluster,
without enabling the \f[C]ShowPrivileges\f[] option.
.RS 2
.IP
.nf
\f[C]
> db.getRole("foo_developer")
{
    "_id": {
        "$oid": "64c0eb5e8c7c328f60bc6d71"
    },
    "Role": "foo_developer",
    "Roles": [
        "_foo.readWrite"
    ],
    "InheritedRoles": [
        "_foo.readWrite"
    ]
}
\f[]
.fi
.RE
.IP \[bu] 2
Get information about the role named \f[C]foo_developer\f[] in the cluster, with
the \f[C]ShowPrivileges\f[] option enabled.
.RS 2
.IP
.nf
\f[C]
> db.getRole("foo_developer", {ShowPrivileges:true})
{
    "_id": {
        "$oid": "64c0eb5e8c7c328f60bc6d71"
    },
    "Role": "foo_developer",
    "Privileges": [
        {
        "Resource": {
            "Cluster": true
        },
        "Actions": [
            "snapshot"
        ]
        }
    ],
    "Roles": [
        "_foo.readWrite"
    ],
    "InheritedRoles": [
        "_foo.readWrite"
    ],
    "InheritedPrivileges": [
        {
        "Resource": {
            "Cluster": true
        },
        "Actions": [
            "snapshot"
        ]
        },
        {
        "Resource": {
            "cs": "foo",
            "cl": ""
        },
        "Actions": [
            "find",
            "insert",
            "update",
            "remove",
            "getDetail"
        ]
        }
    ]
}
\f[]
.fi
.RE
.IP \[bu] 2
Get information about the built\-in role \f[C]_foo.readWrite\f[] in the cluster,
with the \f[C]ShowPrivileges\f[] option enabled.
.RS 2
.IP
.nf
\f[C]
> db.getRole("_foo.readWrite", {ShowPrivileges:true})
{
    "Role": "_foo.readWrite",
    "Roles": [],
    "InheritedRoles": [],
    "Privileges": [
        {
        "Resource": {
            "cs": "foo",
            "cl": ""
        },
        "Actions": [
            "find",
            "insert",
            "update",
            "remove",
            "getDetail"
        ]
        }
    ],
    "InheritedPrivileges": [
        {
        "Resource": {
            "cs": "foo",
            "cl": ""
        },
        "Actions": [
            "find",
            "insert",
            "update",
            "remove",
            "getDetail"
        ]
        }
    ]
}
\f[]
.fi
.RE
