.\"t
.\" Automatically generated by Pandoc 1.18
.\"
.TH "eval" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH NAME
.PP
eval \- call the stored procedure
.SH SYNOPSIS
.PP
\f[B]db.eval(<code>)\f[]
.SH CATEGORY
.PP
Sdb
.SH DESCRIPTION
.PP
This function is used to call the stored peocedure that has been created in a
statement.
Users can fill in JavaScript sentences according to needs.
.SH PARAMETERS
.PP
.TS
tab(@);
l l l l l.
T{
0
T}@T{
Name
T}@T{
Type
T}@T{
Description
T}@T{
Required or not
T}
_
T{
1
T}@T{
name
T}@T{
string
T}@T{
JavaScript statement or
T}@T{
required
T}
T{
T}@T{
T}@T{
T}@T{
created stored
T}@T{
T}
T{
T}@T{
T}@T{
T}@T{
procedure function.
T}@T{
T}
.TE
.RS
.PP
\f[B]Note:\f[]
.PP
The stored procedure will shield all standard output and error.
At the same time, it is not recommended to add output statements during function
execution.
A large amount of output may cause the stored procedure to fail.
.RE
.SH RETURN VALUE
.IP \[bu] 2
When the function executes successfully, the result will be returned according
to the statement.
The return value can be directly assigned to another variable, such as:
\f[C]var a = db.eval( \[aq]db.sample.employee\[aq] ); a.find();\f[].
.IP \[bu] 2
When the function fails, an exception will be thrown and an error message will
be printed.
.IP \[bu] 2
The operation will not return until the function execution ends.
Quitting halfway terminates the entire execution, but the code that has been
executed will not be rolled back.
.IP \[bu] 2
The length of the custom return value has a certain limit, refer to the maximum
length of the SequoiaDB inserted record.
.IP \[bu] 2
Support for defining temporary functions, such as:
\f[C]db.eval( \[aq]function sum(x,y){return x+y;} sum(1,2)\[aq] )\f[].
.IP \[bu] 2
The use of global db is same as createProcedure().
.SH ERRORS
.PP
When the exception happens, use getLastErrMsg() to get the error message or use
getLastError() to get the error code.
For more details, refer to Troubleshooting.
.SH VERSION
.PP
v2.0 and above
.SH EXAMPLES
.IP \[bu] 2
Call the stored procedure function "sum" through eval().
.RS 2
.IP
.nf
\f[C]
//Initially, the sum() method does not exist, and the exception information is returned.
> var a = db.eval( \[aq]sum(1,2)\[aq] );
{ "errmsg": "(nofile):1 ReferenceError: getCL is not defined", "retCode": \-152 }
(nofile):0 uncaught exception: \-152
//Initialize sum().
> db.createProcedure( function sum(x,y){return x+y;} )
//Call sum().
> db.eval( \[aq]sum(1,2)\[aq] )
3
\f[]
.fi
.RE
.IP \[bu] 2
Fill in the JavaScript statement through eval() and execute the statement.
.RS 2
.IP
.nf
\f[C]
> var ret = db.eval( "db.sample.employee" )
> ret.find()
{
  "_id": {
    "$oid": "5248d3867159ae144a000000"
  },
  "a": 1
}
{
  "_id": {
    "$oid": "5248d3897159ae144a000001"
  },
  "a": 2
}...
\f[]
.fi
.RE
