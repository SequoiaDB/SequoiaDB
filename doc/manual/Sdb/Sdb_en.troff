.\"t
.\" Automatically generated by Pandoc 1.18
.\"
.TH "Sdb" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH NAME
.PP
Sdb \- connection SequoiaDB object.
.SH SYNOPSIS
.PP
\f[B]var db = new Sdb( [hostname], [svcname] )\f[]
.PP
\f[B]var db = new Sdb( [hostname], [svcname], [username], [password] )\f[]
.PP
\f[B]var db = new Sdb( [hostname], [svcname], [User] )\f[]
.PP
\f[B]var db = new Sdb( [hostname], [svcname], [CipherUser] )\f[]
.SH CATEGORY
.PP
Sdb
.SH DESCRIPTION
.PP
Create a Sdb object to connect to the SequoiaDB.
.SH PARAMETERS
.PP
.TS
tab(@);
l l l l l l.
T{
0
T}@T{
Name
T}@T{
Type
T}@T{
Default
T}@T{
Description
T}@T{
Required or not
T}
_
T{
1
T}@T{
hostname
T}@T{
string
T}@T{
localhost
T}@T{
target hostname
T}@T{
not
T}
T{
2
T}@T{
svcname
T}@T{
int
T}@T{
11810
T}@T{
target svcname
T}@T{
not
T}
T{
3
T}@T{
username
T}@T{
string
T}@T{
null
T}@T{
username
T}@T{
not
T}
T{
4
T}@T{
password
T}@T{
string
T}@T{
null
T}@T{
password
T}@T{
not
T}
T{
5
T}@T{
User
T}@T{
object
T}@T{
\-\-\-
T}@T{
User object
T}@T{
not
T}
T{
6
T}@T{
CipherUser
T}@T{
object
T}@T{
\-\-\-
T}@T{
CipherUser object
T}@T{
not
T}
.TE
.RS
.PP
\f[B]Note:\f[]
.RE
.RS
.IP \[bu] 2
Use createUsr() to create a user and set the password.
.RE
.RS
.IP \[bu] 2
If the SequoiaDB has users, you must use username and password to create the Sdb
object.
.RE
.SH RETURN VALUE
.PP
On success, return an object of Sdb.
.PP
On error, exception will be thrown.
.SH ERRORS
.PP
The exceptions of \f[C]Sdb()\f[] are as below:
.PP
.TS
tab(@);
l l l l l.
T{
0
T}@T{
Error Code
T}@T{
Error Type
T}@T{
Description
T}@T{
Solution
T}
_
T{
1
T}@T{
\-15
T}@T{
SDB_NETWORK
T}@T{
Network error.
T}@T{
Check the hostname and
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
port are reachable.
T}
T{
2
T}@T{
\-79
T}@T{
SDB_NET_CANNOT_CONNECT
T}@T{
Unable to connect to
T}@T{
Check that the
T}
T{
T}@T{
T}@T{
T}@T{
the address
T}@T{
configuration
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
information of the
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
address, port and node
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
are correct.
T}
T{
3
T}@T{
\-104
T}@T{
SDB_CLS_NOT_PRIMARY
T}@T{
Primary node does not
T}@T{
Check if the current
T}
T{
T}@T{
T}@T{
T}@T{
exit
T}@T{
replicaGroup has a node
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
with "isPrimary" being
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
"true".
Start the node
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
if there is a node
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
that is not started in
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
the current
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
replicaGroup.
T}
T{
4
T}@T{
\-250
T}@T{
SDB_CLS_NODE_BSFAULT
T}@T{
The node is not in
T}@T{
Check the node status
T}
T{
T}@T{
T}@T{
T}@T{
normal status
T}@T{
of the current
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
replicaGroup.
Like
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
check if the catalog
T}
T{
T}@T{
T}@T{
T}@T{
T}@T{
node is started.
T}
.TE
.PP
When exception happen, use getLastError() to get the error code and use
getLastErrMsg() to get error message.
For more detial, please reference to Troubleshooting.
.SH HISTORY
.PP
Since v1.12
.SH EXAMPLES
.IP "1." 3
Create a Sdb object and connect to the SequoiaDB, using the default hostname and
svcname.
.nf
\f[C]
> var db = new Sdb()
\f[]
.fi
.RE
.IP "2." 3
Create a Sdb object and connect to the SequoiaDB on the specified host,
"sdbserver1".
.nf
\f[C]
> var db = new Sdb( "sdbserver1", 11810 )
\f[]
.fi
.RE
.IP "3." 3
Create a Sdb object and connect to the SequoiaDB on the specified host using the
specified username and password.
.nf
\f[C]
> var db = new Sdb( "sdbserver1", 11810, "sdbadmin", "sdbadmin" )
\f[]
.fi
.RE
.IP "4." 3
Create a Sdb object and connect to the SequoiaDB on the specified host using
User object.
.nf
\f[C]
> var a = User( "sdbadmin" ).promptPassword()
password:
sdbadmin
> var db = new Sdb( "sdbserver1", 11810, a )
\f[]
.fi
.RE
.IP "5." 3
Create a Sdb object and connect to the SequoiaDB on the specified host using
CipherUser object ( User information with username \[aq]sdbadmin\[aq] and
password \[aq]sdbadmin\[aq] must exist in the cipher test file.
For details on how to add and delete cipher test information in cipher test
file, please see sdbpasswd for details ).
.nf
\f[C]
> var a = CipherUser( "sdbadmin" )
> var db = new Sdb( "sdbserver1", 11810, a )
\f[]
.fi
.RE
