.\"t
.\" Automatically generated by Pandoc 1.18
.\"
.TH "createUsr" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH NAME
.PP
createUsr \- Create a database user to prevent illegal users from illegally
operating the database.
.SH SYNOPSIS
.PP
\f[B]\f[I]db.createUsr( <name>, <password>, [options] )\f[]\f[]
.PP
\f[B]\f[I]db.createUsr( <User>, [options] )\f[]\f[]
.PP
\f[B]\f[I]db.createUsr( <CipherUser>, [options] )\f[]\f[]
.SH CATEGORY
.PP
Sdb
.SH DESCRIPTION
.PP
Create a database user to prevent illegal users from illegally operating the
database.
.SH PARAMETERS
.PP
.TS
tab(@);
l l l l l l.
T{
0
T}@T{
Name
T}@T{
Type
T}@T{
Default
T}@T{
Description
T}@T{
Required or not
T}
_
T{
1
T}@T{
name
T}@T{
string
T}@T{
\-\-\-
T}@T{
username
T}@T{
yes
T}
T{
2
T}@T{
password
T}@T{
string
T}@T{
\-\-\-
T}@T{
password
T}@T{
yes
T}
T{
3
T}@T{
User
T}@T{
object
T}@T{
\-\-\-
T}@T{
User object
T}@T{
yse
T}
T{
4
T}@T{
CipherUser
T}@T{
object
T}@T{
\-\-\-
T}@T{
CipherUser object
T}@T{
yes
T}
T{
5
T}@T{
options
T}@T{
Json
T}@T{
null
T}@T{
extended options
T}@T{
not
T}
.TE
.PP
The detail description of \[aq]options\[aq] parameter is as follow:
.PP
.TS
tab(@);
l l l l.
T{
0
T}@T{
Attributes
T}@T{
Type
T}@T{
Description
T}
_
T{
1
T}@T{
AuditMask
T}@T{
string
T}@T{
The configuration mask
T}
T{
T}@T{
T}@T{
T}@T{
of the user auditlog,
T}
T{
T}@T{
T}@T{
T}@T{
the default value is "
T}
T{
T}@T{
T}@T{
T}@T{
SYSTEM|DDL|DCL", and
T}
T{
T}@T{
T}@T{
T}@T{
the values are as
T}
T{
T}@T{
T}@T{
T}@T{
follows:ACCESS,
T}
T{
T}@T{
T}@T{
T}@T{
CLUSTER, SYSTEM, DCL,
T}
T{
T}@T{
T}@T{
T}@T{
DDL, DML, DQL, INSERT,
T}
T{
T}@T{
T}@T{
T}@T{
UPDATE, DELETE, OTHER,
T}
T{
T}@T{
T}@T{
T}@T{
ALL, NONE●
T}
T{
T}@T{
T}@T{
T}@T{
Supports using \[aq]bitwise
T}
T{
T}@T{
T}@T{
T}@T{
or\[aq](|) to connect
T}
T{
T}@T{
T}@T{
T}@T{
multiple masks, and \[aq]
T}
T{
T}@T{
T}@T{
T}@T{
logic not\[aq](!)
T}
T{
T}@T{
T}@T{
T}@T{
prohibits a mask.
T}
T{
T}@T{
T}@T{
T}@T{
● A value of "ALL"
T}
T{
T}@T{
T}@T{
T}@T{
indicates that all
T}
T{
T}@T{
T}@T{
T}@T{
configuration masks are
T}
T{
T}@T{
T}@T{
T}@T{
selected.● A
T}
T{
T}@T{
T}@T{
T}@T{
value of "NONE"
T}
T{
T}@T{
T}@T{
T}@T{
indicates that all
T}
T{
T}@T{
T}@T{
T}@T{
configuration masks are
T}
T{
T}@T{
T}@T{
T}@T{
prohibited.
That is,
T}
T{
T}@T{
T}@T{
T}@T{
the audit function is
T}
T{
T}@T{
T}@T{
T}@T{
turned off.
T}
T{
2
T}@T{
Role
T}@T{
String
T}@T{
User role in old
T}
T{
T}@T{
T}@T{
T}@T{
version.
Currently only
T}
T{
T}@T{
T}@T{
T}@T{
supports built\-in
T}
T{
T}@T{
T}@T{
T}@T{
roles in the system,
T}
T{
T}@T{
T}@T{
T}@T{
and the value list: "
T}
T{
T}@T{
T}@T{
T}@T{
admin", "monitor".
"
T}
T{
T}@T{
T}@T{
T}@T{
admin" is the
T}
T{
T}@T{
T}@T{
T}@T{
administrator role,
T}
T{
T}@T{
T}@T{
T}@T{
which can perform any
T}
T{
T}@T{
T}@T{
T}@T{
operation.
"monitor" is
T}
T{
T}@T{
T}@T{
T}@T{
the monitoring role,
T}
T{
T}@T{
T}@T{
T}@T{
which can only perform
T}
T{
T}@T{
T}@T{
T}@T{
snapshot and list
T}
T{
T}@T{
T}@T{
T}@T{
operations.
T}
T{
3
T}@T{
Roles
T}@T{
Array
T}@T{
User role list.
You can
T}
T{
T}@T{
T}@T{
T}@T{
grant multiple roles
T}
T{
T}@T{
T}@T{
T}@T{
to users.
For details,
T}
T{
T}@T{
T}@T{
T}@T{
please refer to Role\-
T}
T{
T}@T{
T}@T{
T}@T{
based Access Control
T}
.TE
.RS
.PP
\f[B]Note:\f[]
.IP \[bu] 2
This interface can only be used in cluster mode.
.IP \[bu] 2
When a user is created in the database, the username and password must be
specified to connect to the database.
.IP \[bu] 2
For database username and password restrications, refer to database limit.
.RE
.SH RETURN VALUE
.PP
On success, return void.
.PP
On error, exception will be thrown.
.SH ERRORS
.PP
when exception happen, use getLastError() to get the error code and use
getLastErrMsg() to get error message.
For more detial, please reference to Troubleshooting.
.SH EXAMPLES
.IP "1." 3
Create a user with username \[aq]sdbadmin\[aq] and password \[aq]sdbadmin\[aq],
and set the audit log mask.
.nf
\f[C]
> db.createUsr( "sdbadmin", "sdbadmin", { AuditMask: "DDL|DML|!DQL" } )
\f[]
.fi
.RE
.IP "2." 3
Create a user with username \[aq]sdbadmin\[aq] and password \[aq]sdbadmin\[aq]
using User object.
.nf
\f[C]
> var a = User( "sdbadmin", "sdbadmin" )
> db.createUsr( a )
\f[]
.fi
.RE
.IP "3." 3
Create a user with username \[aq]sdbadmin\[aq] and password \[aq]sdbadmin\[aq]
using CipherUser object ( User information with username \[aq]sdbadmin\[aq] and
password \[aq]sdbadmin\[aq] must exist in the cipher test file.
For details on how to add and delete cipher test information in cipher test
file, please see sdbpasswd for details ).
.nf
\f[C]
> var a = CipherUser("sdbadmin")
> db.createUsr(a)
\f[]
.fi
.RE
