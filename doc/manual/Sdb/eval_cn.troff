.\"t
.\" Automatically generated by Pandoc 1.18
.\"
.TH "eval" "1" "" "SequoiaDB User Manuals" ""
.hy
.SH 名称
.PP
eval \- 调用存储过程
.SH 语法
.PP
\f[B]db.eval(<code>)\f[]
.SH 类别
.PP
Sdb
.SH 描述
.PP
该函数用于在语句中调用已经创建好的存储过程。用户可根据需要填入 JavaScript 语句。
.SH 参数
.PP
.TS
tab(@);
l l l l l.
T{
0
T}@T{
参数名
T}@T{
类型
T}@T{
描述
T}@T{
是否必填
T}
_
T{
1
T}@T{
code
T}@T{
string
T}@T{
JavaScript 语句或者
T}@T{
是
T}
T{
T}@T{
T}@T{
T}@T{
创建好的存储过
T}@T{
T}
T{
T}@T{
T}@T{
T}@T{
程函数
T}@T{
T}
.TE
.RS
.PP
\f[B]Note：\f[]
.PP
存储过程会屏蔽所有标准输出和标准错误。同时，不建议在函数执行时加入输出语句，大量的输出可能会导致存储过程运行失败。
.RE
.SH 返回值
.IP \[bu] 2
函数执行成功时，将按照语句返回结果。可以将返回值直接赋值给另一个变量，如：\f[C]var a = db.eval( \[aq]db.sample.employee\[aq] ); a.find();\f[]。
.IP \[bu] 2
函数执行失败时，将抛异常并输出错误信息。
.IP \[bu] 2
在函数执行结束前操作不会返回。中途退出则终止整个执行，但已经执行的代码不会被回滚。
.IP \[bu] 2
自定义返回值的长度有一定限制，参考 SequoiaDB 插入记录的最大长度。
.IP \[bu] 2
支持定义临时函数，如：\f[C]db.eval( \[aq]function sum(x,y){return x+y;} sum(1,2)\[aq] )\f[]。
.IP \[bu] 2
全局 db 使用方式与 createProcedure() 相同。
.SH 错误
.PP
当异常抛出时，可以通过 getLastErrMsg() 获取错误信息或通过 getLastError()
获取错误码。更多错误处理可以参考常见错误处理指南。
.SH 版本
.PP
v2.0 及以上版本
.SH 示例
.IP \[bu] 2
通过 eval() 调用存储过程函数 sum
.RS 2
.IP
.nf
\f[C]
//初始时 sum() 方法不存在，返回异常信息
> var a = db.eval( \[aq]sum(1,2)\[aq] );
{ "errmsg": "(nofile):1 ReferenceError: getCL is not defined", "retCode": \-152 }
(nofile):0 uncaught exception: \-152
//初始化 sum()
> db.createProcedure( function sum(x,y){return x+y;} )
//调用 sum()
> db.eval( \[aq]sum(1,2)\[aq] )
3
\f[]
.fi
.RE
.IP \[bu] 2
通过 eval() 填写 JavaScript 语句并执行
.RS 2
.IP
.nf
\f[C]
> var ret = db.eval( "db.sample.employee" )
> ret.find()
{
  "_id": {
    "$oid": "5248d3867159ae144a000000"
  },
  "a": 1
}
{
  "_id": {
    "$oid": "5248d3897159ae144a000001"
  },
  "a": 2
}...
\f[]
.fi
.RE
