# -*- Tcl -*-
#
# Licensed Materials - Property of IBM - RESTRICTED MATERIALS OF IBM
#
# IBM Confidential - OCO Source Materials
#
# Copyright (C) 2005-2010 IBM Corporation. All rights reserved.
#
# US Government Users Restricted Rights - Use, duplication or disclosure
# restricted by GSA ADP Schedule Contract with IBM Corp
#
# The source code for this program is not published or otherwise divested
# of its trade secrets, irrespective of what has been deposited within
# the U.S. Copyright Office.
#
#
#    AUTHOR:
#
#        Goh Kondoh
#
#    DESCRIPTION:
#
#        Attributes that relate to Java.
#        
#    MODIFICATIONS:
#
#        Date      UserID   Remark (newest to oldest)
#        --------  -------  ----------------------------------------------------
#        See ChangeLog for recent modifications



beam::resource_create {                 # resource representing memory allocated by "new"
    name = "java_heap_memory",          # identified as "java_heap_memory" to attributes
    display = "memory",                 # in complaints call it "memory"
    allocating_verb = "allocating",     # use these verbs when talking about memory
    allocated_verb = "allocated",
    freeing_verb = "garbage-collecting",# since there is no way of explicitly freeing
    freed_verb = "garbage-collected",   # these verbs should never be seen
    use_after_free = "error"
}


  beam::resource_create {
    name = "stream",
    display = "stream",
    allocating_verb = "opening",
    allocated_verb = "opened",
    freeing_verb = "closing",
    freed_verb = "closed",
    use_after_free = "ok"               # it is ok to call close() twice on a stream       
  }

  beam::resource_create {
    name = "socket",
    display = "socket",
    allocating_verb = "opening",
    allocated_verb = "opened",
    freeing_verb = "closing",
    freed_verb = "closed",
    use_after_free = "ok"               # it is ok to call close() twice on a socket       
  }

  beam::propinfo_create {               
      name = "java.io.InputStream state",  # opened or closed
      invariance = "none",    # only the object generated by a constructor has the property
      dependence = "calls",   # only some calls can change the state of a stream
      resource   = "stream"
  }

  beam::propinfo_create {               
      name = "java.io.OutputStream state",  # opened or closed
      invariance = "none",    # only the object generated by a constructor has the property
      dependence = "calls",   # only some calls can change the state of a stream
      resource   = "stream"
  }

  beam::propinfo_create {               
      name = "java.io.Writer state",  # opened or closed
      invariance = "none",    # only the object generated by a constructor has the property
      dependence = "calls",   # only some calls can change the state of a stream
      resource   = "stream"
  }
  
  beam::propinfo_create {               
      name = "java.net.Socket state",  # opened or closed
      invariance = "none",    # only the object generated by a constructor has the property
      dependence = "calls",   # only some calls can change the state of a socket
      resource   = "socket"
  }

# java.io.PipedInputStream state is like java.io.InputStream state, but
# has no resource, so that we do not report any leaks;
# the resource might be freed from the other end of the pipe 

  beam::propinfo_create {               
      name = "java.io.PipedInputStream state",  # opened or closed
      invariance = "none",    # only the object generated by a constructor has the property
      dependence = "calls",   # only some calls can change the state of a stream
  }

# java.io.PipedOutputStream state is like java.io.OutputStream state, but
# has no resource, so that we do not report any leaks;
# the resource might be freed from the other end of the pipe 

  beam::propinfo_create {               
      name = "java.io.PipedOutputStream state",  # opened or closed
      invariance = "none",    # only the object generated by a constructor has the property
      dependence = "calls",   # only some calls can change the state of a stream
  }

# this propinfo structure is used not only java.util.Collection but also java.util.Map
  beam::propinfo_create {               
      name = "java.util.Collection size",
      invariance = "none",    # only the object generated by a constructor has the property
      dependence = "calls",    # only some calls can change contents
      domain = "int"
  }

  beam::propinfo_create {               
      name = "java.util.Iterator state",  # with or without next element
      invariance = "none",    # only the object generated by a constructor has the property
      dependence = "calls"    # only some calls can change the state of a cursor
  }

  beam::propinfo_create {               
      name = "java.util.Enumeration state",  # with or without next element
      invariance = "none",    # only the object generated by a constructor has the property
      dependence = "calls"    # only some calls can change the state of a cursor
  }

  beam::propinfo_create {               
      name = "java.awt.Frame state",   # displayable or undesplayable
      invariance = "none",    # only the object generated by a constructor has the property
      dependence = "calls"    # only some calls can change the state of a frame
  }


  beam::propinfo_create {               
      name = "java.nio.Buffer mark",   # marked or unmarked
      invariance = "none",    # only the object generated by a constructor has the property
      dependence = "calls"    # only some calls can change the state of a mark
  }


  beam::propinfo_create {               
      name = "java.security.KeyStore initialization",# initialized or uninitialized
      invariance = "none",    # only the object generated by a constructor has the property
      dependence = "calls"    # only some calls can change initialization
  }
  

  beam::propinfo_create {               
      name = "java.security.Signature initialization",# initialized or uninitialized
      invariance = "none",    # only the object generated by a constructor has the property
      dependence = "calls"    # only some calls can change initialization
  }

# java.security.Signature state breaks the initialized state into sign_check and verify_check

  beam::propinfo_create {               
      name = "java.security.Signature state",   # uninitialized, sign_check, verify_check
      invariance = "none",    # only the object generated by a constructor has the property
      dependence = "calls"    # only some calls can change signature
  }

  beam::propinfo_create {               
      name = "java.io.PipedInputStream connection",    # connected, disconnected
      invariance = "none",    # only the object generated by a constructor has the property
      dependence = "calls"    # only some calls can change connection
  }

  beam::propinfo_create {               
      name = "java.io.PipedOutputStream connection",    # connected, disconnected
      invariance = "none",    # only the object generated by a constructor has the property
      dependence = "calls"    # only some calls can change connection
  }

  beam::propinfo_create {               
      name = "java.net.Socket connection",    # connected, disconnected
      invariance = "none",    # only the object generated by a constructor has the property
      dependence = "calls"    # only some calls can change connection
  }

  beam::propinfo_create {               
      name = "java.net.URLConnection connection",    # connected, disconnected
      invariance = "none",    # only the object generated by a constructor has the property
      dependence = "calls"    # only some calls can change connection
  }

  beam::propinfo_create {               
      name = "java.nio.channels.spi.AbstractInterruptibleChannel connection",    # connected, disconnected
      invariance = "none",    # only the object generated by a constructor has the property
      dependence = "calls"    # only some calls can change connection
  }

beam::function_attribute {
  assert if (index = 1, type = input, test_type = equal, test_value = 0)
} -signatures "com.ibm.beam.builtin.java_assert(boolean)"

# java.lang.Appendable
beam::function_attribute {
    property ( index = 2, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0),
    property ( index = 3, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0)
} -signatures "java.lang.Appendable.append(java.lang.CharSequence,int,int)"

beam::function_attribute {
    return_overlap ( return_index = return, points_into_index = this, fate = must )
} -names "java.lang.Appendable.append"

# java.lang.CharSequence
# java.lang.String
# java.lang.StringBuffer
# java.lang.StringBuilder
# java.util.List
# java.util.BitSet
# java.util.Collections
beam::function_attribute {
  property ( index = 1, property_type = requires, type = input, 
             test_type = greater_than_or_equal, test_value = 0)
} -signatures \
   "java.lang.CharSequence.charAt(int)" \
   "java.lang.String.codePointAt(int)" \
   "java.lang.String.offsetByCodePoints(int,int)" \
   "java.lang.String.substring(int)" \
   "java.lang.String.substring(int,int)" \
   "java.lang.StringBuffer.setLength(int)" \
   "java.lang.StringBuffer.setCharAt(int,char)" \
   "java.lang.StringBuffer.delete(int,int)" \
   "java.lang.StringBuffer.deleteCharAt(int)" \
   "java.lang.StringBuffer.replace(int,int,java.lang.String)" \
   "java.lang.StringBuffer.substring(int)" \
   "java.lang.StringBuilder.setLength(int)" \
   "java.lang.StringBuilder.setCharAt(int,char)" \
   "java.lang.StringBuilder.delete(int,int)" \
   "java.lang.StringBuilder.deleteCharAt(int)" \
   "java.lang.StringBuilder.replace(int,int,java.lang.String)" \
   "java.lang.StringBuilder.substring(int)" \
   "java.lang.Thread.sleep(long,int)" \
   "java.util.List.add(int,java.lang.Object)" \
   "java.util.List.addAll(int,java.util.Collection)" \
   "java.util.List.get(int)" \
   "java.util.List.remove(int)" \
   "java.util.List.set(int,java.lang.Object)" \
   "java.util.BitSet.BitSet(int)" \
   "java.util.BitSet.flip(int)" \
   "java.util.BitSet.set(int)" \
   "java.util.BitSet.set(int,boolean)" \
   "java.util.BitSet.clear(int)" \
   "java.util.BitSet.get(int)" \
   "java.util.Collections.nCopies(int,java.lang.Object)" \
   "java.util.Vector.Vector(int)" \
   "java.util.Vector.Vector(int,int)" \
   "java.util.Vector.elementAt(int)" \
   "java.util.Vector.removeElementAt(int)" \
   "java.util.WeakHashMap.WeakHashMap(int,float)" \
   "java.util.WeakHashMap.WeakHashMap(int)" \
   "java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)" \
   "java.io.CharArrayWriter.CharArrayWriter(int)" \
   "java.io.File.setLastModified(long)"

beam::function_attribute {
  property ( index = 1, property_type = requires, type = input, 
             test_type = greater_than_or_equal, test_value = 0)
} -names \
   "java.lang.StringBuffer.insert" \
   "java.lang.StringBuilder.insert"

# java.lang.CharSequence
# java.lang.String
# java.util.List
# java.util.BitSet
beam::function_attribute {
  property ( index = 1, property_type = requires, type = input, 
             test_type = greater_than_or_equal, test_value = 0),
  property ( index = 2, property_type = requires, type = input, 
             test_type = greater_than_or_equal, test_value = 0)
} -signatures \
   "java.lang.CharSequence.subSequence(int,int)" \
   "java.lang.StringBuffer.substring(int,int)" \
   "java.lang.StringBuilder.substring(int,int)" \
   "java.util.List.subList(int,int)" \
   "java.util.ArrayList.removeRange(int,int)" \
   "java.util.BitSet.flip(int,int)" \
   "java.util.BitSet.set(int,int)" \
   "java.util.BitSet.set(int,int,boolean)" \
   "java.util.BitSet.clear(int,int)" \
   "java.util.BitSet.get(int,int)"

namespace eval beam::attribute {

# java.lang.CharSequence
# java.lang.StringBuffer
# java.lang.StringBuilder
  beam::function_attribute $return_ge_0_like -signatures \
    "java.lang.CharSequence.length()" \
    "java.lang.StringBuffer.capacity()" \
    "java.lang.StringBuilder.capacity()" \
    "java.lang.Thread.enumerate(java.lang.Thread\[\])" \
    "java.lang.Thread.countStackFrames()"

# java.lang.Readable
# java.lang.Boolean
# java.lang.Character.Subset
# java.lang.Character.UnicodeBlock
# java.lang.Class
# java.lang.ClassLoader
# java.lang.Compiler
# java.lang.ProcessBuilder
# java.lang.Runtime
# java.lang.SecurityManager
# java.lang.String
# java.lang.StringBuffer
# java.lang.StringBuilder
# java.lang.reflect.AnnotatedElement
# java.util.Calendar
# java.util.Collection
# java.io.PrintStream
  beam::function_attribute $requires_arg_1_non_null_like -signatures \
    "java.lang.Readable.read(java.nio.CharBuffer)" \
    "java.lang.Boolean.compareTo(java.lang.Boolean)" \
    "java.lang.Character\$Subset.Subset(java.lang.String)" \
    "java.lang.Character\$UnicodeBlock.forName(java.lang.String)" \
    "java.lang.Class.isAssignableFrom(java.lang.Class)" \
    "java.lang.Class.getField(java.lang.String)" \
    "java.lang.Class.getMethod(java.lang.String,java.lang.Class...)" \
    "java.lang.Class.getDeclaredField(java.lang.String)" \
    "java.lang.Class.getDeclaredMethod(java.lang.String,java.lang.Class...)" \
    "java.lang.Class.getResourceAsStream(java.lang.String)" \
    "java.lang.ClassLoader.resolveClass(java.lang.Class)" \
    "java.lang.Compiler.command(java.lang.Object)" \
    "java.lang.Compiler.compileClass(java.lang.Class)" \
    "java.lang.Compiler.compileClasses(java.lang.String)" \
    "java.lang.ProcessBuilder.ProcessBuilder(java.util.List)" \
    "java.lang.ProcessBuilder.command(java.util.List)" \
    "java.lang.Runtime.load(java.lang.String)" \
    "java.lang.Runtime.loadLibrary(java.lang.String)" \
    "java.lang.SecurityManager.checkExec(java.lang.String)" \
    "java.lang.SecurityManager.checkLink(java.lang.String)" \
    "java.lang.SecurityManager.checkDelete(java.lang.String)" \
    "java.lang.SecurityManager.checkPropertyAccess(java.lang.String)" \
    "java.lang.SecurityManager.checkTopLevelWindow(java.lang.Object)" \
    "java.lang.SecurityManager.checkPackageAccess(java.lang.String)" \
    "java.lang.SecurityManager.checkPackageDefinition(java.lang.String)" \
    "java.lang.SecurityManager.checkMemberAccess(java.lang.Class,int)" \
    "java.lang.SecurityManager.checkSecurityAccess(java.lang.String)" \
    "java.lang.SecurityManager.checkAccept(java.lang.String,int)" \
    "java.lang.String.contains(java.lang.CharSequence)" \
    "java.lang.String.format(java.lang.String,java.lang.Object...)" \
    "java.lang.StringBuffer.StringBuffer(java.lang.CharSequence)" \
    "java.lang.StringBuffer.StringBuffer(java.lang.String)" \
    "java.lang.StringBuilder.StringBuilder(java.lang.CharSequence)" \
    "java.lang.StringBuilder.StringBuilder(java.lang.String)" \
    "java.lang.reflect.AnnotatedElement.isAnnotationPresent(java.lang.Class)" \
    "java.lang.reflect.AnnotatedElement.getAnnotation(java.lang.Class)" \
    "java.lang.System.getProperty(java.lang.String)" \
    "java.lang.System.getProperty(java.lang.String,java.lang.String)" \
    "java.lang.System.clearProperty(java.lang.String)" \
    "java.lang.System.getenv(java.lang.String)" \
    "java.lang.System.load(java.lang.String)" \
    "java.lang.System.loadLibrary(java.lang.String)" \
    "java.lang.System.mapLibraryName(java.lang.String)" \
    "java.lang.Thread.stop(java.lang.Throwable)" \
    "java.lang.Thread.holdsLock(java.lang.Object)" \
    "java.lang.ThreadGroup.ThreadGroup(java.lang.ThreadGroup,java.lang.String)" \
    "java.util.Calendar.compareTo(java.util.Calendar)" \
    "java.util.Collection.toArray(java.lang.Object\[\])" \
    "java.util.Collection.addAll(java.util.Collection)" \
    "java.util.Collection.containsAll(java.util.Collection)" \
    "java.util.Collection.removeAll(java.util.Collection)" \
    "java.util.Collections.frequency(java.util.Collection,java.lang.Object)" \
    "java.util.Currency.getSymbol(java.util.Locale)" \
    "java.util.Date.before(java.util.Date)" \
    "java.util.Date.after(java.util.Date)" \
    "java.util.Date.compareTo(java.util.Date)" \
    "java.util.EnumSet.noneOf(java.lang.Class)" \
    "java.util.EnumSet.allOf(java.lang.Class)" \
    "java.util.EnumSet.complementOf(java.util.EnumSet)" \
    "java.util.EventObject.EventObject(java.lang.Object)" \
    "java.util.Hashtable.get(java.lang.Object)" \
    "java.util.Hashtable.put(java.lang.Object,java.lang.Object)" \
    "java.util.Map.putAll(java.util.Map)" \
    "java.util.Hashtable.remove(java.lang.Object)" \
    "java.util.Queue.add(java.lang.Object) " \
    "java.util.Queue.offer(java.lang.Object) " \
    "java.util.SortedMap.tailMap(java.lang.Object) " \
    "java.util.Locale.Locale(java.lang.String)" \
    "java.util.Locale.setDefault(java.util.Locale)" \
    "java.util.Locale.getDisplayLanguage(java.util.Locale)" \
    "java.util.Locale.getDisplayCountry(java.util.Locale)" \
    "java.util.Locale.getDisplayVariant(java.util.Locale)" \
    "java.util.Locale.getDisplayName(java.util.Locale)" \
    "java.util.Observable.addObserver(java.util.Observer)" \
    "java.util.Properties.store(java.io.OutputStream,java.lang.String)" \
    "java.util.Properties.loadFromXML(java.io.InputStream)" \
    "java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String)" \
    "java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)" \
    "java.util.PropertyPermission.PropertyPermission(java.lang.String,java.lang.String)" \
    "java.util.PropertyResourceBundle.PropertyResourceBundle(java.io.InputStream)" \
    "java.util.ResourceBundle.getString(java.lang.String)" \
    "java.util.ResourceBundle.getStringArray(java.lang.String)" \
    "java.util.ResourceBundle.getObject(java.lang.String)" \
    "java.util.ResourceBundle.getBundle(java.lang.String)" \
    "java.util.ResourceBundle.handleGetObject(java.lang.String)" \
    "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String,boolean)" \
    "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String)" \
    "java.util.StringTokenizer.StringTokenizer(java.lang.String)" \
    "java.util.StringTokenizer.nextToken(java.lang.String)" \
    "java.util.Timer.Timer(java.lang.String)" \
    "java.util.Timer.Timer(java.lang.String,boolean)" \
    "java.util.TreeMap.TreeMap(java.util.Map)" \
    "java.util.TreeMap.TreeMap(java.util.SortedMap)" \
    "java.util.TreeSet.TreeSet(java.util.Collection)" \
    "java.util.TreeSet.TreeSet(java.util.SortedSet)" \
    "java.util.Vector.copyInto(java.lang.Object\[\])" \
    "java.io.DataInput.readFully(byte\[\])" \
    "java.io.DataInput.readFully(byte\[\],int,int)" \
    "java.io.File.File(java.lang.String)" \
    "java.io.File.File(java.net.URI)" \
    "java.io.File.renameTo(java.io.File)" \
    "java.io.FilterReader.FilterReader(java.io.Reader)" \
    "java.io.FilterWriter.FilterWriter(java.io.Writer)" \
    "java.io.InputStream.read(byte\[\])" \
    "java.io.InputStream.read(byte\[\],int,int)" \
    "java.io.RandomAccessFile.read(byte\[\])" \
    "java.io.RandomAccessFile.read(byte\[\],int,int)" \
    "java.io.OutputStream.write(byte\[\])" \
    "java.io.OutputStream.write(byte\[\],int,int)" \
    "java.io.DataOutput.write(byte\[\])" \
    "java.io.DataOutput.write(byte\[\],int,int)" \
    "java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)" \
    "java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)" \
    "java.io.PrintStream.print(char\[\])" \
    "java.io.PrintStream.println(char\[\])" \
    "java.io.PrintWriter.print(char\[\])" \
    "java.io.PrintWriter.println(char\[\])" \
    "java.io.Reader.read(char\[\])" \
    "java.io.PrintStream.printf(java.lang.String, java.lang.Object...)" \
    "java.io.PrintStream.format(java.lang.String, java.lang.Object...)" \
    "java.io.PrintWriter.printf(java.lang.String, java.lang.Object...)" \
    "java.io.PrintWriter.format(java.lang.String, java.lang.Object...)"


# java.lang.Runtime
# java.lang.RuntimePermission
# java.lang.SecurityManager
# java.lang.StringBuffer
# java.lang.StringBuilder
  beam::function_attribute $requires_arg_1_non_null_like -names \
    "java.lang.Runtime.exec" \
    "java.lang.RuntimePermission.RuntimePermission" \
    "java.lang.SecurityManager.checkPermission" \
    "java.lang.SecurityManager.checkAccess" \
    "java.lang.SecurityManager.checkRead" \
    "java.lang.SecurityManager.checkWrite" \
    "java.lang.SecurityManager.checkConnect" \
    "java.lang.SecurityManager.checkMulticast" \
    "java.lang.StringBuffer.indexOf" \
    "java.lang.StringBuffer.lastIndexOf" \
    "java.lang.StringBuilder.indexOf" \
    "java.lang.StringBuilder.lastIndexOf" \
    "java.io.SerializablePermission.SerializablePermission" \
    "java.util.Currency.getInstance" \
    "java.util.EnumSet.copyOf"

  beam::function_attribute $return_ge_0_like -signatures \
	"java.security.KeyStore.size()"           \
	"java.util.Collection.size()"             \
	"java.util.Map.size()"             \
	"java.util.Vector.size()" \
	"java.io.InputStream.available()"

  beam::function_attribute $return_non_0_like -signatures "java.lang.Object.getClass()"

  beam::function_attribute $requires_arg_2_non_null_like -signatures \
    "java.util.Hashtable.put(java.lang.Object,java.lang.Object)" \
    "java.io.PrintStream.printf(java.util.Locale,java.lang.String,java.lang.Object...)" \
    "java.io.PrintStream.format(java.util.Locale,java.lang.String,java.lang.Object...)" \
    "java.io.PrintWriter.printf(java.util.Locale,java.lang.String,java.lang.Object...)" \
    "java.io.PrintWriter.format(java.util.Locale,java.lang.String,java.lang.Object...)" \
    "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object...)" \
    "java.io.File.File(java.lang.String,java.lang.String)" \
    "java.io.File.File(java.io.File,java.lang.String)" \
    "java.io.FilePermission.FilePermission(java.lang.String,java.lang.String)"

# java.lang.Enum
# java.lang.StackTraceElement
# java.lang.String
  beam::function_attribute "$requires_arg_1_non_null_like, $requires_arg_2_non_null_like" -signatures \
    "java.lang.Enum.valueOf(java.lang.Class,java.lang.String)" \
    "java.lang.StackTraceElement.StackTraceElement(java.lang.String,java.lang.String,java.lang.String,int)" \
    "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)" \
    "java.lang.System.setProperty(java.lang.String,java.lang.String)" \
    "java.util.SortedMap.subMap(java.lang.Object,java.lang.Object) " \
    "java.util.Collections.disjoint(java.util.Collection,java.util.Collection)" \
    "java.util.Collections.addAll(java.util.Collection,java.lang.Object...)" \
    "java.util.EnumSet.range(java.lang.Enum,java.lang.Enum)" \
    "java.util.Locale.Locale(java.lang.String,java.lang.String)" \
    "java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale)"

  beam::function_attribute "$requires_arg_1_non_null_like,
                            $requires_arg_2_non_null_like,
                            $requires_arg_3_non_null_like" -signatures \
    "java.util.Locale.Locale(java.lang.String,java.lang.String,java.lang.String)" \
    "java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)"
}

# java.lang.Character
beam::function_attribute {
    property ( index = 1, property_type = requires, type = input, 
               test_type = not_equal, test_value = 0),
    property ( index = 2, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0),
} -signatures "java.lang.Character.codePointAt(java.lang.CharSequence,int)" \
              "java.lang.Character.codePointAt(char\[\],int)" \
              "java.lang.Character.codePointAt(char\[\],int,int)" \
              "java.lang.Character.codePointCount(java.lang.CharSequence,int,int)" \
              "java.lang.Character.codePointCount(char\[\],int,int)" \
              "java.lang.Character.offsetByCodePoints(java.lang.CharSequence,int,int)" \
              "java.lang.Character.offsetByCodePoints(char\[\],int,int,int,int)"

beam::function_attribute {
    property ( index = 3, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0),
} -signatures "java.lang.Character.codePointCount(char\[\],int,int)" \
              "java.lang.Character.offsetByCodePoints(char\[\],int,int,int,int)"

beam::function_attribute {
    property ( index = 1, property_type = requires, type = input, 
               test_type = not_equal, test_value = 0),
    property ( index = 2, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 1),
} -signatures "java.lang.Character.codePointBefore(java.lang.CharSequence,int)" \
              "java.lang.Character.codePointBefore(char\[\],int)"
beam::function_attribute {
    property ( index = 1, property_type = requires, type = input, 
               test_type = not_equal, test_value = 0),
    property ( index = 3, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0),
} -signatures "java.lang.Character.codePointBefore(char\[\],int,int)"
beam::function_attribute {
    property ( index = 2, property_type = requires, type = input, 
               test_type = not_equal, test_value = 0),
    property ( index = 3, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0),
} -signatures "java.lang.Character.toChars(int,char\[\],int)"

# java.lang.Math
# java.lang.StrictMath
beam::function_attribute {
    const,
    property ( index = return, property_type = provides, type = output, 
               test_type = greater_than_or_equal, test_value = 0),
    no_other_side_effects
} -names "java.lang.Math.abs" "java.lang.StrictMath.abs"

beam::function_attribute {
    const,
    no_other_side_effects
} -names "java.lang.Math.acos" "java.lang.StrictMath.acos" \
         "java.lang.Math.asin" "java.lang.StrictMath.asin" \
         "java.lang.Math.atan" "java.lang.StrictMath.atan" \
         "java.lang.Math.atan2" "java.lang.StrictMath.atan2" \
         "java.lang.Math.cbrt" "java.lang.StrictMath.cbrt" \
         "java.lang.Math.ceil" "java.lang.StrictMath.ceil" \
         "java.lang.Math.copySign" "java.lang.StrictMath.copySign" \
         "java.lang.Math.cos" "java.lang.StrictMath.cos" \
         "java.lang.Math.cosh" "java.lang.StrictMath.cosh" \
         "java.lang.Math.exp" "java.lang.StrictMath.exp" \
         "java.lang.Math.expm1" "java.lang.StrictMath.expm1" \
         "java.lang.Math.floor" "java.lang.StrictMath.floor" \
         "java.lang.Math.getExponent" "java.lang.StrictMath.getExponent" \
         "java.lang.Math.hypot" "java.lang.StrictMath.hypot" \
         "java.lang.Math.IEEEremainder" "java.lang.StrictMath.IEEEremainder" \
         "java.lang.Math.log" "java.lang.StrictMath.log" \
         "java.lang.Math.log10" "java.lang.StrictMath.log10" \
         "java.lang.Math.log1p" "java.lang.StrictMath.log1p" \
         "java.lang.Math.max" "java.lang.StrictMath.max" \
         "java.lang.Math.min" "java.lang.StrictMath.min" \
         "java.lang.Math.nextAfter" "java.lang.StrictMath.nextAfter" \
         "java.lang.Math.nextUp" "java.lang.StrictMath.nextUp" \
         "java.lang.Math.pow" "java.lang.StrictMath.pow" \
         "java.lang.Math.rint" "java.lang.StrictMath.rint" \
         "java.lang.Math.round" "java.lang.StrictMath.round" \
         "java.lang.Math.scalb" "java.lang.StrictMath.scalb" \
         "java.lang.Math.signum" "java.lang.StrictMath.signum" \
         "java.lang.Math.sin" "java.lang.StrictMath.sin" \
         "java.lang.Math.sinh" "java.lang.StrictMath.sinh" \
         "java.lang.Math.sqrt" "java.lang.StrictMath.sqrt" \
         "java.lang.Math.tan" "java.lang.StrictMath.tan" \
         "java.lang.Math.tanh" "java.lang.StrictMath.tanh" \
         "java.lang.Math.toDegrees" "java.lang.StrictMath.toDegrees" \
         "java.lang.Math.toRadians" "java.lang.StrictMath.toRadians" \
         "java.lang.Math.ulp" "java.lang.StrictMath.ulp"

beam::function_attribute {
    property ( index = 2, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0),
    property ( index = 3, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0)
} -signatures \
  "java.lang.String.String(char\[\],int,int)" \
  "java.lang.String.String(int\[\],int,int)" \
  "java.lang.String.String(byte\[\],int,int,java.lang.String)" \
  "java.lang.String.String(byte\[\],int,int,java.nio.charset.Charset)" \
  "java.lang.String.String(byte\[\],int,int)" \
  "java.lang.String.valueOf(char\[\],int,int)"

beam::function_attribute {
    property ( index = 3, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0),
    property ( index = 4, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0)
} -signatures "java.lang.String.String(byte\[\],int,int,int)"

beam::function_attribute {
    property ( index = 1, property_type = requires, type = input, 
               test_type = greater_than, test_value = 0)
} -signatures "java.lang.String.codePointBefore(int)"

beam::function_attribute {
    property ( index = 1, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0),
    property ( index = 4, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0)
} -signatures \
  "java.lang.String.getChars(int,int,char\[\],int)" \
  "java.lang.String.getBytes(int,int,byte\[\],int)" \
  "java.lang.StringBuffer.getChars(int,int,char\[\],int)" \
  "java.lang.StringBuilder.getChars(int,int,char\[\],int)"

beam::function_attribute {
    property ( index = 1, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0),
    property ( index = 2, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0)
} -signatures \
  "java.lang.String.codePointCount(int,int)" \
  "java.lang.String.subSequence(int,int)"

beam::function_attribute {
    property ( index = return, property_type = provides, type = output, 
               test_type = greater_than_or_equal, test_value = -1)
} -names \
  "java.lang.String.indexOf" \
  "java.lang.String.lastIndexOf"

# java.lang.StringBuffer
beam::function_attribute {
    return_overlap ( return_index = return, points_into_index = this, fate = must )
} -names \
    "java.lang.StringBuffer.append" \
    "java.lang.StringBuffer.appendCodePoint" \
    "java.lang.StringBuffer.insert" \
    "java.lang.StringBuilder.append" \
    "java.lang.StringBuilder.appendCodePoint" \
    "java.lang.StringBuilder.insert"

beam::function_attribute {
    return_overlap ( return_index = return, points_into_index = this, fate = must )
} -signatures \
    "java.lang.StringBuffer.delete(int,int)" \
    "java.lang.StringBuffer.deleteCharAt(int)" \
    "java.lang.StringBuffer.replace(int,int,java.lang.String)" \
    "java.lang.StringBuffer.reverse()" \
    "java.lang.StringBuilder.delete(int,int)" \
    "java.lang.StringBuilder.deleteCharAt(int)" \
    "java.lang.StringBuilder.replace(int,int,java.lang.String)" \
    "java.lang.StringBuilder.reverse()"

beam::function_attribute {
    property ( index = 3, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0),
    property ( index = 4, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0)
} -signatures \
    "java.lang.StringBuffer.insert(int,char\[\],int,int)" \
    "java.lang.StringBuffer.insert(int,java.lang.CharSequence,int,int)" \
    "java.lang.StringBuilder.insert(int,char\[\],int,int)" \
    "java.lang.StringBuilder.insert(int,java.lang.CharSequence,int,int)"

beam::function_attribute {
    property ( index = 3, property_type = requires, type = input, 
               test_type = not_equal, test_value = 0)
} -signatures \
  "java.lang.StringBuffer.getChars(int,int,char\[\],int)" \
  "java.lang.StringBuilder.getChars(int,int,char\[\],int)"

beam::function_attribute {
    noreturn
} -signatures "java.lang.System.exit(int)" \
              "java.lang.Runtime.exit(int)" \
              "java.lang.Runtime.halt(int)"

beam::function_attribute {
    property ( index = 1, property_type = requires, type = input, 
               test_type = not_equal, test_value = 0),
    property ( index = 2, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0),
    property ( index = 3, property_type = requires, type = input, 
               test_type = not_equal, test_value = 0),
    property ( index = 4, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0),
    property ( index = 5, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0)
} -signatures "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)" \

beam::function_attribute {
    advisory ( explanation = "Calling System.exit shuts down JVM.  Consider throwing a RuntimeException instead",
	       category = "discouraged_method_call" )
} -signatures "java.lang.System.exit(int)"

# java.lang.Thread
beam::function_attribute {
    property ( index = 1, property_type = requires, type = input, 
               range_min = 1, range_max = 10 )
} -signatures "java.lang.Thread.setPriority(int)"
beam::function_attribute {
    property ( index = return, property_type = provides, type = output, 
               range_min = 1, range_max = 10 ),
    pure,
    no_other_side_effects
} -signatures "java.lang.Thread.getPriority()" \
              "java.lang.ThreadGroup.getMaxPriority()"
beam::function_attribute {
    property ( index = 1, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0 ),
    property ( index = 2, property_type = requires, type = input, 
               range_min = 0, range_max = 999999 )
} -signatures "java.lang.Thread.join(long,int)"

beam::function_attribute {
    advisory ( explanation = "The finalizer should be called only by the garbage collector.",
	       category = "discouraged_method_call" )
} -signatures "java.lang.Object.finalize()"

beam::function_attribute {
    advisory ( explanation = "Use the Locale parameterized varsion instead.",
	       category = "discouraged_method_call" )
} -signatures "java.lang.String.toUpperCase()" "java.lang.String.toLowerCase()"

beam::function_attribute {
    advisory ( explanation = "It is recommended to call notifyAll() instead of notify().",
	       category = "discouraged_method_call" )
} -signatures "java.lang.Object.notify()"

beam::function_attribute {
    advisory ( explanation = "Instantiating Boolean wastes memory.  Use the Boolean.valueOf() method.",
	       category = "discouraged_method_call" )
} -signatures "java.lang.Boolean.Boolean(boolean)"

beam::function_attribute {
    advisory ( explanation = "The garbage collector should be involed automatically by JVM.",
	       category = "discouraged_method_call" )
} -signatures "java.lang.System.gc()" "java.lang.Runtime.gc()"

beam::function_attribute {
    advisory ( explanation = "This wastes memory.  Just use the argument.",
	       category = "discouraged_method_call" )
} -signatures "java.lang.String.String(java.lang.String)"

beam::function_attribute {
    advisory ( explanation = "This is just a redundant operation.  Just use the String.",
	       category = "discouraged_method_call" )
} -signatures "java.lang.String.toString()"

beam::function_attribute {
    advisory ( explanation = "This wastes memory.  Just use \"\".",
	       category = "discouraged_method_call" )
} -signatures "java.lang.String.String()"

beam::function_attribute {
    property (index = return,
              property_type  = provides,
              type  = output,
              property_name = "java.util.Iterator state",
              property_value = "without next element")
    if  (index = this,
	 type  = input,
	 property_name = "java.util.Collection size",
         test_type = equal,
         test_value = 0),

    property (index = return,
              property_type  = provides,
              type  = output,
              property_name = "java.util.Iterator state",
              property_value = "with next element")
    if  (index = this,
	 type  = input,
	 property_name = "java.util.Collection size",
         test_type = greater_than,
         test_value = 0),
         
    property  (index = this,
               property_type  = provides,
               type  = output,
               property_name = "java.util.Collection size",
               test_type = equal,
               test_value = 0)
    if (index = return,
        type  = output,
        property_name = "java.util.Iterator state",
        property_value = "without next element"),
    
    property  (index = this,
               property_type  = provides,
               type  = output,
               property_name = "java.util.Collection size",
               test_type = greater_than,
               test_value = 0)
    if (index = return,
        type  = output,
        property_name = "java.util.Iterator state",
        property_value = "with next element"),
    
} -signatures "java.util.Collection.iterator()"
    
beam::function_attribute {
    property (index = return,
              property_type  = provides,
              type  = output,
              property_name = "java.util.Enumeration state",
              property_value = "without next element")
    if  (index = this,
	 type  = input,
	 property_name = "java.util.Collection size",
         test_type = equal,
	 test_value = 0),

    property (index = return,
              property_type  = provides,
              type  = output,
              property_name = "java.util.Enumeration state",
              property_value = "with next element")
    if  (index = this,
	 type  = input,
	 property_name = "java.util.Collection size",
         test_type = greater_than,
	 test_value = 0),
         
    property  (index = this,
               property_type  = provides,
               type  = output,
               property_name = "java.util.Collection size",
               test_type = equal,
               test_value = 0)
    if (index = return,
        type  = output,
        property_name = "java.util.Enumeration state",
        property_value = "without next element"),
    
    property  (index = this,
               property_type  = provides,
               type  = output,
               property_name = "java.util.Collection size",
               test_type = greater_than,
               test_value = 0)
    if (index = return,
        type  = output,
        property_name = "java.util.Enumeration state",
        property_value = "with next element"),
    
} -signatures \
  "java.util.Hashtable.elements()" \
  "java.util.Hashtable.keys()" \
  "java.util.Properties.propertyNames()" \
  "java.util.Vector.elements()"

beam::function_attribute {
    property (index = this,
              property_type  = provides,
              type  = output,
              property_name = "java.util.Iterator state",
              property_value = "possibly without next element"),

    property (index = this,
              property_type  = requires,
              type  = input,
              property_name = "java.util.Iterator state",
              property_value = "with next element"),
              
} -signatures "java.util.Iterator.next()"

beam::function_attribute {
    property (index = this,
              property_type  = provides,
              type  = output,
              property_name = "java.util.Iterator state",
              property_value = "with next element")
    if (index = return,
		  type  = provides,
		  test_type = not_equal,
		  test_value = 0),
        
    property (index = this,
              property_type  = provides,
              type  = output,
              property_name = "java.util.Iterator state",
              property_value = "without next element")
    if (index = return,
		  type  = provides,
		  test_type = equal,
		  test_value = 0),

    no_other_side_effects
} -signatures "java.util.Iterator.hasNext()"

beam::function_attribute {
    property (index = this,
              property_type  = provides,
              type  = output,
              property_name = "java.util.Enumeration state",
              property_value = "possibly without next element"),

    property (index = this,
              property_type  = requires,
              type  = input,
              property_name = "java.util.Enumeration state",
              property_value = "with next element"),
              
} -signatures "java.util.Enumeration.nextElement()"

beam::function_attribute {
    property (index = this,
              property_type  = provides,
              type  = output,
              property_name = "java.util.Enumeration state",
              property_value = "with next element")
    if (index = return,
		  type  = provides,
		  test_type = not_equal,
		  test_value = 0),
        
    property (index = this,
              property_type  = provides,
              type  = output,
              property_name = "java.util.Enumeration state",
              property_value = "without next element")
    if (index = return,
		  type  = provides,
		  test_type = equal,
		  test_value = 0),

    no_other_side_effects
} -signatures "java.util.Enumeration.hasMoreElements()"

beam::function_attribute {
    property (index = this,
              property_type  = provides,
              type  = output,
              property_name = "java.awt.Frame state",
              property_value = "displayable")
} -signatures "java.awt.Window.pack()" "java.awt.Window.show()"

beam::function_attribute {
    property (index = this,
              property_type  = requires,
              type  = input,
              property_name = "java.awt.Frame state",
              property_value = "undisplayable")
} -signatures "java.awt.Frame.setUndecorated(boolean)"

beam::function_attribute {
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.nio.Buffer mark",
               property_value = "marked" ),
    property ( index = return,
               property_type = provides,
               type = output,
               property_name = "java.nio.Buffer mark",
               property_value = "marked" ),
} -signatures "java.nio.Buffer.mark()"

beam::function_attribute {
    property ( index = this,
               property_type = requires,
               type = input,
               property_name = "java.nio.Buffer mark",
               property_value = "marked" ),
} -signatures "java.nio.Buffer.reset()"

beam::function_attribute {
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.nio.Buffer mark",
               property_value = "unmarked" ),
    property ( index = return,
               property_type = provides,
               type = output,
               property_name = "java.nio.Buffer mark",
               property_value = "unmarked" ),
} -signatures \
  "java.nio.Buffer.flip()" \
  "java.nio.Buffer.rewind()" \
  "java.nio.Buffer.clear()"

beam::function_attribute {
    property ( index = this,
	       property_type = provides,
	       type = output,
	       property_name = "java.util.Collection size",
               test_type = equal,
	       test_value = 0 ),
} -signatures \
  "java.util.Collection.clear()" \
  "java.util.Vector.removeAllElements()" \
  "java.util.Stack.removeAllElements()" \
  "java.util.ArrayList.ArrayList()" \
  "java.util.ArrayList.ArrayList(int)" \
  "java.util.HashSet.HashSet()" \
  "java.util.HashSet.HashSet(int)" \
  "java.util.HashSet.HashSet(int,float)" \
  "java.util.LinkedHashSet.LinkedHashSet()" \
  "java.util.LinkedHashSet.LinkedHashSet(int)" \
  "java.util.LinkedHashSet.LinkedHashSet(int,float)" \
  "java.util.LinkedList.LinkedList()" \
  "java.util.PriorityQueue.PriorityQueue()" \
  "java.util.PriorityQueue.PriorityQueue(int)" \
  "java.util.PriorityQueue.PriorityQueue(int,java.util.Comparator)" \
  "java.util.TreeSet.TreeSet()" \
  "java.util.TreeSet.TreeSet(java.util.Comparator)" \
  "java.util.Vector.Vector()" \
  "java.util.Vector.Vector(int)" \
  "java.util.Vector.Vector(int,int)" \
  "java.util.Stack.Stack()" \
  "java.util.Map.clear()" \
  "java.util.HashMap.HashMap()" \
  "java.util.HashMap.HashMap(int)" \
  "java.util.HashMap.HashMap(int,float)" \
  "java.util.Hashtable.Hashtable()" \
  "java.util.Hashtable.Hashtable(int)" \
  "java.util.Hashtable.Hashtable(int,float)" \
  "java.util.IdentityHashMap.IdentityHashMap()" \
  "java.util.IdentityHashMap.IdentityHashMap(int)" \
  "java.util.LinkedHashMap.LinkedHashMap()" \
  "java.util.LinkedHashMap.LinkedHashMap(int)" \
  "java.util.LinkedHashMap.LinkedHashMap(int,float)" \
  "java.util.LinkedHashMap.LinkedHashMap(int,float,boolean)" \
  "java.util.Properties.Properties()" \
  "java.util.TreeMap.TreeMap()" \
  "java.util.TreeMap.TreeMap(java.util.Comparator)" \
  "java.util.WeakHashMap.WeakHashMap()" \
  "java.util.WeakHashMap.WeakHashMap(int)" \
  "java.util.WeakHashMap.WeakHashMap(int,float)"

beam::function_attribute {

    property ( index = this,
	       property_type = provides,
	       type = output,
	       property_name = "java.util.Collection size",
               test_type = equal,
	       test_value = 0 )
    if ( index = 1,
         type = input,
         property_name = "java.util.Collection size",
         test_type = equal,
         test_value = 0 ),

    property ( index = 1,
	       property_type = requires,
	       type = input,
               test_type = not_equal,
               test_value = 0)

} -signatures \
  "java.util.ArrayList.ArrayList(java.util.Collection)" \
  "java.util.HashSet.HashSet(java.util.Collection)" \
  "java.util.LinkedHashSet.LinkedHashSet(java.util.Collection)" \
  "java.util.LinkedList.LinkedList(java.util.Collection)" \
  "java.util.PriorityQueue.PriorityQueue(java.util.Collection)" \
  "java.util.PriorityQueue.PriorityQueue(java.util.PriorityQueue)" \
  "java.util.PriorityQueue.PriorityQueue(java.util.SortedSet)" \
  "java.util.TreeSet.TreeSet(java.util.Collection)" \
  "java.util.TreeSet.TreeSet(java.util.SortedSet)" \
  "java.util.Vector.Vector(java.util.Collection)" \
  "java.util.EnumMap.EnumMap(java.util.EnumMap)" \
  "java.util.EnumMap.EnumMap(java.util.Map)" \
  "java.util.HashMap.HashMap(java.util.Map)" \
  "java.util.Hashtable.Hashtable(java.util.Map)" \
  "java.util.IdentityHashMap.IdentityHashMap(java.util.Map)" \
  "java.util.LinkedHashMap.LinkedHashMap(java.util.Map)" \
  "java.util.Properties.Properties(java.util.Properties)" \
  "java.util.TreeMap.TreeMap(java.util.Map)" \
  "java.util.TreeMap.TreeMap(java.util.SortedMap)" \
  "java.util.WeakHashMap.WeakHashMap(java.util.Map)"

beam::function_attribute {
    property ( index = this,
	       property_type = provides,
	       type = output,
	       property_name = "java.util.Collection size",
               test_type = equal,
	       test_value = 0 )
    if (index = return,
	type  = provides,
	test_type = not_equal,
	test_value = 0),

    property ( index = this,
	       property_type = provides,
	       type = output,
	       property_name = "java.util.Collection size",
               test_type = greater_than,
	       test_value = 0 )
    if (index = return,
	type  = provides,
	test_type = equal,
	test_value = 0),

    property ( index = return,
	       property_type = provides,
	       type = output,
               test_type = not_equal,
	       test_value = 0 )
    if (index = this,
	type  = input,
        property_name = "java.util.Collection size",
	test_type = equal,
	test_value = 0),

    property ( index = return,
	       property_type = provides,
	       type = output,
               test_type = equal,
	       test_value = 0 )
    if (index = this,
	type  = input,
        property_name = "java.util.Collection size",
	test_type = greater_than,
	test_value = 0),
    pure
} -signatures \
  "java.util.Collection.isEmpty()" \
  "java.util.Map.isEmpty()" \
  "java.util.Stack.empty()" \

beam::function_attribute {
    property ( index = this,
	       property_type = provides,
	       type = output,
	       property_name = "java.util.Collection size",
               test_type = equal,
	       test_value = 0 )
    if (index = return,
	type  = provides,
	test_type = equal,
	test_value = 0),

    property ( index = this,
	       property_type = provides,
	       type = output,
	       property_name = "java.util.Collection size",
               test_type = greater_than,
	       test_value = 0 )
    if (index = return,
	type  = provides,
	test_type = greater_than,
	test_value = 0),

   property ( index = return,
              property_type  = provides,
              type  = output,
              test_type = equal,
              test_value = 0 )
   if ( index = this,
        type  = input,
        property_name = "java.util.Collection size",
        test_type = equal,
        test_value = 0 ),

   property ( index = return,
              property_type  = provides,
              type  = output,
              test_type = greater_than,
              test_value = 0 )
   if ( index = this,
        type  = input,
        property_name = "java.util.Collection size",
        test_type = greater_than,
        test_value = 0 )

} -signatures \
  "java.util.Collection.size()" \
  "java.util.Map.size()" \
  "java.util.Vector.size()"

beam::function_attribute {
    property ( index = this,
	       property_type = provides,
	       type = output,
	       property_name = "java.util.Collection size",
	       increment = 1 )
    if ( index = return,
         type = provides,
         test_type = not_equal,
         test_value = 0 )
} -signatures \
  "java.util.Collection.add(java.lang.Object)" \
  "java.util.Queue.offer(java.lang.Object)"

# Queue.add is defined since Java 6
beam::function_attribute {
    property ( index = this,
	       property_type = provides,
	       type = output,
	       property_name = "java.util.Collection size",
	       increment = 1 ),
    property ( index = return,
	       property_type = provides,
	       type = output,
               test_type = equal,
	       test_value = 1 )
} -signatures \
  "java.util.List.add(java.lang.Object)" \
  "java.util.Queue.add(java.lang.Object)"

beam::function_attribute {
    property ( index = this,
	       property_type = provides,
	       type = output,
	       property_name = "java.util.Collection size",
	       increment = 1 ),
} -signatures \
  "java.util.Vector.addElement(java.lang.Object)" \
  "java.util.Vector.insertElementAt(java.lang.Object,int)" \
  "java.util.Stack.push(java.lang.Object)"

beam::function_attribute {
    property ( index = this,
	       property_type = provides,
	       type = output,
	       property_name = "java.util.Collection size",
	       increment = -1 )
    if ( index = return,
         type = provides,
         test_type = not_equal,
         test_value = 0 )
} -signatures \
  "java.util.Collection.remove(java.lang.Object)" \
  "java.util.Vector.removeElement(java.lang.Object)" \
  "java.util.Map.remove(java.lang.Object)" \
  "java.util.Queue.poll()"

beam::function_attribute {
    property ( index = this,
	       property_type = requires,
	       type = input,
	       property_name = "java.util.Collection size",
               test_type = greater_than,
	       test_value = 0 ),
    property ( index = this,
	       property_type = provides,
	       type = output,
	       property_name = "java.util.Collection size",
	       increment = -1 ),
} -signatures \
  "java.util.List.remove(int)" \
  "java.util.Queue.remove()" \
  "java.util.Vector.removeElementAt(int)" \
  "java.util.Stack.pop()"

beam::function_attribute {
    property ( index = this,
	       property_type = requires,
	       type = input,
	       property_name = "java.util.Collection size",
               test_type = greater_than,
	       test_value = 0 )
} -signatures \
  "java.util.Queue.element()" \
  "java.util.Vector.firstElement()" \
  "java.util.Vector.lastElement()" \
  "java.util.Vector.get(int)" \
  "java.util.Stack.peek()"

beam::function_attribute {
   property ( index = return,
              property_type = provides,
              type = output,
              test_type = equal,
              test_value = 0 )
   if ( index = this,
        type = input,
        property_name = "java.util.Collection size",
        test_type = equal,
        test_value = 0 )
} -signatures \
  "java.util.Map.containsKey(java.lang.Object)" \
  "java.util.Map.containsValue(java.lang.Object)" \
  "java.util.Map.get(java.lang.Object)" \
  "java.util.Properties.getProperty(java.lang.Object)" \
  "java.util.Queue.peek()"

beam::function_attribute {
   property ( index = return,
              property_type = provides,
              type = output,
              property_name = "java.util.Collection size",
              test_type = equal,
              test_value = 0 )
   if ( index = this,
        type = input,
        property_name = "java.util.Collection size",
        test_type = equal,
        test_value = 0 ),
   property ( index = return,
              property_type = provides,
              type = output,
              property_name = "java.util.Collection size",
              test_type = greater_than,
              test_value = 0 )
   if ( index = this,
        type = input,
        property_name = "java.util.Collection size",
        test_type = greater_than,
        test_value = 0 ),

   property ( index = this,
              property_type = provides,
              type = output,
              property_name = "java.util.Collection size",
              test_type = equal,
              test_value = 0 )
   if ( index = return,
        type = provides,
        property_name = "java.util.Collection size",
        test_type = equal,
        test_value = 0 ),

    property ( index = this,
	       property_type = provides,
	       type = output,
	       property_name = "java.util.Collection size",
               test_type = greater_than,
	       test_value = 0 )
    if ( index = return,
	 type  = provides,
         property_name = "java.util.Collection size",
         test_type = greater_than,
         test_value = 0),

} -signatures \
  "java.util.Map.entrySet()" \
  "java.util.Map.keySet()" \
  "java.util.Map.values()" \
  "java.util.Properties.stringPropertyNames()"

beam::function_attribute {
    property ( index = this,
	       property_type = provides,
	       type = output,
	       property_name = "java.util.Collection size",
	       increment = 1 )
    if ( index = return,
         type = provides,
         test_type = equal,
         test_value = 0 ),
} -signatures \
  "java.util.Map.put(java.lang.Object,java.lang.Object)" \
  "java.util.Properties.setProperty(java.lang.String,java.lang.String)" \

beam::function_attribute {
    property ( index = this,
	       property_type = requires,
	       type = input,
	       property_name = "java.util.Collection size",
               test_type = greater_than,
               test_value = 0 )
} -signatures \
  "java.util.SortedMap.firstKey()" \
  "java.util.SortedMap.lastKey()"

beam::function_attribute {
    allocator ( size_index = unset,
		return_index = return,
		anchored,
		initial_state = initialized_to_unknown,
		resource = "java_heap_memory" ),
    property ( index = return,
               property_type = provides,
               type = output,
               property_name = "java.security.KeyStore initialization",
	       property_value = "uninitialized" ),
    no_other_side_effects
} -signatures \
  "java.security.KeyStore.getInstance(java.lang.String)" \
  "java.security.KeyStore.getInstance(java.lang.String,java.security.Provider)" \
  "java.security.KeyStore.getInstance(java.lang.String,java.lang.String)"

beam::function_attribute {
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.security.KeyStore initialization",
	       property_value = "initialized" ),
} -signatures "java.security.KeyStore.load(java.io.InputStream,char\[\])"

beam::function_attribute {
    property ( index = this,
	       property_type = requires,
	       type = input,
	       property_name = "java.security.KeyStore initialization",
	       property_value = "initialized" )
} -signatures \
  "java.security.KeyStore.getKey(java.lang.String,char\[\])" \
  "java.security.KeyStore.getCertificateChain(java.lang.String)" \
  "java.security.KeyStore.getCertificate(java.lang.String)" \
  "java.security.KeyStore.getCreationDate(java.lang.String)" \
  "java.security.KeyStore.aliases()" \
  "java.security.KeyStore.containsAlias(java.lang.String)" \
  "java.security.KeyStore.size()" \
  "java.security.KeyStore.isKeyEntry(java.lang.String)" \
  "java.security.KeyStore.isCertificateEntry(java.lang.String)" \
  "java.security.KeyStore.getCertificateAlias(java.security.cert.Certificate)"

beam::function_attribute {
    property ( index = this,
	       property_type = requires,
	       type = input,
	       property_name = "java.security.KeyStore initialization",
	       property_value = "initialized" ),
} -signatures \
  "java.security.KeyStore.setKeyEntry(java.lang.String,java.security.Key,char\[\],java.security.cert.Certificate\[\])" \
  "java.security.KeyStore.setKeyEntry(java.lang.String,byte\[\],java.security.cert.Certificate\[\])" \
  "java.security.KeyStore.setCertificateEntry(java.lang.String,java.security.cert.Certificate)" \
  "java.security.KeyStore.deleteEntry(java.lang.String)" \
  "java.security.KeyStore.store(java.io.OutputStream,char\[\])" \

beam::function_attribute {
    allocator ( size_index = unset,
		return_index = return,
		anchored,
		initial_state = initialized_to_unknown,
		resource = "java_heap_memory" ),
    property ( index = return,
               property_type = provides,
               type = output,
               property_name = "java.security.Signature state",
	       property_value = "uninitialized" ),
    property ( index = return,
               property_type = provides,
               type = output,
               property_name = "java.security.Signature initialization",
	       property_value = "uninitialized" ),
    no_other_side_effects
} -signatures \
  "java.security.Signature.getInstance(java.lang.String)" \
  "java.security.Signature.getInstance(java.lang.String,java.security.Provider)" \
  "java.security.Signature.getInstance(java.lang.String,java.lang.String)"

beam::function_attribute {
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.security.Signature state",
	       property_value = "sign_check" ),
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.security.Signature initialization",
	       property_value = "initialized" ),
} -signatures \
  "java.security.Signature.initSign(java.security.PrivateKey)" \
  "java.security.Signature.initSign(java.security.PrivateKey,java.security.SecureRandom)" \

beam::function_attribute {
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.security.Signature state",
	       property_value = "verify_check" ),
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.security.Signature initialization",
	       property_value = "initialized" ),
} -signatures \
  "java.security.Signature.initVerify(java.security.cert.Certificate)" \
  "java.security.Signature.initVerify(java.security.PublicKey)"

beam::function_attribute {
    property ( index = this,
               property_type = requires,
               type = input,
               property_name = "java.security.Signature state",
	       property_value = "sign_check" ),
} -signatures \
  "java.security.Signature.sign()" \
  "java.security.Signature.sign(byte\[\],int,int)" \

beam::function_attribute {
    property ( index = this,
               property_type = requires,
               type = input,
               property_name = "java.security.Signature state",
	       property_value = "verify_check" ),
} -signatures \
  "java.security.Signature.verify(byte\[\])" \
  "java.security.Signature.verify(byte\[\],int,int)" \

beam::function_attribute {
    property ( index = this,
               property_type = requires,
               type = input,
               property_name = "java.security.Signature initialization",
	       property_value = "initialized" ),
} -signatures \
  "java.security.Signature.update(byte)" \
  "java.security.Signature.update(byte\[\])" \
  "java.security.Signature.update(byte\[\],int,int)"

beam::function_attribute {
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.io.InputStream state",
               property_value = "opened" ),
} -signatures \
  "java.io.FileInputStream.FileInputStream(java.io.File)" \
  "java.io.FileInputStream.FileInputStream(java.io.FileDescriptor)" \
  "java.io.FileInputStream.FileInputStream(java.lang.String)" \
  "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)" \
  "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)"

beam::function_attribute {
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.io.OutputStream state",
               property_value = "opened" ),
} -signatures \
  "java.io.FileOutputStream.FileOutputStream(java.io.File)" \
  "java.io.FileOutputStream.FileOutputStream(java.io.File,boolean)" \
  "java.io.FileOutputStream.FileOutputStream(java.io.FileDescriptor)" \
  "java.io.FileOutputStream.FileOutputStream(java.lang.String)" \
  "java.io.FileOutputStream.FileOutputStream(java.lang.String,boolean)" \
  "java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)" \
  "java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream,int)" \
  "java.io.PrintStream.PrintStream(java.io.OutputStream)" \
  "java.io.PrintStream.PrintStream(java.io.OutputStream,boolean)" \
  "java.io.PrintStream.PrintStream(java.io.OutputStream,boolean,java.lang.String)"

beam::function_attribute {
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.io.Writer state",
               property_value = "opened" ),
} -signatures \
  "java.io.PrintWriter.PrintWriter(java.io.OutputStream)" \
  "java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)" \
  "java.io.PrintWriter.PrintWriter(java.io.Writer)" \
  "java.io.PrintWriter.PrintWriter(java.io.Writer,boolean)" \

beam::function_attribute {
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.io.InputStream state",
               property_value = "closed" ),
} -signatures "java.io.InputStream.close()"

beam::function_attribute {
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.io.OutputStream state",
               property_value = "closed" ),
} -signatures \
   "java.io.PrintStream.close()" \
   "java.io.OutputStream.close()"

beam::function_attribute {
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.io.Writer state",
               property_value = "closed" ),
} -signatures "java.io.Writer.close()"

beam::function_attribute {
    property ( index = this,
               property_type = requires,
               type = input,
               property_name = "java.io.InputStream state",
	       property_value = "opened"),
} -signatures \
  "java.io.InputStream.read()" \
  "java.io.InputStream.read(byte\[\])" \
  "java.io.InputStream.read(byte\[\],int,int)"

beam::function_attribute {
    property ( index = this,
               property_type = requires,
               type = input,
               property_name = "java.io.OutputStream state",
	       property_value = "opened"),
} -signatures \
  "java.io.OutputStream.write(byte\[\])" \
  "java.io.OutputStream.write(byte\[\],int,int)" \
  "java.io.OutputStream.write(int)"

beam::function_attribute {
    property ( index = this,
               property_type = requires,
               type = input,
               property_name = "java.io.OutputStream state",
	       property_value = "opened"),
} -names "java.io.PrintStream.print" "java.io.PrintStream.println"

beam::function_attribute {
    property ( index = this,
               property_type = requires,
               type = input,
               property_name = "java.io.Writer state",
	       property_value = "opened" ),
} -names "java.io.PrintWriter.print" "java.io.PrintWriter.println"

beam::function_attribute {
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.io.PipedInputStream state",
               property_value = "opened" ),
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.io.PipedInputStream connection",
               property_value = "disconnected" ),
} -signatures "java.io.PipedInputStream.PipedInputStream()"

beam::function_attribute {
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.io.PipedOutputStream state",
               property_value = "opened" ),
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.io.PipedOutputStream connection",
               property_value = "disconnected" ),
} -signatures "java.io.PipedOutputStream.PipedOutputStream()"

beam::function_attribute {
    property ( index = 1,
               property_type = requires,
               type = input,
               property_name = "java.io.PipedOutputStream state",
               property_value = "opened" ),
    property ( index = 1,
               property_type = requires,
               type = input,
               property_name = "java.io.PipedOutputStream connection",
               property_value = "disconnected" ),
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.io.PipedInputStream state",
               property_value = "opened" ),
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.io.PipedInputStream connection",
               property_value = "connected" ),
    property ( index = 1,
               property_type = provides,
               type = output,
               property_name = "java.io.PipedOutputStream connection",
               property_value = "connected" ),
} -signatures \
  "java.io.PipedInputStream.PipedInputStream(java.io.PipedOutputStream)" \
  "java.io.PipedInputStream.connect(java.io.PipedOutputStream)"

beam::function_attribute {
    property ( index = 1,
               property_type = requires,
               type = input,
               property_name = "java.io.PipedInputStream state",
               property_value = "opened" ),
    property ( index = 1,
               property_type = requires,
               type = input,
               property_name = "java.io.PipedInputStream connection",
               property_value = "disconnected" ),
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.io.PipedOutputStream state",
               property_value = "opened" ),
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.io.PipedOutputStream connection",
               property_value = "connected" ),
    property ( index = 1,
               property_type = provides,
               type = output,
               property_name = "java.io.PipedInputStream connection",
               property_value = "connected" ),
} -signatures \
  "java.io.PipedOutputStream.PipedOutputStream(java.io.PipedInputStream)" \
  "java.io.PipedOutputStream.connect(java.io.PipedInputStream)"

beam::function_attribute {
    property ( index = this,
               property_type = requires,
               type = input,
               property_name = "java.io.PipedOutputStream connection",
               property_value = "connected" ),
} -signatures \
  "java.io.PipedOutputStream.write(int)" \
  "java.io.PipedOutputStream.write(byte\[\],int,int)"

beam::function_attribute {
    property ( index = this,
               property_type = requires,
               type = input,
               property_name = "java.io.PipedInputStream connection",
               property_value = "connected" ),
} -signatures \
  "java.io.PipedInputStream.read()" \
  "java.io.PipedInputStream.read(byte\[\],int,int)" \
  "java.io.PipedInputStream.receive(int)"

beam::function_attribute {
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.net.Socket state",
               property_value = "opened" ),
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.net.Socket connection",
               property_value = "disconnected" ),
} -signatures "java.net.Socket.Socket()" "java.net.Socket.Socket(java.net.SocketImpl)"

beam::function_attribute {
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.net.Socket state",
               property_value = "opened" ),
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.net.Socket connection",
               property_value = "connected" ),
} -signatures \
  "java.net.Socket.Socket(java.net.InetAddress,int)" \
  "java.net.Socket.Socket(java.net.InetAddress,int,java.net.InetAddress,int)" \
  "java.net.Socket.Socket(java.lang.String,int)" \
  "java.net.Socket.Socket(java.lang.String,int,java.net.InetAddress,int)"

beam::function_attribute {
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.net.Socket connection",
               property_value = "connected" ),
} -signatures \
  "java.net.Socket.connect(java.net.SocketAddress)" \
  "java.net.Socket.connect(java.net.SocketAddress,int)"

beam::function_attribute {
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.net.Socket state",
               property_value = "closed" ),
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.net.Socket connection",
               property_value = "disconnected" ),
} -signatures "java.net.Socket.close()"

beam::function_attribute {
    property ( index = this,
               property_type = requires,
               type = input,
               property_name = "java.net.Socket state",
               property_value = "opened" ),
    property ( index = this,
               property_type = requires,
               type = input,
               property_name = "java.net.Socket connection",
               property_value = "connected" ),
} -signatures "java.net.Socket.getInputStream()" "java.net.Socket.getOutputStream()"

beam::function_attribute {
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.nio.channels.spi.AbstractInterruptibleChannel connection",
               property_value = "disconnected" ),
} -signatures "java.nio.channels.spi.AbstractInterruptibleChannel.close()"

beam::function_attribute {
    property ( index = this,
               property_type = requires,
               type = input,
               property_name = "java.nio.channels.spi.AbstractInterruptibleChannel connection",
               property_value = "connected" ),
} -signatures \
  "java.nio.channels.SocketChannel.read(java.nio.ByteBuffer)" \
  "java.nio.channels.SocketChannel.read(java.nio.ByteBuffer\[\])" \
  "java.nio.channels.SocketChannel.read(java.nio.ByteBuffer\[\],int,int)" \
  "java.nio.channels.SocketChannel.write(java.nio.ByteBuffer)" \
  "java.nio.channels.SocketChannel.write(java.nio.ByteBuffer\[\])" \
  "java.nio.channels.SocketChannel.write(java.nio.ByteBuffer\[\],int,int)"

beam::function_attribute {
    property ( index = this,
               property_type = provides,
               type = output,
               property_name = "java.net.URLConnection connection",
               property_value = "connected" ),
} -signatures "java.net.URLConnection.connect()"

beam::function_attribute {
    property ( index = this,
               property_type = requires,
               type = input,
               property_name = "java.net.URLConnection connection",
               property_value = "disconnected" ),
} -signatures \
  "java.net.URLConnection.addRequestProperty(java.lang.String,java.lang.String)" \
  "java.net.URLConnection.setDoInput(boolean)" \
  "java.net.URLConnection.setDoOutput(boolean)" \
  "java.net.URLConnection.setAllowUserInteraction(boolean)" \
  "java.net.URLConnection.setUseCaches(boolean)" \
  "java.net.URLConnection.setIfModifiedSince(long)" \
  "java.net.URLConnection.setRequestProperty(java.lang.String,java.lang.String)" \
  "java.net.URLConnection.getRequestProperty(java.lang.String)" \
  "java.net.URLConnection.getRequestProperties()"


beam::function_attribute {pure} -signatures        \
        "java.security.KeyStore.size()"            \
        "java.util.Collection.size()"              \
        "java.util.Map.size()"              \
        "java.util.Vector.size()"                  \
        "java.util.Iterator.hasNext()"             \
        "java.util.Enumeration.hasMoreElements()"

beam::function_attribute {
    property ( index = 1, property_type = requires, type = input, 
               test_type = not_equal, test_value = 0),
    property ( index = 1, num_dereference = 1, property_type = requires, type = input, 
               test_type = not_equal, test_value = 0)
} -signatures "java.lang.Throwable.setStackTrace(java.lang.StackTraceElement\[\])"

beam::function_attribute {
    property ( index = return, property_type = provides, type = output, 
               test_type = greater_than_or_equal, test_value = -1)
} -signatures \
  "java.util.List.indexOf(java.lang.Object)" \
  "java.util.List.lastIndexOf(java.lang.Object)"

# java.util.Arrays
# java.util.Collections
# java.io.InputStream
# java.io.OutputStream
# java.io.Reader
# java.io.Writer
# java.io.CharArrayReader
beam::function_attribute {
    property ( index = 2, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0),
    property ( index = 3, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0)
} -signatures \
  "java.util.Arrays.sort(long\[\],int,int)" \
  "java.util.Arrays.sort(int\[\],int,int)" \
  "java.util.Arrays.sort(short\[\],int,int)" \
  "java.util.Arrays.sort(char\[\],int,int)" \
  "java.util.Arrays.sort(byte\[\],int,int)" \
  "java.util.Arrays.sort(double\[\],int,int)" \
  "java.util.Arrays.sort(float\[\],int,int)" \
  "java.util.Arrays.sort(java.lang.Object\[\],int,int)" \
  "java.util.Arrays.sort(java.lang.Object\[\],int,int,java.util.Comparator)" \
  "java.util.Arrays.fill(long\[\],int,int,long)" \
  "java.util.Arrays.fill(int\[\],int,int,int)" \
  "java.util.Arrays.fill(short\[\],int,int,short)" \
  "java.util.Arrays.fill(char\[\],int,int,char)" \
  "java.util.Arrays.fill(boolean\[\],int,int,boolean)" \
  "java.util.Arrays.fill(byte\[\],int,int,byte)" \
  "java.util.Arrays.fill(double\[\],int,int,double)" \
  "java.util.Arrays.fill(float\[\],int,int,float)" \
  "java.util.Arrays.fill(java.lang.Object\[\],int,int,java.lang.Object)" \
  "java.util.Collections.swap(java.util.List,int,int)" \
  "java.io.InputStream.read(byte\[\],int,int)" \
  "java.io.RandomAccessFile.read(byte\[\],int,int)" \
  "java.io.DataInput.readFully(byte\[\],int,int)" \
  "java.io.Reader.read(char\[\],int,int)" \
  "java.io.OutputStream.write(byte\[\],int,int)" \
  "java.io.DataOutput.write(byte\[\],int,int)" \
  "java.io.Writer.write(java.lang.String,int,int)" \
  "java.io.CharArrayReader.CharArrayReader(char\[\],int,int)"

# java.util.BitSet
beam::function_attribute {
  property ( index = 1, property_type = requires, type = input, 
             test_type = greater_than_or_equal, test_value = 0),
  property ( index = return, property_type = provides, type = output, 
             test_type = greater_than_or_equal, test_value = -1)
} -signatures \
  "java.util.BitSet.nextBitSet(int)"

beam::function_attribute {
  property ( index = 1, property_type = requires, type = input, 
             test_type = greater_than_or_equal, test_value = 0),
  property ( index = return, property_type = provides, type = output, 
             test_type = greater_than_or_equal, test_value = -1),
  pure,
  no_other_side_effects
} -signatures \
  "java.util.BitSet.nextSetBit(int)" \
  "java.util.BitSet.nextClearBit(int)"

beam::function_attribute {
  property ( index = return, property_type = provides, type = output, 
             test_type = greater_than_or_equal, test_value = 0),
  pure,
  no_other_side_effects
} -signatures \
  "java.util.BitSet.length()" \
  "java.util.BitSet.cardinality()" \
  "java.util.BitSet.size()"

# java.util.Calender
beam::function_attribute {
    property ( index = 1, property_type = requires, type = input, 
               range_min = 0, range_max = 16 )
} -signatures \
  "java.util.Calendar.get(int)" \
  "java.util.Calendar.set(int,int)"

# java.util.Collections
beam::function_attribute {
    property (index = return,
              property_type  = provides,
              type  = output,
              property_name = "java.util.Enumeration state",
              property_value = "without next element")
    if  (index = 1,
	 type  = input,
	 property_name = "java.util.Collection size",
         test_type = equal,
	 test_value = 0),

    property (index = return,
              property_type  = provides,
              type  = output,
              property_name = "java.util.Enumeration state",
              property_value = "with next element")
    if  (index = 1,
	 type  = input,
	 property_name = "java.util.Collection size",
         test_type = greater_than,
	 test_value = 0),
         
    property  (index = 1,
               property_type  = provides,
               type  = output,
               property_name = "java.util.Collection size",
               test_type = equal,
               test_value = 0)
    if (index = return,
        type  = output,
        property_name = "java.util.Enumeration state",
        property_value = "without next element"),
    
    property  (index = 1,
               property_type  = provides,
               type  = output,
               property_name = "java.util.Collection size",
               test_type = greater_than,
               test_value = 0)
    if (index = return,
        type  = output,
        property_name = "java.util.Enumeration state",
        property_value = "with next element"),
    
} -signatures "java.util.Collections.enumeration(java.util.Collection)"

beam::function_attribute {
    property (index = return,
              property_type  = provides,
              type  = output,
              property_name = "java.util.Collection size",
              test_type = equal,
	      test_value = 0)
    if  (index = 1,
	 type  = input,
	 property_name = "java.util.Enumeration state",
         property_value = "without next element"),

    property (index = return,
              property_type  = provides,
              type  = output,
              property_name = "java.util.Collection size",
              test_type = greater_than,
              test_value = 0)
    if  (index = 1,
	 type  = input,
         property_name = "java.util.Enumeration state",
         property_value = "with next element"),
         
    property  (index = 1,
               property_type  = provides,
               type  = output,
               property_name = "java.util.Enumeration state",
               property_value = "without next element")
    if (index = return,
        type  = output,
        property_name = "java.util.Collection size",
        test_type = equal,
        test_value = 0),
    
    property  (index = 1,
               property_type  = provides,
               type  = output,
               property_name = "java.util.Enumeration state",
               property_value = "with next element")
    if (index = return,
        type  = output,
        property_name = "java.util.Collection size",
        test_type = greater_than,
        test_value = 0)
} -signatures "java.util.Collections.list(java.util.Enumeration)"

beam::function_attribute {
    property (index = 1, 
              property_type = requires,
              type = input,
              property_name = "java.util.Collection size",
              test_type = greater_than,
              test_value = 0)
} -names \
  "java.util.Collections.min" \
  "java.util.Collections.max"

beam::function_attribute {
    property (index = return, 
              property_type = provides,
              type = output,
              property_name = "java.util.Collection size",
              test_type = equal,
              test_value = 0)
} -signatures \
  "java.util.Collections.emptySet()" \
  "java.util.Collections.emptyList()" \
  "java.util.Collections.emptyMap()"

beam::function_attribute {
    property (index = return, 
              property_type = provides,
              type = output,
              property_name = "java.util.Collection size",
              test_type = equal,
              test_value = 1)
} -signatures \
  "java.util.Collections.singleton(java.lang.Object)" \
  "java.util.Collections.singletonList(java.lang.Object)" \
  "java.util.Collections.singletonMap(java.lang.Object,java.lang.Object)"

beam::function_attribute {
    property ( index = return, 
               property_type = provides, 
               type = output, 
               range_min = -1, 
               range_max = 255 )
} -signatures \
  "java.io.InputStream.read()" \
  "java.io.RandomAccessFile.read()"

beam::function_attribute {
    property ( index = return, 
               property_type = provides, 
               type = output, 
               range_min = -1, 
               range_max = 65535 )
} -signatures "java.io.Reader.read()"

beam::function_attribute {
  property ( index = return, 
             property_type = provides, 
             type = output, 
             test_type = greater_than_or_equal, 
             test_value = -1),
} -signatures \
  "java.io.InputStream.read(byte\[\])" \
  "java.io.InputStream.read(byte\[\],int,int)" \
  "java.io.RandomAccessFile.read(byte\[\])" \
  "java.io.RandomAccessFile.read(byte\[\],int,int)" \
  "java.io.Reader.read(char\[\])" \
  "java.io.Reader.read(char\[\],int,int)"

beam::function_attribute {
  property ( index = 1, property_type = requires, type = input, 
             test_type = greater_than_or_equal, test_value = 0),
  property ( index = return, property_type = provides, type = output, 
             test_type = greater_than_or_equal, test_value = 0),
} -signatures "java.io.Reader.skip(long)"

# java.io.BufferedInputStream
# java.io.BufferedOutputStream
beam::function_attribute {
  property ( index = 2, property_type = requires, type = input, 
             test_type = greater_than, test_value = 0),
} -signatures \
  "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)" \
  "java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream,int)" \
  "java.io.BufferedReader.BufferedReader(java.io.Reader,int)" \
  "java.io.BufferedWriter.BufferedWriter(java.io.Writer,int)" \
  "java.io.PushbackInputStream.PushbackInputStream(java.io.InputStream,int)" \
  "java.io.PushbackReader.PushbackReader(java.io.Reader,int)"

beam::function_attribute {
    property ( index = return, 
               property_type = provides, 
               type = output, 
               range_min = 0, 
               range_max = 255 )
} -signatures "java.io.DataInput.readUnsignedByte()"

beam::function_attribute {
    property ( index = return, 
               property_type = provides, 
               type = output, 
               range_min = 0, 
               range_max = 65535 )
} -signatures "java.io.DataInput.readUnsignedShort()"

namespace eval beam::attribute {
  beam::function_attribute $requires_arg_1_non_null_like -signatures \
    "java.util.EnumSet.of(java.lang.Enum)" \
    "java.util.EnumSet.of(java.lang.Enum,java.lang.Enum)" \
    "java.util.EnumSet.of(java.lang.Enum,java.lang.Enum,java.lang.Enum)" \
    "java.util.EnumSet.of(java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum)" \
    "java.util.EnumSet.of(java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum)"

  beam::function_attribute $requires_arg_2_non_null_like -signatures \
    "java.util.EnumSet.of(java.lang.Enum,java.lang.Enum)" \
    "java.util.EnumSet.of(java.lang.Enum,java.lang.Enum,java.lang.Enum)" \
    "java.util.EnumSet.of(java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum)" \
    "java.util.EnumSet.of(java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum)"

  beam::function_attribute $requires_arg_3_non_null_like -signatures \
    "java.util.EnumSet.of(java.lang.Enum,java.lang.Enum,java.lang.Enum)" \
    "java.util.EnumSet.of(java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum)" \
    "java.util.EnumSet.of(java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum)"

  beam::function_attribute $requires_arg_4_non_null_like -signatures \
    "java.util.EnumSet.of(java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum)" \
    "java.util.EnumSet.of(java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum)"

  beam::function_attribute $requires_arg_5_non_null_like -signatures \
    "java.util.EnumSet.of(java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum)"
}
beam::function_attribute {
    property ( index = 2, property_type = requires, type = input, 
               num_dereference = 1, test_type = not_equal, test_value = 0 )
} -signatures "java.util.EnumSet.of(java.lang.Enum,java.lang.Enum...)"

beam::function_attribute {
    property ( index = 1, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 1),
} -signatures \
  "java.util.PriorityQueue.PriorityQueue(int)" \
  "java.util.PriorityQueue.PriorityQueue(int,java.util.Comparator)"

beam::function_attribute {
    property ( index = 1, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0),
} -signatures \
  "java.util.Random.nextInt(int)"

beam::function_attribute {
    property ( index = 2, property_type = requires, type = input, 
               test_type = greater_than_or_equal, test_value = 0)
} -signatures \
  "java.util.Timer.schedule(java.util.TimerTask,long)" \
  "java.util.Timer.schedule(java.util.TimerTask,long,long)" \
  "java.util.Timer.scheduleAtFixedRate(java.util.TimerTask,long,long)" \
  "java.util.Vector.indexOf(java.lang.Object,int)" \
  "java.util.Vector.setElementAt(java.lang.Object,int)" \
  "java.util.Vector.insertElementAt(java.lang.Object,int)"

beam::function_attribute {
    property ( index = 2, property_type = requires, type = input, 
               range_min = 0, range_max = 1)
} -signatures \
  "java.util.TimeZone.getDisplayName(boolean,int,java.util.Locale)"
