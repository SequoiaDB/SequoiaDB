#!/bin/bash

# author: Ting YU 2021-04-09

#   error code list:
#   64    command line usage error

function err_para()
{
   local para_name="$1"
   local para_value="$2"
   echo "sdbupgradeidx: unrecognized $para_name \"$para_value\"" >&2
   echo 'Try "sdbupgradeidx --help" for more information.'
   exit 64
}

function check_num_para()
{
   local para_name=$1
   local para_value=$2

   local regex='^[0-9]+$'
   if ! [[ "$para_value" =~ $regex ]]; then
      echo "sdbupgradeidx: invalid value for parameter \"$para_name\": \"$para_value\", should be number" >&2
      echo 'Try "sdbupgradeidx --help" for more information.'
      exit 64
   fi
}

function check_bool_para()
{
   local para_name=$1
   local para_value=$2

   if [ "$para_value" != true ] && [ "$para_value" != false ]; then
      echo "sdbupgradeidx: invalid value for parameter \"$para_name\": \"$para_value\", should be true or false" >&2
      echo 'Try "sdbupgradeidx --help" for more information.'
      exit 64
   fi
}

function show_version()
{
   echo "sdbupgradeidx: "$DB_VERSION
   echo "Release: "$RELEASE
   echo "Git version: "$GIT_VERSION
   echo $BUILD_TIME
}

function build_help()
{
   echo "sdbupgradeidx is a utility to upgrade index."
   echo ""
   echo "Common options:"
   echo "  -s [ --hostname ] arg        host name"
   echo "  -p [ --svcname ] arg         service name"
   echo "  -u [ --user ] arg            user name, default: \"\""
   echo "  -w [ --password ] arg        password, default: \"\""
   echo "  --cipher arg                 use cipher file or not, default: false"
   echo "  --cipherfile arg             cipher file location, default: ~/sequoiadb/passwd"
   echo "  --token arg                  password encryption token, default: \"\"" 
   echo "  -o [ --output ] arg          specify the output file, default: ./sdbupgradeidx.log"
   echo "  --action arg                 check or upgrade"
   echo "  -h [ --help ]                print help message"
   echo "  --version                    print version information"
   echo ""
   echo "Example: "
   echo "  ./sdbupgradeidx -s localhost -p 11810 --action check"
   echo "  ./sdbupgradeidx -s localhost -p 11810 -u sdbadmin -w sdbadmin --action check"
   echo "  ./sdbupgradeidx -s localhost -p 11810 --cipher true -u sdbadmin --token sdb --action check"
   echo ""
}

##################################
#    main entry
##################################

# The autogen will replace the following 4 values.
DB_VERSION="x.x.x"
RELEASE="0"
GIT_VERSION="xxxxxxxxxx"
BUILD_TIME="0000-00-00-00.00.00"

# Default value
HAS_HOSTNAME=false
HAS_SVCNAME=false
HAS_USER=false
HAS_PASSWD=false
HAS_ACTION=false
HAS_TOKEN=false
IS_USE_CIPHER_FILE=false
HOSTNAME=""
SVCNAME=""
USERNAME=""
PASSWD=""
CIPHER_FILE="~/sequoiadb/passwd"
TOKEN=""
ACTION=""
OUTPUT="./sdbupgradeidx.log"

# Parse command line parameters

ARGS=`getopt -o hs:p:u:w:o: --long help,version,hostname:,svcname:,user:,password:,cipher:,cipherfile:,token:,action: -n 'sdbupgradeidx' -- "$@"`
ret=$?
test $ret -ne 0 && exit $ret

eval set -- "${ARGS}"

while true
do
   case "$1" in
      --action )          ACTION="$2"
                          HAS_ACTION=true
                          test "$ACTION" == "check" -o "$ACTION" == "upgrade" \
                             || err_para ACTION "$ACTION"
                          shift 2
                          ;;
      -s | --hostname )   HOSTNAME=$2
                          HAS_HOSTNAME=true
                          shift 2
                          ;;
      -p | --svcname )    SVCNAME=$2
                          HAS_SVCNAME=true
                          check_num_para "SVCNAME" "$SVCNAME"
                          shift 2
                          ;;
      -u | --user )       USERNAME=$2
                          HAS_USER=true
                          shift 2
                          ;;
      -w | --password )   PASSWD=$2
                          HAS_PASSWD=true
                          shift 2
                          ;;
      --cipher )          IS_USE_CIPHER_FILE=$2
                          check_bool_para "--cipher" "$IS_USE_CIPHER_FILE"
                          shift 2
                          ;;
      --cipherfile )      CIPHER_FILE=$2
                          shift 2
                          ;;
      --token )           TOKEN=$2
                          HAS_TOKEN=true
                          shift 2
                          ;;
      -o | --output )     OUTPUT=$2
                          shift 2
                          ;;
      --version )         show_version
                          exit 0
                          ;;
      -h | --help )       build_help
                          exit 0
                          ;;
      --)                 shift
                          break
                          ;;
      *)                  echo "Internal error!"
                          exit 64
                          ;;
   esac
done

if [ $HAS_HOSTNAME != true ]; then
   echo "sdbupgradeidx: missing argument: hostname" >&2
   echo 'Try "sdbupgradeidx --help" for more information.'
   exit 64
fi
if [ $HAS_SVCNAME != true ]; then
   echo "sdbupgradeidx: missing argument: svcname" >&2
   echo 'Try "sdbupgradeidx --help" for more information.'
   exit 64
fi
if [ $IS_USE_CIPHER_FILE == true ]; then
   if [ $HAS_USER != true ]; then
      echo "sdbupgradeidx: missing argument: user" >&2
      echo 'Try "sdbupgradeidx --help" for more information.'
      exit 64
   fi
   if [ $HAS_PASSWD == true ]; then
      echo "sdbupgradeidx: can't specify --cipher true and --password at the same time" >&2
      echo 'Try "sdbupgradeidx --help" for more information.'
      exit 64
   fi
else
   if [ $HAS_USER == true ] && [ $HAS_PASSWD != true ]; then
      echo "sdbupgradeidx: missing argument: password" >&2 
      echo 'Try "sdbupgradeidx --help" for more information.'
      exit 64
   fi
fi
if [ $HAS_ACTION != true ]; then
   echo "sdbupgradeidx: missing argument: action" >&2
   echo 'Try "sdbupgradeidx --help" for more information.'
   exit 64
fi

if [ "$*" != "" ]; then
   echo "sdbupgradeidx: too many arguments: $*" >&2
   echo 'Try "sdbupgradeidx --help" for more information.'
   exit 64
fi

# get this script path
myPath=`dirname $0`

if [[ ${myPath:0:1} != "/" ]]; then
   myPath=$(pwd)/$myPath  #relative path
else
   myPath=$myPath         #absolute path
fi

# get sdb shell path
sdbShellPath=$myPath/../../bin/sdb

# get upgradeIndex.js path
jsFile=$myPath/upgradeIndex.js

# generate parameters
jsParameter="var hostname=\""$HOSTNAME"\";"
jsParameter=$jsParameter"var svcname="$SVCNAME";"
jsParameter=$jsParameter"var username=\""$USERNAME"\";"
if [ $IS_USE_CIPHER_FILE == true ]; then
   jsParameter=$jsParameter"var cipherfile=\""$CIPHER_FILE"\";"
   jsParameter=$jsParameter"var token=\""$TOKEN"\";"
else
   jsParameter=$jsParameter"var password=\""$PASSWD"\";"
fi
if [ "$ACTION" == "check" ]; then
   jsParameter=$jsParameter"var checkonly=true;"
else
   jsParameter=$jsParameter"var checkonly=false;"
fi

jsParameter="'"$jsParameter"'"

# execute command
command=$sdbShellPath" -f "$jsFile" -e "$jsParameter" > "$OUTPUT
#echo "Execute command: "$command
eval $command
echo "Generate report: "$OUTPUT

exit 0
