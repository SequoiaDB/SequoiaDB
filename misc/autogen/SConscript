import os
from os.path import join, dirname, abspath

import types
import stat
import shutil

Import("has_option")
Import("get_option")
Import("GuessOS")
Import("GuessArch")
Import("findVersion")

class CompilerBase:
    def __init__(self, name, src_root):
        self.name = name
        self.src_root = os.path.abspath(os.path.join('./', src_root))
        self.platform = ""
        self.arch = ""
        self.cmds = []

    def _get_build_lib_dir(self):
        return os.path.join(self.src_root)

    def _get_lib_archive_dir(self):
        return None

    def _init_win32_cmds(self, arch):
        return None

    def _init_linux_cmds(self, arch):
        return None

    def get_name(self):
        return self.name

    def get_src_root(self):
        return self.src_root

    def init(self, platform, arch, build_type):
        self.platform = platform
        self.arch = arch
        self.build_type = build_type
        rc = None
        if "win32" == platform:
            rc = self._init_win32_cmds(arch)
        elif "linux" == platform:
            rc = self._init_linux_cmds(arch)
        if rc is not None:
            return rc

        # Check target library path. Create it if not exists.
        lib_path = os.path.abspath(self._get_lib_archive_dir())
        if not os.path.exists(lib_path):
            try:
                os.makedirs(lib_path)
            except IOError, e:
                print('Create lib directory directory failed: ' + lib_path +
                      ". Error: " + e.message())
                return 1
        elif os.listdir(lib_path):
            print("Target library path[" + lib_path +
                  "] not empty, Skip the compilation of " + self.name)
            return 2

    def append_cmd(self, cmd, args=''):
        # Append the command into the command list as a tuple.
        self.cmds.append((cmd, args))

    def run(self):
        print("Begin to compile " + self.name + "...")
        for cmd in self.cmds:
            command = cmd[0] + ' ' + cmd[1]
            os.system(command)

    def archive(self):
        print('Archive libraries...')
        source_dir = self._get_build_lib_dir()
        libs = os.listdir(source_dir)
        for lib in libs:
            shutil.copy(os.path.join(source_dir, lib),
                        self._get_lib_archive_dir())
        print("Compile " + self.name + " done!")


class BoostCompiler(CompilerBase):
    def __init__(self, src_root):
        CompilerBase.__init__(self, "boost", src_root)

    def _get_build_lib_dir(self):
        return os.path.join(self.src_root, 'stage/lib')

    def _get_lib_archive_dir(self):
        return boost_lib_dir

    def _init_linux_cmds(self, arch):
        # Add executable permission to the building scripts.
        bootstrap_file = os.path.join(self.src_root, 'bootstrap.sh')
        build_file = os.path.join(self.src_root,
                                  'tools/build/src/engine/build.sh')
        os.chmod(bootstrap_file, stat.S_IRWXU | stat.S_IRGRP | stat.S_IROTH)
        os.chmod(build_file, stat.S_IRWXU | stat.S_IRGRP | stat.S_IROTH)
        if "ia32" == self.arch:
            address_mode = 32
        else:
            address_mode = 64

        # Only compile the necessary libraries. Commands are the same for
        # 64-bit linux, Power Linux, and Powser LE Linux. For 32-bit Linux, only
        # the address mode is different.
        self.append_cmd('./bootstrap.sh',
                        '--with-libraries=system,filesystem,thread,'
                        'program_options,chrono --prefix=./')
        self.append_cmd('./bjam',
                        'link=static threading=multi variant=release ' +
                        'address-model=' + str(address_mode) +
                        ' toolset=gcc runtime-link=static '
                        'cxxflags="-fPIC"')

root_dir = dirname(File('SConscript').rfile().abspath)
boost_dir = join(root_dir, '../../thirdparty/boost')
boost_lib_dir = join(boost_dir, 'lib')

linux = False
linux64  = False
windows = False
aix = False
force64 = has_option( "force64" )
msarch = None
guess_os = GuessOS()
guess_arch = GuessArch()
if force64:
    msarch = "amd64"

force32 = has_option( "force32" )
static = False

env = Environment( BUILD_DIR = root_dir, MSVS_ARCH=msarch, PYSYSPLATFORM=os.sys.platform )


if env['PYSYSPLATFORM'] == 'linux3':
    env['PYSYSPLATFORM'] = 'linux2'

if os.sys.platform == 'win32':
    env['OS_FAMILY'] = 'win'
else:
    env['OS_FAMILY'] = 'posix'

if env['PYSYSPLATFORM'] == 'linux2':
    env['LINK_LIBGROUP_START'] = '-Wl,--start-group'
    env['LINK_LIBGROUP_END'] = '-Wl,--end-group'
    env['RELOBJ_LIBDEPS_START'] = '--whole-archive'
    env['RELOBJ_LIBDEPS_END'] = '--no-whole-archive'
    env['RELOBJ_LIBDEPS_ITEM'] = ''

env["LIBPATH"] = []

extraLibPlaces = []

env['EXTRACPPPATH'] = []
env['EXTRALIBPATH'] = []

def addExtraLibs( s ):
    for x in s.split(","):
        env.Append( EXTRACPPPATH=[ x + "/include" ] )
        env.Append( EXTRALIBPATH=[ x + "/lib" ] )
        env.Append( EXTRALIBPATH=[ x + "/lib64" ] )
        extraLibPlaces.append( x + "/lib" )

# ---- other build setup -----

platform = os.sys.platform
if "uname" in dir(os):
    processor = os.uname()[4]
else:
    processor = "i386"

if force32:
    processor = "i386"
if force64:
    processor = "x86_64"

env['PROCESSOR_ARCHITECTURE'] = processor

DEFAULT_INSTALL_DIR = "/usr/local"
installDir = DEFAULT_INSTALL_DIR
nixLibPrefix = "lib"

env.Append( CPPPATH=[boost_dir] )
env.Append( CPPPATH=[ "../../../SequoiaDB/engine/include" ] )

# specify dependent libraries for javascript engine and boost
if guess_os == "linux":
    linux = True
    platform = "linux"

    env.Append( LIBS=['m'] )
    env.Append( LIBS=['dl'] )
    # 64 bit linux
    if guess_arch == "ia64" and not force32:
        linux64 = True
        nixLibPrefix = "lib64"
        env.Append( EXTRALIBPATH="/usr/lib64" )
        env.Append( EXTRALIBPATH="/lib64" )
        # use project-related boost library
        boost_lib_dir = join(boost_lib_dir, 'linux64/release')
        env.Append( LIBPATH = boost_lib_dir )
        force64 = False
    elif guess_arch == "arm64":
        linux64 = True
        nixLibPrefix = "lib64"
        env.Append( EXTRALIBPATH="/usr/lib64" )
        env.Append( EXTRALIBPATH="/lib64" )
        # use project-related boost library
        boost_lib_dir = join(boost_lib_dir, 'armlinux64/release')
        env.Append( LIBPATH = boost_lib_dir )
        force64 = False        
    elif guess_arch == "ppc64":
        linux64 = True
        nixLibPrefix = "lib64"
        env.Append( EXTRALIBPATH="/usr/lib64" )
        env.Append( EXTRALIBPATH="/lib64" )
        # use project-related boost library
        boost_lib_dir = join(boost_lib_dir, 'ppclinux64/release')
        env.Append( LIBPATH = boost_lib_dir )
        force64 = False
    elif guess_arch == "ppc64le":
        linux64 = True
        nixLibPrefix = "lib64"
        env.Append( EXTRALIBPATH="/usr/lib64" )
        env.Append( EXTRALIBPATH="/lib64" )
        # use project-related boost library
        boost_lib_dir = join(boost_lib_dir, 'ppclelinux64/release')
        env.Append( LIBPATH = boost_lib_dir )
        force64 = False

    # in case for 32 bit linux
    elif guess_arch == "ia32":
        linux64 = False
        nixLibPrefix = "lib"
        env.Append( EXTRALIBPATH="/usr/lib" )
        env.Append( EXTRALIBPATH="/lib" )
        # we want 32 bit boost library
        boost_lib_dir = join(boost_lib_dir, 'linux32/release')
        env.Append( LIBPATH = boost_lib_dir )

    elif guess_arch == "ia64" and force32:
        # let's use 32 bit boost library
        boost_lib_dir = join(boost_lib_dir, 'linux64/release')
        env.Append( LIBPATH=["/usr/lib32", boost_lib_dir] )

    if static:
        env.Append( LINKFLAGS=" -static " )
    env.Append ( LIBS="boost_filesystem" )
    env.Append ( LIBS="boost_system" )
    env.Append ( LIBS="boost_program_options" )
    env.Append ( LIBS="pthread" )
    env.Append ( CPPFLAGS=" -ggdb " )
elif guess_os == "aix":
    aix = True

    env.Append( LIBS=['m'] )
    env.Append( LIBS=['dl'] )
    nixLibPrefix = "lib"
    env.Append( EXTRALIBPATH="/usr/lib" )
    env.Append( EXTRALIBPATH="/lib" )
    boost_lib_dir = join(boost_lib_dir, 'aix64/release')
    env.Append( LIBPATH = boost_lib_dir )

    if static:
        env.Append( LINKFLAGS=" -static " )
    env.Append( LINKFLAGS=" -maix64 " )
    env.Append ( LIBS="boost_filesystem" )
    env.Append ( LIBS="boost_system" )
    env.Append ( LIBS="boost_program_options" )
    env.Append ( LIBS="pthread" )
    env.Append ( CPPFLAGS=" -ggdb -maix64 " )
    env.Append ( CPPDEFINES=[ "SDB_BIG_ENDIAN" ] )
elif "win32" == guess_os:

    # when building windows
    windows = True
    #if force64:

    # check VC compiler
    for pathdir in env['ENV']['PATH'].split(os.pathsep):
        if os.path.exists(os.path.join(pathdir, 'cl.exe')):
            print( "found visual studio at " + pathdir )
            break
        else:
              #use current environment
              env['ENV'] = dict(os.environ)

    # if we are 64 bit
    if guess_arch == "ia64" and not force32:
        # use 64 bit boost library
        boost_lib_dir = join(boost_lib_dir, 'win64/release')
        env.Append( LIBPATH = boost_lib_dir )
        force64 = False
    else:
        # either we are 32 bit or force 32 bit
        boost_lib_dir = join(boost_lib_dir, 'win32/release')
        env.Append( LIBPATH = boost_lib_dir )

    env.Append( CPPDEFINES=[ "_UNICODE" ] )
    env.Append( CPPDEFINES=[ "UNICODE" ] )
    # find windows SDK
    winSDKHome = findVersion( [ "C:/Program Files/Microsoft SDKs/Windows/", "C:/Program Files (x86)/Microsoft SDKs/Windows/" ] ,
                              [ "v7.1", "v7.0A", "v7.0", "v6.1", "v6.0a", "v6.0" ] )
    print( "Windows SDK Root '" + winSDKHome + "'" )

    env.Append( CPPPATH=[ winSDKHome + "/Include" ] )
    env.Append( CPPPATH=[ "C:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include" ] )

    # consider adding /MP build with multiple processes option.

    # /EHsc exception handling style for visual studio
    # /W3 warning level
    # /WX abort build on compiler warnings
    env.Append( CPPFLAGS=" /EHsc /W3 " ) #  /WX " )

    if guess_arch == "ia64" and not force32:
        env.Append( LIBPATH=[ winSDKHome + "/Lib/x64" ] )
    else:
        env.Append( LIBPATH=[ winSDKHome + "/Lib" ] )
    env.Append( LIBPATH=[ "C:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/lib/amd64" ] )

    winLibString = "ws2_32.lib kernel32.lib advapi32.lib Psapi.lib"

    if force64:

        winLibString += ""
        #winLibString += " LIBCMT LIBCPMT "

    else:
        winLibString += " user32.lib gdi32.lib winspool.lib comdlg32.lib  shell32.lib ole32.lib oleaut32.lib "
        winLibString += " odbc32.lib odbccp32.lib uuid.lib dbghelp.lib "

    env.Append( LIBS=Split(winLibString) )
    env.Append( CPPFLAGS=" /MT /Z7 /TP /errorReport:none /D_CRT_SECURE_NO_DEPRECATE " )
    env.Append( CPPFLAGS=" /Od " )

else:
    print( "No special config for [" + os.sys.platform + "] which probably means it won't work" )

env['STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME'] = 1

current_dir = os.getcwd()
# If boost release version is not ready, compile it.
if not os.path.exists(boost_lib_dir):
    os.makedirs(boost_lib_dir)
if not os.listdir(boost_lib_dir):
    print("Boost libraries of release version are not ready. Build them...")
    shutil.rmtree(os.path.join(boost_dir, 'stage'))
    boost_compiler = BoostCompiler(boost_dir)
    os.chdir(boost_dir)
    boost_compiler.init(guess_os, guess_arch, 'release')
    boost_compiler.run()
    boost_compiler.archive()

os.chdir(current_dir)

language = get_option("language")
if language is None:
   language = "en"

srcFiles = [
   "main.cpp",
   "options.cpp",
   "util.cpp",
   "generateInterface.cpp",
   "fileStream.cpp",
   "rc/rcGeneratorBase.cpp",
   "rc/rcGenForC.cpp",
   "rc/rcGenForCPP.cpp",
   "rc/rcGenForJS.cpp",
   "rc/rcGenForCS.cpp",
   "rc/rcGenForJAVA.cpp",
   "rc/rcGenForPython.cpp",
   "rc/rcGenForDoc.cpp",
   "rc/rcGenForWEB.cpp",
   "spidermonkey/codeGenerator.cpp",
   "options/optGeneratorBase.cpp",
   "options/optGenForC.cpp",
   "options/optGenForCPP.cpp",
   "options/optGenForSample.cpp",
   "options/optGenForDoc.cpp",
   "options/optGenForSAC.cpp",
   "fileList/fileListGenerator.cpp",
   "trace/traceGenerator.cpp",
   "version/versionGeneratorBase.cpp",
   "version/versionGenForDoc.cpp",
   "version/versionGenForBuild.cpp",
   "version/versionGenForTools.cpp",
   "version/versionGenForPython.cpp",
]

autogen = env.Program( "autogen", srcFiles )
cmd = "bin" + os.sep + "autogen "
run = env.Command ( target = language, source = autogen, action = cmd + "-l " + language )
env.Depends ( run, autogen )
env.AlwaysBuild( run )
